var APNVideo_VmapVastPlugin =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * VMAP Plugin Brightcove module.
	 */

	//////////////////////////////////////////////////////////////////////
	// CONSTANTS

	var _vjs = videojs;
	var _vmapManager = __webpack_require__(1);
	var _vastManager = __webpack_require__(32);
	var _vastArrayManager = __webpack_require__(35);
	var _logger = __webpack_require__(3);
	var _prefix = 'apnVmapVast';
	//var _uaParser = require('@appnexus/videoads-util-user-agent-parser');

	_logger.always(_prefix, 'Version 1.2.7');

	function registerVmapVastPlugin() {
		//_vjs = vjs;
		/*var _player;
		var _vmapManagerObj;
		var _vastManagerObj;
		var _ua = _uaParser();
		_vjs.registerPlugin('apnVmapVastPlugin', function(options) {
			_player = this;
			if (!options || !options.apnTagParams) {
				_logger.error(_prefix, "Invalid parameter 'options': ", options);
				return;
			}
			
	    	//if (!_ua.device.type && !_ua.device.model) {
	    	//	// hide big play button for desktop
	    	//	_player.bigPlayButton.el_.style.display = 'none';
	    	//}
			if (options.vmapEnabled) {
				_vmapManagerObj = new _vmapManager();
				_vmapManagerObj.play(_player, options);
			}
			else {
				_vastManagerObj = new _vastManager();
				_vastManagerObj.play(_player, options);
			}
		});*/	
		
		_vjs.registerPlugin('apnVmapVastPluginCommand', function(command, data) {
			if (command === 'stop') {
				if (_vmapManagerObj) {
					_vmapManagerObj.stop();
				}
				else if (_vastManagerObj) {
					_vastManagerObj.stop();
				}
			}
			else if (command === 'insertAdBreak') {
				if (!_player) {
					_player = this;
				}
				if (!data || !data.apnTagParams) {
					_logger.error(_prefix, "Invalid parameter 'data': ", data);
					return;
				}
				if (!_vmapManagerObj) {
					_vmapManagerObj = new _vmapManager();
				}
				_vmapManagerObj.play(_player, data);
			}
		});
	}

	var vmapVastPlugin = {
				
			init : function () {
				registerVmapVastPlugin();
			},
			
			id: null,
			
			play: function(options, id) {
				this.id = id;
				_vjs(id).apnVmapVastPlugin(options);
			},
			
			stop: function() {
				_vjs(this.id).apnVmapVastPluginCommand('stop');
			},
			
			insertAdBreak: function(id, options, breakTime) {
				this.id = id;
				options.breakTime = breakTime;
				_vjs(this.id).apnVmapVastPluginCommand('insertAdBreak', options);
			}		
	};
	//////////////////////////////////////////////////////////////////////
	// EXPORTS
	module.exports = vmapVastPlugin;
	/*module.exports = {
			
		init : function () {
			registerVmapVastPlugin(videojs);
		},
		
		id: null,
		
		play: function(options, id) {
			this.id = id;
			_vjs(id).apnVmapVastPlugin(options);
		},
		
		stop: function() {
			_vjs(this.id).apnVmapVastPluginCommand('stop');
		},
		
		insertAdBreak: function(id, options, breakTime) {
			this.id = id;
			options.breakTime = breakTime;
			_vjs(this.id).apnVmapVastPluginCommand('insertAdBreak', options);
		}
	};*/

	// test
	var _player;
	var _vmapManagerObj;
	var _vastManagerObj;
	videojs.registerPlugin('apnVmapVastPlugin', function(options) {
		_player = this;
		if (!options || !options.apnTagParams) {
			//_logger.error(_prefix, "Invalid parameter 'options': ", options);
			return;
		}
		
		if (options.vmapEnabled) {
			_vmapManagerObj = new _vmapManager();
			_vmapManagerObj.play(_player, options);
		}
		else {
			if (Array.isArray(options.apnTagParams)) {
				_vastManagerObj = new _vastArrayManager();
				_vastManagerObj.play(_player, options);
			}
			else {
				_vastManagerObj = new _vastManager();
				_vastManagerObj.play(_player, options);
			}
		}
	});
	window.APNVideo_VmapVastPlugin = vmapVastPlugin;

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

	var _markersHandler = __webpack_require__(2);
	var _breakManager = __webpack_require__(4);
	var _ImpbusCommunicator = __webpack_require__(17);
	var _vmapParser = __webpack_require__(24);
	var _utils = __webpack_require__(16);
	var _xmlParserHelper = __webpack_require__(18);
	var _logger = __webpack_require__(3);
	var _uaParser = __webpack_require__(9);

	var _prefix = 'apnVmapVast->vmapManager';

	var vmapManager = function () {
		var _ua = _uaParser();
		var _preparationDone = false;
		var _player;
		var _options;
		var _helper = new _xmlParserHelper();
		var _impbusCommunicator = new _ImpbusCommunicator();
		
		var _cover = document.getElementById('apn-break-cover');
		var _spinnerDiv = document.getElementById('apn-break-spinner');

		var _needsResetData = false;
		
		var _adBreaks = [];
		var _breakPlaying = false;
		var _playingBreakIdx = -1;
		var _snapshot;
		var _savedMarkers;
		var _newMarkerSeconds;
		var _markersHandlerObj;
		var _contentDuration;
		
		var _playlist = [];
		var _playlistIdx = -1;
		var _playlistBreaks = null;
		var _nextPlaylistItemFired = false;

		var _lastBreakTime = 0;
		var _source;
		var _canReplayPreroll = false;
		
		function showCover(show) {
			_logger.log(_prefix, (show ? "Show" : "Hide") + " ad cover with spinner");
			if (show) {
	    		_cover.style.display = 'block';
	     		_player.el().classList.add('vjs-waiting');
			}
			else {
	    		_cover.style.display = 'none';
	    		_player.el().classList.remove('vjs-waiting');
			}
		}
		
		function modifyVastXmlsInVmapObject(vmapObj) {
			for (var i = 0; i < vmapObj.adBreaks.length; i++) {
				if (_options.breakTime) {
					vmapObj.adBreaks[i].timeOffset = _options.breakTime;
				}
				if (vmapObj.adBreaks[i].adSource && vmapObj.adBreaks[i].adSource.vastData) {
					for (var sequence in vmapObj.adBreaks[i].adSource.vastData) {
						var vastObjSequence = vmapObj.adBreaks[i].adSource.vastData[sequence];
						if (Array.isArray(vastObjSequence) && vastObjSequence.length > 0) {
							for (var j = 0; j <  vastObjSequence.length; j++) {
								var vastObj = vastObjSequence[j];
					    		if (vastObj.vastXml && _options && _options.skippable) {
					    			// update skipOffset in vastXml
					    			var xmlDoc = (new DOMParser()).parseFromString(vastObj.vastXml, 'text/xml');
					    			var linear = _helper.getSubNode(xmlDoc, 'Linear', 0);
					    			if (linear) {
					    				// remove skippOffset attribute
					    				linear.removeAttribute('skipoffset');
					    				if (_options.skippable.enabled) {
						    				var node = _helper.getSubNode(linear, 'Duration');
						    				var str = _helper.getNodeValue(node);
						    				var duration = _utils.convertStringToMseconds(str);
						    				if (duration && duration >= _options.skippable.videoThreshold * 1000) {
						    					vastObj.durationMsecs = duration;
						    					vastObj.skipOffset = _utils.convertSecsToString(_options.skippable.videoOffset);
						    				}
						    				else {
							    				if (vastObj.skipOffset) {
							    					delete vastObj.skipOffset;
							    				}
						    				}
					    				}
						    			else {
						    				if (vastObj.skipOffset) {
						    					delete vastObj.skipOffset;
						    				}
						    			}
					    				if (vastObj.skipOffset) {
					    					// add new skipoffset attribute if needed 
					                        var attr = xmlDoc.createAttribute('skipoffset');
					                        attr.value = vastObj.skipOffset;
					                        linear.setAttributeNode(attr);
					    				}
					    				vastObj.vastXml = (new XMLSerializer()).serializeToString(xmlDoc);
					    			}
					    		}
							}
						}
					}
				}
			}
		}
		
		function parseVmapXmls(arrXml, callback) {
			var vmapObjects = [];
			var count = 0;
			
			for (var i = 0; i < arrXml.length; i++) {
				var parserCallbackWrapper = function(idx) {
					return function(succ, data, arrErrorUrls) {
						count++;
						var url = arrXml[idx].url;
						if (succ) {
							_logger.log(_prefix, 'Successfully parsed VMAP xml from ' + url);
							modifyVastXmlsInVmapObject(data);
							vmapObjects.push(data);
						}
						else {
							
							_logger.log(_prefix, 'Failed to parse VMAP xml from ' + url);
							if (arrErrorUrls && arrErrorUrls.length > 0) {
								_utils.trackUrls(arrErrorUrls);
							}
						}
						if (count >= arrXml.length) {
							callback(vmapObjects);
						}
					};
				};
				if (_options.timeouts) {
					if (_options.timeouts.adServerTimeout) {
						_options.adServerTimeout = _options.timeouts.adServerTimeout;
						_vmapParser.parse(arrXml[i].xml, parserCallbackWrapper(i), null, _options);
					}
					else {
						_vmapParser.parse(arrXml[i].xml, parserCallbackWrapper(i), _options.timeouts.adCallTimeout, _options);
					}
				}
				else {
					_vmapParser.parse(arrXml[i].xml, parserCallbackWrapper(i), null, _options);
				}
			}
		}
		
		function afterParseVmapXmls(vmapObjects) {
			// merge all vmap objects into one vmap object
			if (vmapObjects.length > 0) {
				var vmapObject = vmapObjects[0];
				for (var i = 1; i < vmapObjects.length; i++) {
					vmapObject = _vmapParser.mergeVmapData(vmapObject, vmapObjects[i]);
				}
				_logger.debug(_prefix, 'VMAP data for rendering: ', vmapObject);
				prepareBreakInstances(vmapObject);
			}
			else {
				showCover(false);
				_logger.warn(_prefix, 'No VMAP data is available.');
				_preparationDone = true;
				_player.play();
			}
		}
		
		function insertSingleXML(sXml) {
			var singleVmapObject = {};
			singleVmapObject.adBreaks = [];
			singleVmapObject.adBreaks.push({timeOffset: _options.breakTime, xml: sXml});
			prepareBreakInstances(singleVmapObject);
		}
		
		function prepareBreakInstances(vmapObject) {
			if (Array.isArray(vmapObject.adBreaks) && vmapObject.adBreaks.length > 0) {
			    var timeMarkers = {
				    	markerStyle: {
				    		'width': '5px',
				    		'border-radius': '10%',
				    		'background-color': 'white'
				    	},
						markerTip: {
							display: false
						},
				    	onMarkerReached: function(marker) {
				    		startBreak(marker.time);
				    	},
				    	markers: [],
				    	metadataLoaded: true
				    };
			    
			    var prepareBreakArray = function() {
			    	if (!_contentDuration) {
			    		_contentDuration = _player.duration();
					}
					var hasPreroll = false;
			    	var duration = _contentDuration;
			    	var seconds;
					for (var i = 0; i < vmapObject.adBreaks.length; i++) {
						var adBreak = vmapObject.adBreaks[i];
						var currentTime = _player.currentTime();
						if (_snapshot) {
							currentTime = _snapshot.currentTime;
						}
						seconds = _utils.convertStringToSeconds(adBreak.timeOffset, duration, currentTime);
						if (seconds !== null && seconds <= duration) {
							if (seconds === duration) {
								seconds = parseInt(duration + 0.5);
							}
							var bFound = false;
							for (var j = 0; j < timeMarkers.markers.length; j++) {
								if (timeMarkers.markers[j].time === seconds) {
									bFound = true;
									break;
								}
							}
							if (bFound) {
								// break at particular time already exist
								continue;
							}
							var adBreakTime = {time: seconds, played: false, adBreak: adBreak};
							if (seconds >= 0) {
								timeMarkers.markers.push({time: seconds});
								if (seconds < 1) {
									hasPreroll = true;
								}
							}
							_adBreaks.push(adBreakTime);
						}
					}
					if (timeMarkers.markers.length > 0) {
					    _adBreaks.sort(function(a, b) {
					    	return a.time - b.time;
					    });
					    if (_options.breakTime && _adBreaks.length > 1) {
					    	// add new break
					    	if (!_breakPlaying) {
						    	_player.markers.add(timeMarkers.markers);
					    	}
					    	else {
						    	_newMarkerSeconds = seconds;
					    	}
					    }
					    else {
					    	// initialize markers for all breaks
							if (_markersHandler && _player.markers && _player.markers.destroy) {
								_player.markers.destroy();
							}
							if (!_markersHandlerObj) {
								_markersHandlerObj = new _markersHandler(videojs);
							}
						    _markersHandlerObj.init(_player);
						    _markersHandlerObj.markers(timeMarkers);
					    }
					}
	    			_preparationDone = true;
	    			if (_options.playerSettings.autostart) {
	        			_player.play();
					}
					
					if (!hasPreroll) {
						showCover(false);
					}
	    			
	    			if (_options.replayAdBreak) {
	    				// VIDLA-2319 - support break replay functionality
	    				_source = _player.currentSource().src;
	    				_canReplayPreroll = false;
		    		    _player.on('seeked', function() {
		    		    	if (!_breakPlaying && _source === _player.currentSource().src) {
		    		    		if (_player.markers) {
		    		    			_player.markers.allowReplay();
		    		    		}
		    		    		prepareBreaksForReplay();
		    		    	}
		    		    });
		    		    _player.on('timeupdate', function() {
		    		    	if (_source === _player.currentSource().src) {
			    		    	if (!_canReplayPreroll && !_breakPlaying && _player.currentTime() > 2) {
			    		    		_canReplayPreroll = true;
			    		    	}
		    		    	}
		    		    });
	    			}
			    };
			    
			    if (_contentDuration || (!_contentDuration && _player.duration() > 0)) {
			    	prepareBreakArray();
			    }
			    else {
			    	_player.one("loadedmetadata",prepareBreakArray);
				}
				if (_player.playlist && _player.playlist.autoadvance) {
					_player.playlist.autoadvance(null);
				}
			}
			else {
				_logger.warn(_prefix, 'VMAP object does not contain breaks.');
				_preparationDone = true;
				_player.play();
				if (_player.playlist && _player.playlist.autoadvance) {
					_player.playlist.autoadvance(0);
				}
			}
		}
		
		// VIDLA-2319 - support break replay functionality
		function prepareBreaksForReplay() {
			var playerCurTime = _player.currentTime();
			_logger.log(_prefix, 'Seeked event: player time = ' + playerCurTime + ', last break time = ' + _lastBreakTime);
	    	//if (playerCurTime <= _lastBreakTime) {
				_logger.log(_prefix, 'Seeked back event happened');
				for (var i = 0; i < _adBreaks.length; i++) {
					if (_adBreaks[i].time >= playerCurTime && _adBreaks[i].played) {
						if (_adBreaks[i].time === 0) {
							// pre-roll
		    				_logger.log(_prefix, 'Seeked event: can replay preroll = ' + _canReplayPreroll);
							if (_canReplayPreroll) {
								_canReplayPreroll = false;
	    						_adBreaks[i].played = false;
	    						_adBreaks[i].breakObj = null;
							}
						}
						else if ((_player.duration() - _adBreaks[i].time) < 2) {
							// post-roll
							if ((_adBreaks[i].time - playerCurTime) > 2) {
	    						_adBreaks[i].played = false;
	    						_adBreaks[i].breakObj = null;
							}
						}
						else {
							// mid-roll
							if (_adBreaks[i].time > playerCurTime) {
	    						_adBreaks[i].played = false;
	    						_adBreaks[i].breakObj = null;
							}
						}
					}
				}
	    	//}
		}
		
		function getBreakIndex(breakTime, cuePoint) {
			var i;
			if (breakTime === null) {
				if (cuePoint) {
					for (i = _adBreaks.length - 1; i >= 0; i--) {
						if (_adBreaks[i].time < 0 && !_adBreaks[i].played) {
							return i;
						}
					}
				}
				else {
					for (i = 0; i < _adBreaks.length; i++) {
						if (_adBreaks[i].time >= 0 && !_adBreaks[i].played) {
							return i;
						}
					}
				}
			}
			else {
				for (i = 0; i < _adBreaks.length; i++) {
					if (_adBreaks[i].time === breakTime && !_adBreaks[i].played) {
						return i;
					}
				}
			}
			return null;
		}
		
		function getBreakByBreakId(breakId) {
			for (var i = 0; i < _adBreaks.length; i++) {
				if (_adBreaks[i].adBreak.breakId === breakId) {
					return _adBreaks[i];
				}
			}
			return null;
		}
		
		function removeBrightcodeErrorDialog() {
			var elements = document.getElementsByClassName('vjs-error-display');
			if (elements && elements.length > 0) {
				var elem = elements[0];
				if (elem) {
					elem.parentNode.removeChild(elem);
				}
			}
		}

		function startBreak(breakTime) {
			_logger.log(_prefix, 'startBreak called. Break time: ' + breakTime);
			showCover(false);
			if (_breakPlaying) {
				// not interrupt playing break
				_logger.log(_prefix, 'startBreak called. Break are playing right now');
				return;
			}
			_player.off('ended', mainContentEnded);
			removeBrightcodeErrorDialog();
			_playingBreakIdx = -1;
			// VIDLA-2319 - support break replay functionality
			if (_options.replayAdBreak) {
				prepareBreaksForReplay();
			}
			var idx = getBreakIndex(breakTime, false);
			if (idx !== null && !_adBreaks[idx].played) {
	    		//_snapshot = _utils.getPlayerSnapshot(_player);
				//_player.pause();		// pause main content
				_playingBreakIdx = idx;
				_breakPlaying = true;
				if (!_adBreaks[idx].breakObj) {
				    _adBreaks[idx].breakObj = new _breakManager(_adBreaks[idx].adBreak, _player, _options, breakNotificationCallback);
				}
				// save markers
	    		if (_markersHandler) {
	      	  		_savedMarkers = JSON.stringify(_player.markers.getMarkers());
	      	  		_player.markers.removeAll();
	    		}
	   			_adBreaks[idx].played = true;
	   			_lastBreakTime = breakTime;
	   			if (breakTime !== 0) {
	   				_options.playerSettings.autostart = true;
	   				_options.playerSettings.muted = _player.muted();
	   			}
				var needWaitForStartContent = (breakTime === 0) && (_ua.device.type || _ua.device.model);
				if (needWaitForStartContent && _player.playlist && typeof _player.playlist === 'function') {
					if (_player.playlist.currentIndex() > 0) {
						needWaitForStartContent = false;
					}
				}
				if (needWaitForStartContent) {
					setTimeout(function() {
						_player.pause();
						_player.bigPlayButton.el_.style.display = 'block';
						_player.one('play', function() {
							_snapshot = _utils.getPlayerSnapshot(_player);
							_player.pause();		// pause main content
							_adBreaks[idx].breakObj.start();
						});
					}, 500);
				}
				else {
		    		_snapshot = _utils.getPlayerSnapshot(_player);
					_player.pause();		// pause main content
					_adBreaks[idx].breakObj.start();
				}
			}
			else {
				_logger.log(_prefix, 'Break time: ' + breakTime + ' already played or not exist.');
			}
			if (!_playlistBreaks) {
				getXmlsForNextPlaylistItem();
			}
		}

		function mainContentEnded() {
			setTimeout(function() {
				if (!_nextPlaylistItemFired && _playlistBreaks && !_breakPlaying) {
					_player.playlist.next();
				}
			}, 500);
		}
		
		function resetContent() {
			_player.one('tryToResumeDone', function() {
				_breakPlaying = false;
				_nextPlaylistItemFired = false;
				// make sure we are waiting for event 'ended' on main content 
				var delay = _player.currentTime() < (_player.duration() - 3) ? 2000 : 0;
				_logger.log(_prefix, 'Activate ended event delay = ' + delay);
				if (delay === 0) {
					if (_playlistBreaks && _playlist.length > 0 && _player.playlist.currentIndex() < (_playlist.length - 1)) {
						_player.one('ended', mainContentEnded);
					}		
				}
				else {
					setTimeout(function() {
						if (_playlistBreaks && _playlist.length > 0 && _player.playlist.currentIndex() < (_playlist.length - 1)) {
							_player.one('ended', mainContentEnded);
						}		
					}, delay);
				}
			});
			_utils.restorePlayerSnapshot(_player, _snapshot);
			_snapshot = null;
			_utils.showNextOverlay(true);
			setTimeout(function() {
				_breakPlaying = false;
				if (_savedMarkers) {
					var markers = JSON.parse(_savedMarkers);
					if (_newMarkerSeconds) {
						// add new marker
						markers.push({time: _newMarkerSeconds});
						_newMarkerSeconds = null;
					}
					if (_player.markers && _player.markers.reset) {
						_player.markers.reset(markers);
					}
				}
				if (_player.paused() && _player.currentTime() === 0) {
					_player.bigPlayButton.el_.style.display = 'block';
					_player.one('playing', function() {
						_player.bigPlayButton.el_.style.display = 'none';
					});
				}
			}, 1000);
		}
		
		function getXmlsForNextPlaylistItem() {
			_playlist = (_player.playlist && typeof _player.playlist === 'function') ? _player.playlist() : [];
			if (!_playlist) {
				_playlist = [];
			}
			if (_playlist.length > 1 && _player.playlist.currentIndex() < (_playlist.length - 1)) {
				if (!_playlistBreaks) {
					_impbusCommunicator.getXML(_options, _player, function(arrXml) {
						if (!arrXml) {
							_logger.error(_prefix, 'Error to get VMAP xml(s) for next playlist item.');
						}
						else {
							if (Array.isArray(arrXml)) {
								parseVmapXmls(arrXml, function(vmapObjects) {
									// merge all vmap objects into one vmap object
									if (vmapObjects.length > 0) {
										_playlistBreaks = vmapObjects[0];
										for (var i = 1; i < vmapObjects.length; i++) {
											_playlistBreaks = _vmapParser.mergeVmapData(_playlistBreaks, vmapObjects[i]);
										}
										_logger.debug(_prefix, 'VMAP data for rendering next playlist item: ', _playlistBreaks);
									}
									else {
										_logger.warn(_prefix, 'No VMAP data is available for next playlist item.');
									}
								});
							}
							else {
								if (arrXml) {
									_playlistBreaks = {};
									_playlistBreaks.adBreaks = [];
									_playlistBreaks.adBreaks.push({timeOffset: _options.breakTime, xml: arrXml});
								}
								else {
									_logger.warn(_prefix, 'No VMAP data is available for next playlist item.');
								}
							}
						}
					});
				}
			}
			else {
				_player.off('playlistitem', nextListItemHandler);
			}
		}

		function nextListItemHandler() {
			_logger.log(_prefix, 'playlistitem is fired');
			showCover(true);
			_nextPlaylistItemFired = true;
			_playlistIdx++;
			_contentDuration = 0;
			if (_markersHandler && _player.markers && _player.markers.destroy) {
				_player.markers.destroy();
			}
			_player.one('loadedmetadata', function() {
				if (_playlistBreaks) {
					prepareBreakInstances(_playlistBreaks);
					_playlistBreaks = null;
				}
				else {
					_impbusCommunicator.getXML(_options, _player, function(arrXml) {
						if (!arrXml) {
							showCover(false);
							_logger.error(_prefix, 'Error to get VMAP xml(s) for next playlist item.');
						}
						else {
							if (Array.isArray(arrXml)) {
								parseVmapXmls(arrXml, function(vmapObjects) {
									// merge all vmap objects into one vmap object
									if (vmapObjects.length > 0) {
										_playlistBreaks = vmapObjects[0];
										for (var i = 1; i < vmapObjects.length; i++) {
											_playlistBreaks = _vmapParser.mergeVmapData(_playlistBreaks, vmapObjects[i]);
										}
										_logger.debug(_prefix, 'VMAP data for rendering next playlist item: ', _playlistBreaks);
										prepareBreakInstances(_playlistBreaks);
										_playlistBreaks = null;
									}
									else {
										showCover(false);
										_logger.warn(_prefix, 'No VMAP data is available for next playlist item.');
										_player.play();
									}
								});
							}
							else {
								if (arrXml) {
									_playlistBreaks = {};
									_playlistBreaks.adBreaks = [];
									_playlistBreaks.adBreaks.push({timeOffset: _options.breakTime, xml: arrXml});
									prepareBreakInstances(_playlistBreaks);
									_playlistBreaks = null;
								}
								else {
									showCover(false);
									_logger.warn(_prefix, 'No VMAP data is available for next playlist item.');
									_player.play();
								}
							}
						}
					});
				}
			});
		}

		function breakNotificationCallback(breakId, notificationObj) {
			var adBreak = getBreakByBreakId(breakId);
			if (adBreak) {
				_logger.log(_prefix, 'Notification ' + notificationObj.name + ' from break ' + breakId);
				switch (notificationObj.name) {
				case "BreakStarted":
					_breakPlaying = true;
					_utils.showNextOverlay(false);
					break;
				case "BreakComplete":
					resetContent();
					break;
				case "BreakError":
					resetContent();
					break;
				case "BreakStopped":
					resetContent();
					break;
				case "BreakAdStarted":
					_utils.showNextOverlay(false);
					break;
				case "BreakAdComplete":
					break;
				case "BreakAdError":
					break;
				case "BreakAdStopped":
					if (_needsResetData) {
						_needsResetData = false;
						_adBreaks = [];
						setTimeout(function() {
							resetContent();
						}, 1);
					}
					break;
				default:
					_logger.warn(_prefix, 'Unknown notification ' + notificationObj.name + ' from break ' + breakId);
				}
			}
		}
		
		function requestImpbus() {
			showCover(true);
	    	_impbusCommunicator.getXML(_options, _player, function(arrXml) {
	    		if (!arrXml) {
					showCover(false);
	    			_logger.error(_prefix, 'Error to get VMAP xml(s).');
	    			_preparationDone = true;
	    			if (_options.playerSettings.autostart) {
						if (_ua.device.type || _ua.device.model) {
							_player.bigPlayButton.el_.style.display = 'block';
							_player.one('play', function() {
								_player.bigPlayButton.el_.style.display = 'none';
							});
						}
						else {
							_player.play();
						}
	    			}
	    			else {
	    	    		_player.bigPlayButton.el_.style.display = 'block';
	    			}
	    		}
	    		else {
	    			if (Array.isArray(arrXml)) {
	        			// parse all VMAP xmls
	        			parseVmapXmls(arrXml, afterParseVmapXmls);
	    			}
	    			else {
	    				insertSingleXML(arrXml);
	    			}
	    		}
	    	});
		}

		this.play = function (vjsPlayer, options) {
	    	_player = vjsPlayer;
			_options = options;	  
	    	
	    	// get player autostart and audio settings
	    	_options.playerSettings = {};
	    	_options.playerSettings.autostart = _player.currentTime() === 0 ? _player.autoplay() : !_player.paused();
	    	_options.playerSettings.muted = _player.muted();
	    	
			// initialize graphics 
			if (!_cover) {
				_cover = document.createElement('div');
				_cover.id = 'apn-break-cover';
				_cover.style.width = '100%';
				_cover.style.height = '100%';
				_cover.style.backgroundColor = 'black';
				_cover.style.position = 'absolute';
				_cover.style.zIndex = 101;
				_player.el().appendChild(_cover);
			}
			_cover.style.display = 'none';
			if (!_spinnerDiv) {
				_spinnerDiv = document.createElement('div');
				_spinnerDiv.id = 'apn-break-spinner';
				_spinnerDiv.className = 'vjs-loading-spinner';
				_cover.appendChild(_spinnerDiv);
			}

			_player.bigPlayButton.el_.style.opacity = 1;
	    	if (!_ua.device.type && !_ua.device.model && _options.playerSettings.autostart) {
				// hide big play button for desktop
				_player.bigPlayButton.el_.style.display = 'none';
			}
	    	if (_player.duration() > 0) {
	    		// main content passible playing
				_player.pause();
				_player.on('playlistitem', nextListItemHandler);
				requestImpbus();
	    	}
	    	else {
				showCover(true);
	    		if (_ua.device.type || _ua.device.model) {
					// mobile
					_options.playerSettings.autostart = true;
					_options.playerSettings.muted = _player.muted();
					if (_player.autoplay() === true) {
						_player.autoplay('any');
					}

					if (!_preparationDone) {
						_player.pause();
					}
					requestImpbus();
					_player.one('loadedmetadata', function() {
						_player.on('playlistitem', nextListItemHandler);
					});
				}
				else {
					// desktop
					setTimeout(function() {
						if (_player.paused() && _player.bigPlayButton.el_.style.display !== 'block' && !_breakPlaying) {
							showCover(false);
							_player.bigPlayButton.el_.style.display = 'block';
							_player.bigPlayButton.one('click', function() {
								_player.bigPlayButton.el_.style.display = 'none';
							});
						}	
					}, 1000);
					_player.one('playing', function() {
						if (_player.paused()) {
							showCover(false);
							_player.bigPlayButton.el_.style.display = 'block';
							_player.bigPlayButton.one('click', function() {
								_player.bigPlayButton.el_.style.display = 'none';
								requestImpbus();
							});
						}
						else {
							_player.bigPlayButton.el_.style.display = 'none';
							requestImpbus();
						}
						if (!_preparationDone) {
							_player.pause();
						}
						_player.on('playlistitem', nextListItemHandler);
					});
				}
	    	}
	    };
	    
	    this.stop = function() {
	    	if (_breakPlaying) {
	    		_needsResetData = true;
	    		_adBreaks[_playingBreakIdx].breakObj.stop();
	    	}
	    	else {
	    		_adBreaks = [];
	    	}
	    	_savedMarkers = null;
			if (_markersHandler) {
	  	  		_player.markers.destroy();
			}
	    };

	};

	module.exports = vmapManager;


/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

	var _logger = __webpack_require__(3);
	var _prefix = 'apnVmapVast->MarkersHandler';

	var markersHandler = function (vjs) {
		var _vjs = vjs;
		var _player = null;
		
		// default setting
		var defaultSetting = {
			markerStyle: {
				'width': '7px',
				'border-radius': '30%',
				'background-color': 'red'
			},
			markerTip: {
				display: true,
				text: function text(marker) {
					return (marker && marker.text) ? ("Break: " + marker.text) : '';
				},
				time: function time(marker) {
					return marker.time;
				}
			},
			breakOverlay: {
				display: false,
				displayTime: 3,
				text: function text(marker) {
					return "Break overlay: " + marker.overlayText;
				},
				style: {
					'width': '100%',
					'height': '20%',
					'background-color': 'rgba(0,0,0,0.7)',
					'color': 'white',
					'font-size': '17px'
			    }
			},
			onMarkerClick: function onMarkerClick() {},
			onMarkerReached: function onMarkerReached() {},
			markers: []
		};

		// create a non-colliding random number
		function generateUUID() {
			var d = new Date().getTime();
			var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
				var r = ((d + Math.random() * 16) % 16) | 0;
				d = Math.floor(d / 16);
				return (c === 'x' ? r : (r & 0x3) | 0x8).toString(16);
			});
			return uuid;
		}

		var NULL_INDEX = -1;

		var markers = function(options) {
			var player = _player;

		    /**
		     * register the markers plugin (dependent on jquery)
		     */
		    var setting = _vjs.mergeOptions(defaultSetting, options),
		        markersMap = {},
		        markersList = [],
		        // list of markers sorted by time
		    currentMarkerIndex = NULL_INDEX,
		        markerTip = null,
		        breakOverlay = null,
		        overlayIndex = NULL_INDEX;

		    function sortMarkersList() {
		      // sort the list by time in asc order
		      markersList.sort(function (a, b) {
		        return setting.markerTip.time(a) - setting.markerTip.time(b);
		      });
		    }

		    function addMarkers(newMarkers) {
		      newMarkers.forEach(function (marker) {
						marker.key = generateUUID();
						
						marker.reacheTime = marker.time;
						_logger.log(_prefix, 'marker.reacheTime = ' + marker.reacheTime);
						marker.time = parseInt(marker.time + 0.5);

		        player.el().querySelector('.vjs-progress-holder').appendChild(createMarkerDiv(marker));

						// store marker in an internal hash map
						if (marker.reacheTime >= player.duration()) {
							marker.time = player.duration() - 0.6;
						}
						else {
							marker.time = marker.reacheTime;
						}
						_logger.log(_prefix, 'in markerList marker.time = ' + marker.time);
		        markersMap[marker.key] = marker;
		        markersList.push(marker);
		      });

		      sortMarkersList();
		    }
		    

		    function getPosition(marker) {
		      return setting.markerTip.time(marker) / player.duration() * 100;
		    }

		    function createMarkerDiv(marker) {
		      var markerDiv = _vjs.dom.createEl('div', {
		        className: 'vjs-marker ' + (marker.class || "")
		      }, {
		        'data-marker-key': marker.key,
		        'data-marker-time': setting.markerTip.time(marker)
		      });

		      Object.keys(setting.markerStyle).forEach(function (key) {
		        markerDiv.style[key] = setting.markerStyle[key];
		      });
		      var pos = getPosition(marker);
		      if (pos >= 100) {
		    	  pos = 99.5;
		      }
					_logger.log(_prefix, 'marker.time = ' + marker.time + ', position = ' + pos + '%');
		      markerDiv.style.left = pos + '%';
		      try {
			      var rect = markerDiv.getBoundingClientRect();
			      markerDiv.style.marginLeft = rect.width / 2 + 'px';
		      }
		      catch(e) {}

		      // bind click event to seek to marker time
		      markerDiv.addEventListener('click', function () {
		        var preventDefault = false;
		        if (typeof setting.onMarkerClick === "function") {
		          // if return false, prevent default behavior
		          preventDefault = setting.onMarkerClick(marker) === false;
		        }

		        if (!preventDefault) {
		          var key = this.getAttribute('data-marker-key');
		          player.currentTime(setting.markerTip.time(markersMap[key]));
		        }
		      });

		      if (setting.markerTip.display) {
		        registerMarkerTipHandler(markerDiv);
		      }

		      return markerDiv;
		    }

		    function updateMarkers() {
		      // update UI for markers whose time changed
		      markersList.forEach(function (marker) {
		        var markerDiv = player.el().querySelector(".vjs-marker[data-marker-key='" + marker.key + "']");
		        var markerTime = setting.markerTip.time(marker);

		        if (markerDiv.getAttribute('data-marker-time') !== markerTime) {
		          markerDiv.style.left = getPosition(marker) + '%';
		          markerDiv.setAttribute('data-marker-time', markerTime);
		        }
		      });
		      sortMarkersList();
		    }

		    function removeMarkers(indexArray) {
		      // reset overlay
		      if (!!breakOverlay) {
		        overlayIndex = NULL_INDEX;
		        breakOverlay.style.visibility = "hidden";
		      }
		      currentMarkerIndex = NULL_INDEX;

		      var deleteIndexList = [];
		      indexArray.forEach(function (index) {
		        var marker = markersList[index];
		        if (marker) {
		          // delete from memory
		          delete markersMap[marker.key];
		          deleteIndexList.push(index);

		          // delete from dom
		          var el = player.el().querySelector(".vjs-marker[data-marker-key='" + marker.key + "']");
		          el.parentNode.removeChild(el);
		        }
		      });

		      // clean up markers array
		      deleteIndexList.reverse();
		      deleteIndexList.forEach(function (deleteIndex) {
		        markersList.splice(deleteIndex, 1);
		      });

		      // sort again
		      sortMarkersList();
		    }

		    // attach hover event handler
		    function registerMarkerTipHandler(markerDiv) {
		      markerDiv.addEventListener('mouseover', function () {
		        var marker = markersMap[markerDiv.getAttribute('data-marker-key')];
		        if (!!markerTip) {
		          markerTip.querySelector('.vjs-tip-inner').innerText = setting.markerTip.text(marker);
		          // margin-left needs to minus the padding length to align correctly with the marker
		          markerTip.style.left = getPosition(marker) + '%';
		          markerTip.style.marginLeft = -parseFloat(markerTip.getBoundingClientRect().width / 2) + parseFloat(markerDiv.getBoundingClientRect().width / 4) + 'px';
		          markerTip.style.visibility = 'visible';
		        }
		      });

		      markerDiv.addEventListener('mouseout', function () {
		        if (!!markerTip) {
		          markerTip.style.visibility = "hidden";
		        }
		      });
		    }

		    function initializeMarkerTip() {
		      markerTip = _vjs.dom.createEl('div', {
		        className: 'vjs-tip',
		        innerHTML: "<div class='vjs-tip-arrow'></div><div class='vjs-tip-inner'></div>"
		      });
		      player.el().querySelector('.vjs-progress-holder').appendChild(markerTip);
		    }

		    // show or hide break overlays
		    function updateBreakOverlay() {
		      if (!setting.breakOverlay.display || currentMarkerIndex < 0) {
		        return;
		      }

		      var currentTime = player.currentTime();
		      var marker = markersList[currentMarkerIndex];
		      var markerTime = setting.markerTip.time(marker);

		      if (currentTime >= markerTime && currentTime <= markerTime + setting.breakOverlay.displayTime) {
		        if (overlayIndex !== currentMarkerIndex) {
		          overlayIndex = currentMarkerIndex;
		          if (breakOverlay) {
		            breakOverlay.querySelector('.vjs-break-overlay-text').innerHTML = setting.breakOverlay.text(marker);
		          }
		        }

		        if (breakOverlay) {
		          breakOverlay.style.visibility = "visible";
		        }
		      } else {
		        overlayIndex = NULL_INDEX;
		        if (breakOverlay) {
		          breakOverlay.style.visibility = "hidden";
		        }
		      }
		    }

		    // problem when the next marker is within the overlay display time from the previous marker
		    function initializeOverlay() {
		      breakOverlay = _vjs.dom.createEl('div', {
		        className: 'vjs-break-overlay',
		        innerHTML: "<div class='vjs-break-overlay-text'></div>"
		      });
		      Object.keys(setting.breakOverlay.style).forEach(function (key) {
		        if (breakOverlay) {
		          breakOverlay.style[key] = setting.breakOverlay.style[key];
		        }
		      });
		      player.el().appendChild(breakOverlay);
		      overlayIndex = NULL_INDEX;
		    }

		    function onTimeUpdate() {
		      onUpdateMarker();
		      updateBreakOverlay();
		      if (options.onTimeUpdateAfterMarkerUpdate) {
		    	  options.onTimeUpdateAfterMarkerUpdate();
		      }
		    }

		    function onUpdateMarker() {
		      /*
		        check marker reached in between markers
		        the logic here is that it triggers a new marker reached event only if the player
		        enters a new marker range (e.g. from marker 1 to marker 2). Thus, if player is on marker 1 and user clicked on marker 1 again, no new reached event is triggered)
		      */
		      if (!markersList.length) {
		        return;
		      }

		      var getNextMarkerTime = function getNextMarkerTime(index) {
		        if (index < markersList.length - 1) {
		          return setting.markerTip.time(markersList[index + 1]);
		        }
		        // next marker time of last marker would be end of video time
		        return player.duration();
		      };
		      var currentTime = player.currentTime();
		      var newMarkerIndex = NULL_INDEX;

		      var nextMarkerTime;
		      if (currentMarkerIndex !== NULL_INDEX) {
		        // check if staying at same marker
		        nextMarkerTime = getNextMarkerTime(currentMarkerIndex);
		        if (currentTime >= setting.markerTip.time(markersList[currentMarkerIndex]) && currentTime < nextMarkerTime) {
		          return;
		        }

		        // check for ending (at the end current time equals player duration)
		        if (currentMarkerIndex === markersList.length - 1 && currentTime === player.duration()) {
		          return;
		        }
		      }

		      // check first marker, no marker is selected
		      if (currentTime < setting.markerTip.time(markersList[0])) {
		        newMarkerIndex = NULL_INDEX;
		      } else {
		        // look for new index
		        for (var i = 0; i < markersList.length; i++) {
		          nextMarkerTime = getNextMarkerTime(i);
		          if (currentTime >= setting.markerTip.time(markersList[i]) && currentTime < nextMarkerTime) {
		            newMarkerIndex = i;
		            break;
		          }
		        }
		      }

					var adjustMarkerTime = function(marker) {
						var obj = {time: marker.reacheTime};
						_logger.log(_prefix, 'adjustMarkerTime marker.reacheTime = ' + marker.reacheTime);
						return obj;
					};
		      // set new marker index
		      if (newMarkerIndex !== currentMarkerIndex) {
		        // trigger event if index is not null
		        if (newMarkerIndex !== NULL_INDEX && options.onMarkerReached) {
		        	// support for postroll
		        	if (Math.abs(player.duration() - setting.markerTip.time(markersList[newMarkerIndex])) < 3) {
		        		player.one('ended', function() {
		  	  	          options.onMarkerReached(adjustMarkerTime(markersList[newMarkerIndex]), newMarkerIndex);
		        		});
		        	}
		        	else {
		  	          options.onMarkerReached(adjustMarkerTime(markersList[newMarkerIndex]), newMarkerIndex);
		        	}
		        }
		        currentMarkerIndex = newMarkerIndex;
		      }
		    }

		    // setup the whole thing
		    function initialize() {
		      if (setting.markerTip.display) {
		        initializeMarkerTip();
		      }

		      // remove existing markers if already initialized
		      //player.markers.removeAll();
		      addMarkers(options.markers);

		      if (setting.breakOverlay.display) {
		        initializeOverlay();
		      }
		      onTimeUpdate();
		      player.on("timeupdate", onTimeUpdate);
		      player.off("loadedmetadata");
		    }

		    if (setting.metadataLoaded || player.duration() > 0) {
		    	setTimeout(function() {
			    	initialize();
		    	}, 0);
		    }
		    else {
			    // setup the plugin after we loaded video's meta data
			    player.on("loadedmetadata", function () {
			      initialize();
			    });
		    }

		    // exposed plugin API
		    player.markers = {
		      allowReplay: function() {
		    	  currentMarkerIndex = NULL_INDEX;
		      },
		      getMarkers: function getMarkers() {
		        for (var i = 0; i < markersList.length; i++) {
							markersList[i].time = markersList[i].reacheTime;
		        }
		        return markersList;
		      },
		      next: function next() {
		        // go to the next marker from current timestamp
		        var currentTime = player.currentTime();
		        for (var i = 0; i < markersList.length; i++) {
		          var markerTime = setting.markerTip.time(markersList[i]);
		          if (markerTime > currentTime) {
		            player.currentTime(markerTime);
		            break;
		          }
		        }
		      },
		      prev: function prev() {
		        // go to previous marker
		        var currentTime = player.currentTime();
		        for (var i = markersList.length - 1; i >= 0; i--) {
		          var markerTime = setting.markerTip.time(markersList[i]);
		          // add a threshold
		          if (markerTime + 0.5 < currentTime) {
		            player.currentTime(markerTime);
		            return;
		          }
		        }
		      },
		      add: function add(newMarkers) {
		        // add new markers given an array of index
		        addMarkers(newMarkers);
		      },
		      remove: function remove(indexArray) {
		        // remove markers given an array of index
		        removeMarkers(indexArray);
		      },
		      removeAll: function removeAll() {
		        var indexArray = [];
		        for (var i = 0; i < markersList.length; i++) {
		          indexArray.push(i);
		        }
		        removeMarkers(indexArray);
		      },
		      updateTime: function updateTime() {
		        // notify the plugin to update the UI for changes in marker times
		        updateMarkers();
		      },
		      reset: function reset(newMarkers) {
		        // remove all the existing markers and add new ones
		        player.markers.removeAll();
		        addMarkers(newMarkers);
		      },
		      destroy: function destroy() {
		        // unregister the plugins and clean up even handlers
		        player.markers.removeAll();
		        if (breakOverlay) {
		        	breakOverlay.remove();
		        }
		        if (markerTip) {
		        	markerTip.remove();
		        }
		        player.off("timeupdate", onTimeUpdate);
		        delete player.markers;
		      }
		    };
		};
		
	    this.init = function (player) {
	    	_player = player;
	    	_vjs.registerPlugin('markers', markers);
	    };
	    
	    this.markers = function(timeMarkers) {
	    	_player.markers(timeMarkers);
	    };
	};

	module.exports = markersHandler;


/***/ }),
/* 3 */
/***/ (function(module, exports) {

	/**
	 * Client Side Logging module.
	 * @module Logging
	 */


	//Note that we have an excessive amount of try/catch blocks in this code. 
	//That is intentional. Logging should never break the features which are using it

	var TRACE_LEVEL_SILENT = 0;
	var TRACE_LEVEL_ALWAYS = 1;
	var TRACE_LEVEL_ERROR = 2;
	var TRACE_LEVEL_WARN = 3;
	var TRACE_LEVEL_INFO = 4;
	var TRACE_LEVEL_LOG = 5;
	var TRACE_LEVEL_DEBUG = 6;
	var TRACE_LEVEL_VERBOSE = 6;

	var LOCAL_STORAGE_KEY_NAME = "AppNexus_Page_Debug_Log_Level";

	//not an actual debug level, but used as a shortcut so we always
	//know what the max debug level is
	var TRACE_LEVEL_ALL = TRACE_LEVEL_DEBUG;
	var TRACE_LEVEL_DEFAULT = TRACE_LEVEL_SILENT;

	//the current debug level to use
	var _curDebugLevel = TRACE_LEVEL_DEFAULT;

	//the debug level that was set via querystring
	var _debugLevelQueryString = TRACE_LEVEL_DEFAULT;

	//the debug level that was set via localStorage
	var _debugLevelLocalStorage = TRACE_LEVEL_DEFAULT;

	//the debug level that was set via call to setDebugLevel
	var _debugLevelFunctionSet = TRACE_LEVEL_DEFAULT;

	function getCurrentTimeString() {
	    var dateToReturn = "";
	    try {
	        var curDate = new Date();
	        //  try{
	        //     dateToReturn = curDate.toISOString();
	        // }catch(ex){
	        dateToReturn = curDate.getHours() + ":" + curDate.getMinutes() + ":" + curDate.getSeconds() + "." + curDate.getMilliseconds();

	        //}
	    } catch (e) {}
	    return dateToReturn;

	}

	function getTraceMethodName(messageLogLevel) {
	    switch (messageLogLevel) {
	        case 0:
	            break;
	        case 1:
	            return 'always';
	        case 2:
	            return 'error';
	        case 3:
	            return 'warn';
	        case 4:
	            return 'info';
	        case 5:
	            return 'log';
	        case 6:
	            return 'debug';
	        case 7:
	            return 'verbose';
	        default:
	            break;
	    }
	}

	function traceMessageAtLevel(messageLogLevel, args) {

	    try {
	        //if method has been defined, and the correct debug level has been set, log it
	        if (typeof messageLogLevel !== 'undefined' && okToLogMessage(messageLogLevel)) {
	            if (console) {
	                var messagePrefix = "[APN";
	                var methodToUse = getTraceMethodName(messageLogLevel);

	                //if console message doesn't exist, use 'log' and
	                //set the original method in the message prefix 
	                if (!console[methodToUse]) {
	                    messagePrefix += "-" + methodToUse;
	                    methodToUse = 'log';
	                }
	                messagePrefix += "]";
	                messagePrefix += "[" + getCurrentTimeString() + "]";

	                args.splice(0, 0, messagePrefix);
	                //from http://tobyho.com/2012/07/27/taking-over-console-log/
	                if (console[methodToUse].apply) {
	                    console[methodToUse].apply(console, args);
	                } else {
	                    var message = Array.prototype.slice.apply(args).join('');
	                    console[methodToUse](message);
	                }
	            }
	        }
	    } catch (e) {}
	}


	//get a named parameter from the querystring
	function getParameterByName(name) {
	    //accesing window might fail at the browser level, we can't really test for it,
	    //so there are a few nested try/catch blocks here
	    try {
	        var urlToSearch = '';
	        //try checking the topmost window, and if not, use current window
	        try {
	            urlToSearch = window.top.location.search;
	        } catch (e) {
	            try {
	                urlToSearch = window.location.search;
	            } catch (e) {}
	        }

	        var regexS = '[\\?&]' + name + '=([^&#]*)';
	        var regex = new RegExp(regexS);
	        var results = regex.exec(urlToSearch);
	        if (results === null) {
	            return '';
	        }
	        return decodeURIComponent(results[1].replace(/\+/g, ' '));
	    } catch (e) {
	        return '';
	    }
	}

	function parseDebugLevelInput(incomingDebugLevel) {
	    var debugLevelToReturn = TRACE_LEVEL_DEFAULT;
	    try {
	        if (typeof incomingDebugLevel !== "undefined") {
	            var debugLevelToParseInt = parseInt(incomingDebugLevel);
	            //if level is an integer, treat it as such
	            if (!isNaN(debugLevelToParseInt)) {
	                debugLevelToReturn = debugLevelToParseInt;
	            } else {
	                if (typeof incomingDebugLevel === "boolean") {
	                    if (incomingDebugLevel) {
	                        debugLevelToReturn = TRACE_LEVEL_ALL;
	                    } else {
	                        debugLevelToReturn = TRACE_LEVEL_SILENT;
	                    }
	                } else {
	                    //not an integer or boolean, treat it as a string
	                    incomingDebugLevel = incomingDebugLevel.toUpperCase();
	                    if (incomingDebugLevel === "TRUE") {
	                        debugLevelToReturn = TRACE_LEVEL_ALL;
	                    } else {
	                        if (incomingDebugLevel === "FALSE") {
	                            debugLevelToReturn = TRACE_LEVEL_SILENT;
	                        }
	                    }
	                }
	            }
	        }
	    } catch (e) {}

	    return debugLevelToReturn;
	}

	function getLogLevelFromLocalStorage() {
	    try {
	        if (localStorage) {
	            return localStorage.getItem(LOCAL_STORAGE_KEY_NAME);
	        }
	    } catch (e) {
	        //default debug level is returned if the key doesn't exist.
	        //https://developer.mozilla.org/en-US/docs/Web/API/Storage/getItem
	        return TRACE_LEVEL_DEFAULT;
	    }
	}

	//determine the maximum debug level from the page URL
	function setDebugLevelFromPage() {
	    try {
	        //keep track of the new level
	        _debugLevelQueryString = parseDebugLevelInput(getParameterByName("ast_debug").toUpperCase());
	        _debugLevelLocalStorage = parseDebugLevelInput(getLogLevelFromLocalStorage());

	        //the highest (least restrictive debug level) always wins
	        _curDebugLevel = Math.max(Math.max(_debugLevelQueryString, _debugLevelLocalStorage), _curDebugLevel);

	    } catch (e) {}
	}

	function handleSetDebugLevel(newDebugLevel) {
	    try {
	        //keep track of the new level
	        _debugLevelFunctionSet = parseDebugLevelInput(newDebugLevel);

	        //the highest (least restrictive debug level) always wins
	        _curDebugLevel = Math.max(Math.max(_debugLevelQueryString, _debugLevelFunctionSet), _curDebugLevel);

	    } catch (e) {}
	}

	function okToLogMessage(level) {
	    return level <= _curDebugLevel; // getReqestedMaxDebugLevel();
	}


	//DEPRECATED
	function tryLogMessageLegacy(level, message, source) {
	    try {
	        var messageToLog = "[APN-" + level + "-" + new Date().toISOString() + "] ";
	        if (source !== null && source && source.length > 0) {
	            messageToLog += source + ">";
	        }
	        messageToLog += message;

	        if (okToLogMessage(level)) {
	            console.log(messageToLog);
	        }
	    } catch (ex) {
	        if (okToLogMessage(level)) {
	            console.log(ex);
	        }
	    }
	}

	module.exports = {


	    /**
	     * Call the appropriate trace method at the given level 
	     * @param (string) debugLevel = Level to debug at
	     */
	    traceAtLevel: function() {
	        try {
	            if (arguments.length > 0) {
	                var targetTraceLevel = arguments[0];
	                var argsWithoutTraceLevel = Array.prototype.slice.call(arguments, 1);
	                traceMessageAtLevel.call(this, targetTraceLevel, argsWithoutTraceLevel);
	            }
	        } catch (e) {}
	    },

	    /**
	     * If the logging level for type "always" or higher is set, output message to browser's console log
	     * With the [APN] prefix and styled with the browser's console "log" level trace style
	     * @see https://developer.mozilla.org/en-US/docs/Web/API/console#Outputting_text_to_the_console
	     * for more details about how to use console.log style logging.
	     */
	    always: function() {
	        try {
	            traceMessageAtLevel.call(this, TRACE_LEVEL_ALWAYS, Array.prototype.slice.call(arguments));
	        } catch (e) {}
	    },


	    /**
	     * If the logging level for type "error" or higher is set, output message to browser's console log
	     * With the [APN] prefix and styled with the browser's console "error" level trace style
	     * @see https://developer.mozilla.org/en-US/docs/Web/API/console#Outputting_text_to_the_console
	     * for more details about how to use console.error style logging.
	     */
	    error: function() {
	        try {
	            traceMessageAtLevel.call(this, TRACE_LEVEL_ERROR, Array.prototype.slice.call(arguments));
	        } catch (e) {}
	    },

	    /**
	     * If the logging level for type "log" or higher is set, output message to browser's console log
	     * With the [APN] prefix and styled with the browser's console "log" level trace style
	     * @see https://developer.mozilla.org/en-US/docs/Web/API/console#Outputting_text_to_the_console
	     * for more details about how to use console.log style logging.
	     */
	    log: function() {
	        try {
	            traceMessageAtLevel.call(this, TRACE_LEVEL_LOG, Array.prototype.slice.call(arguments));
	        } catch (e) {}
	    },

	    /**
	     * If the logging level for type "warn" or higher is set, output message to browser's console log
	     * With the [APN] prefix and styled with the browser's console "warn" level trace style
	     * @see https://developer.mozilla.org/en-US/docs/Web/API/console#Outputting_text_to_the_console
	     * for more details about how to use console.warn style logging.
	     */
	    warn: function() {
	        try {
	            traceMessageAtLevel.call(this, TRACE_LEVEL_WARN, Array.prototype.slice.call(arguments));
	        } catch (e) {}
	    },

	    /**
	     * If the logging level for type "info" or higher is set, output message to browser's console log
	     * With the [APN] prefix and styled with the browser's console "info" level trace style
	     * @see https://developer.mozilla.org/en-US/docs/Web/API/console#Outputting_text_to_the_console
	     * for more details about how to use console.info style logging.
	     */
	    info: function() {
	        try {
	            traceMessageAtLevel.call(this, TRACE_LEVEL_INFO, Array.prototype.slice.call(arguments));
	        } catch (e) {}
	    },

	    /**
	     * If the logging level for type "debug" or higher is set, output message to browser's console log
	     * With the [APN] prefix and styled with the browser's console "debug" level trace style
	     * @see https://developer.mozilla.org/en-US/docs/Web/API/console#Outputting_text_to_the_console
	     * for more details about how to use console.debug style logging.
	     */
	    debug: function() {
	        try {
	            traceMessageAtLevel.call(this, TRACE_LEVEL_DEBUG, Array.prototype.slice.call(arguments));
	        } catch (e) {}
	    },

	    /**
	     * If the logging level for type "verbose" or higher is set, output message to browser's console log
	     * With the [APN] prefix and styled with the browser's console "debug" level trace style
	     * @see https://developer.mozilla.org/en-US/docs/Web/API/console#Outputting_text_to_the_console
	     * for more details about how to use console.debug style logging.
	     */
	    verbose: function() {
	        try {
	            traceMessageAtLevel.call(this, TRACE_LEVEL_VERBOSE, Array.prototype.slice.call(arguments));
	        } catch (e) {}
	    },

	    /**
	     * @deprecated - use other logging methods in this library
	     * Writes an entry to the console log if the current debug level is set to "Error", "Warn" or Debug"
	     * @param (string) message = text to be written to the log
	     * @param (string) source = optional string which identifies the source of the debug statement
	     *      - if present, then it will be prepended to front of the string
	     *      - example 1:  debug("hello") ==> <timestamp> hello
	     *      - example 2:  debug("hello", "TM") ==> <timestamp> TM>hello
	     */
	    handleLogDebugLegacySupport: function(message, source) {
	        /*
	        var mainArguments = Array.prototype.slice.call(arguments);
	        mainArguments.unshift("DEBUG");
	        */
	        try {
	            tryLogMessageLegacy(TRACE_LEVEL_LOG, message, source);
	        } catch (e) {}
	    },

	    /**
	     * Sets debug level for logger
	     * @param (string) level = Debug level to use
	     */
	    setDebugLevel: function(newLevel) {
	        try {
	            handleSetDebugLevel(newLevel);
	        } catch (e) {}
	    },


	    /**
	     * Checks if specified trace level will be emitted given the current trace level settings.
	     * @param (Number) levelToCheck = Debug level to check
	     */
	    isTraceLevelActive: function(levelToCheck) {
	        try {
	            return okToLogMessage(levelToCheck);
	        } catch (e) {
	            return false;
	        }
	    },

	    /** @constant {number} */
	    TRACE_LEVEL_ALWAYS: TRACE_LEVEL_ALWAYS,

	    /** @constant {number} */
	    TRACE_LEVEL_ERROR: TRACE_LEVEL_ERROR,

	    /** @constant {number} */
	    TRACE_LEVEL_WARN: TRACE_LEVEL_WARN,

	    /** @constant {number} */
	    TRACE_LEVEL_INFO: TRACE_LEVEL_INFO,

	    /** @constant {number} */
	    TRACE_LEVEL_LOG: TRACE_LEVEL_LOG,

	    /** @constant {number} */
	    TRACE_LEVEL_DEBUG: TRACE_LEVEL_DEBUG,

	    /** @constant {number} */
	    TRACE_LEVEL_VERBOSE: TRACE_LEVEL_VERBOSE
	};


	//look in the query string for debug level
	setDebugLevelFromPage();


/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

	//var _molPlugin = require("!raw!@appnexus/videoads-vast-vpaid-plugin");
	var _vastParser = __webpack_require__(5);
	var _utils = __webpack_require__(16);

	var _logger = __webpack_require__(3);
	var _prefix = 'apnVmapVast->breakManager';

	var breakManager = function (adBreakData, vjsPlayer, options, notificationCallback) {
		var _notifCallback = notificationCallback;
		var _options = options;
		var _player = vjsPlayer;
		var _defaultAdCancelTimeout = 3000;	
		var _breakData = adBreakData;
		var _currenrAdBreakXmlData;
		var _adIdx = -1;
		var _breakStarted = false;
		var _adStarted = false;
		var _breakDuration;
		var _timeOffset;
		
		var _currentAdSequence;
		var _currentAdSequenceIdx;
		var _currentAdSequencePlaying;
		var _ignoreEvents = false;
		var _errorHappened = false;
		
		var _mainSource;
		
		var _cover = document.getElementById('apn-break-cover');
		var _spinnerDiv = document.getElementById('apn-break-spinner');
		var _showSpinner = false;
		var _adIndicator = document.getElementById('apn-ad-indicator');
		
		// initialize break graphics 
		if (!_cover) {
			_cover = document.createElement('div');
			_cover.id = 'apn-break-cover';
			_cover.style.width = '100%';
			_cover.style.height = '100%';
			_cover.style.backgroundColor = 'black';
			_cover.style.position = 'absolute';
			_player.el().appendChild(_cover);
		}
		_cover.style.display = 'none';
		if (!_spinnerDiv) {
			_spinnerDiv = document.createElement('div');
			_spinnerDiv.id = 'apn-break-spinner';
			_spinnerDiv.className = 'vjs-loading-spinner';
			_spinnerDiv.style.display = 'none';
			_player.el().appendChild(_spinnerDiv);
		}
		if (!_adIndicator) {
			_adIndicator = document.createElement('p');	
			_adIndicator.id = 'apn-ad-indicator';
			_adIndicator.className = 'vjs-overlay';
			_adIndicator.style.display = 'none';
			_adIndicator.style.left = '10px';
			_player.el().appendChild(_adIndicator);
		}
		_adIndicator.innerHTML = "";
		
		function showCover(show) {
			_logger.log(_prefix, (show ? "Show" : "Hide") + " ad cover with spinner");
			if (show) {
	    		_cover.style.display = 'block';
	    		_showSpinner = true;
	    		setTimeout(function() {
	    			if (_showSpinner && _player.bigPlayButton.el_.style.display !== 'block') {
	    	    		_spinnerDiv.style.display = 'block';
	    			}
	    		}, 1000);
	    		//_player.el().classList.add('vjs-ad-playing', 'vjs-vast-ad-loading', 'vjs-waiting');
	    		_player.el().classList.add('vjs-waiting');
			}
			else {
	    		_spinnerDiv.style.display = 'none';
	    		_showSpinner = false;
	    		_cover.style.display = 'none';
	    		//_player.el().classList.remove('vjs-ad-playing', 'vjs-vast-ad-loading', 'vjs-waiting');
	    		_player.el().classList.remove('vjs-waiting');
			}
		}
		
		function substituteErrorInfo(urls, obj) {
			for (var i = 0; i < urls.length; i++) {
				urls[i] = urls[i].replace('[ERROR_CODE]', obj.errorCode);
				urls[i] = urls[i].replace('[ERROR_MESSAGE]', obj.message);
			}
		}
		
		function getTrackingUrls(eventName) {
			var urls = null;
			if (_breakData.trackings && _breakData.trackings.length > 0) {
				for (var i = 0; i < _breakData.trackings.length; i++) {
					if (_breakData.trackings[i].event === eventName) {
						urls = _breakData.trackings[i].uris;
						break;
					}
				}
			}
			return urls;
		}
		
		function trackEvent(eventName, obj) {
			var urls = getTrackingUrls(eventName);
			if (urls && urls.length > 0) {
				if (eventName === 'error') {
					substituteErrorInfo(urls, obj);
				}
				_utils.trackUrls(urls);
			}
		}
		
		function traceMessage(event) {
			_logger.log(_prefix, 'trace event message: ' + event.data.message);
			if (_options.pageNotificationCallback) {
				_options.pageNotificationCallback('message', event.data.message);
			}
		}
		
		function traceEvent(event) {
			_logger.log(_prefix, 'trace event: ' + event.data.event);
			if (_options.pageNotificationCallback) {
				_options.pageNotificationCallback('event', event.data.event);
			}
		}
		
		_player.on('trace.message', traceMessage);
		_player.on('trace.event', traceEvent);

		_player.on('vast.adStart', function() {
			if (_ignoreEvents || _adStarted) {
				return;
			}
			_adIndicator.style.display = 'block';
			_notifCallback(_breakData.breakId, {name: 'BreakAdStarted', data: {adSequence: _currentAdSequence, adId: _currenrAdBreakXmlData.adId}});
			_logger.log(_prefix, "Sequence: " + _currentAdSequence + ", adId: " + _currenrAdBreakXmlData.vastSeqData[_currentAdSequenceIdx].adId + 
					", step in sequence = " + (_currentAdSequenceIdx + 1));
			showCover(false);
			_breakStarted = true;
			_adStarted = true;
			_currentAdSequencePlaying = true;
			_player.trigger({type: 'trace.message', data: {message: 'Ad successfully started'}});
			_options.playerSettings.autostart = true;
		});
		
		_player.on('vast.adError', function(e) {
			if (_ignoreEvents) {
				return;
			}
			_errorHappened = true;
			if (!e.error) {
				e.error = {
					code: 'Unknown',
					message: ''
				};
			}
			_notifCallback(_breakData.breakId, {name: 'BreakAdError', 
				data: {adSequence: _currentAdSequence, adId: _currenrAdBreakXmlData.adId, errorCode: e.error.code, message: e.error.message}});
			_logger.log(_prefix, "Sequence: " + _currentAdSequence + ", adId: " + _currenrAdBreakXmlData.vastSeqData[_currentAdSequenceIdx].adId + 
					", step in sequence = " + (_currentAdSequenceIdx + 1));
			_player.trigger({type: 'trace.message', data: {message: 'Ad failed. error code - ' + e.error.code + '. error message - ' + e.error.message}});
		});
		
		_player.on('vast.adsCancel', function() {
		});
		
		_player.on('vast.adSkip', function() {
			if (_ignoreEvents) {
				return;
			}
			_notifCallback(_breakData.breakId, {name: 'BreakAdSkipped', data: {adSequence: _currentAdSequence, adId: _currenrAdBreakXmlData.adId}});
			_logger.log(_prefix, "Sequence: " + _currentAdSequence + ", adId: " + _currenrAdBreakXmlData.vastSeqData[_currentAdSequenceIdx].adId + 
					", step in sequence = " + (_currentAdSequenceIdx + 1));
			_player.trigger({type: 'trace.message', data: {message: 'Ad skipped'}});
		});
		
		_player.on('vast.reset', function () {
		});
		
		_player.on('vast.contentEnd', function () {
			if (_ignoreEvents) {
				return;
			}
			_notifCallback(_breakData.breakId, {name: 'BreakAdComplete', data: {adSequence: _currentAdSequence, adId: _currenrAdBreakXmlData.adId}});
			_logger.log(_prefix, "Sequence: " + _currentAdSequence + ", adId: " + _currenrAdBreakXmlData.vastSeqData[_currentAdSequenceIdx].adId + 
					", step in sequence = " + (_currentAdSequenceIdx + 1));
			_player.trigger({type: 'trace.message', data: {message: 'Ad content complete'}});
		});

		_player.on('adFinished', function () {
			_notifCallback(_breakData.breakId, {name: 'BreakAdStopped', data: {adSequence: _currentAdSequence, adId: _currenrAdBreakXmlData.adId}});
			_logger.log(_prefix, "Sequence: " + _currentAdSequence + ", adId: " + _currenrAdBreakXmlData.vastSeqData[_currentAdSequenceIdx].adId + 
					", step in sequence = " + (_currentAdSequenceIdx + 1));
			_ignoreEvents = true;
			_player.trigger({type: 'trace.message', data: {message: (_errorHappened ? '*** AD TERMINATED' : '*** AD FINISHED')}});
			_options.playerSettings.muted = _player.muted();
			prepareNextAd();
		});

		var playAd = function(xml) {
			//_player.pause();
			var clientParams = {
	      	  		// VAST xml
	      	  		adTagXML: function(callback) { 
	      	  			setTimeout(function() {
	      	  				callback(null, xml);
	      	  			}, 0);
	      	  		},
	      	  		playAdAlways: false,
	      	  		//Note: As requested we set the preroll timeout at the same place than the adsCancelTimeout
	      	  		adCancelTimeout: (_options && _options.timeouts && _options.timeouts.adStartTimeout) ? _options.timeouts.adStartTimeout : _defaultAdCancelTimeout,
	      	  		adsEnabled: true,
	      	  		verbosity: 4,
	      	  		playsInBreak: true,
	      	  		breakDuration: parseInt(_breakDuration),
	      	  		timeOffset: parseInt(_timeOffset),
	      	  		initialPlayback: (_options.playerSettings.autostart ? 'auto' : 'click'),
	      	  		initialAudio: (_options.playerSettings.muted ? 'off' : 'on')
	            };
			if (_options && _options.skippable && _options.skippable.hasOwnProperty('enabled') && !_options.skippable.enabled) {
				clientParams.disableSkippability = true;
			}
			if (_options && _options.skippable && _options.skippable.skipText) {
				clientParams.skipText = _options.skippable.skipText;
			}
			if (_options && _options.skippable && _options.skippable.skipButtonText) {
				clientParams.skipButtonText = _options.skippable.skipButtonText;
			}
			if (_options && _options.clickThruEnabled === false) {
				clientParams.disableClickThru = true;
			}
			if (_options && _options.wrapperLimit &&  _options.wrapperLimit > 0) {
				clientParams.wrapperLimit = _options.wrapperLimit;
			}
			
			_ignoreEvents = false;
			//_errorHappened = false;
			_adStarted = false;
			_player.trigger({type: 'trace.message', data: {message: '*** AD STARTING Creative ' + _currenrAdBreakXmlData.vastSeqData[_currentAdSequenceIdx].adId +
				' (SLOT: ' + _currentAdSequence + ', waterfall step# ' + (_currentAdSequenceIdx + 1) + ')'}});
	  	  	_player.vastClient(clientParams);
	  	  	
	  	  	if (clientParams.initialPlayback !== 'click') {
	      	  	setTimeout(function() {
	      	  		//_player.trigger('vast.firstPlay');
	      	  		//_player.currentSource(_mainSource);
	      	  		if (_errorHappened) {
	      	  			_errorHappened = false;
	      	  			_player.trigger('vast.firstPlay');
	      	  		}
	      	  		else {
	      	  			//_player.play(); 
	      	  			_player.trigger('vast.firstPlay');
	      	  		}
	      	  		//_player.trigger('break.playAd');
	      	  	}, 0);
	  	  	}
	  	  	
	  	  	//_adIndicator.style.display = 'block';
		};
		
		function prepareNextAd() {
			showCover(true);
	    	var adBreakXmlData = getNextAdXml();
	    	if (adBreakXmlData) {
	    		if (!adBreakXmlData.sequence) {
	    			_currentAdSequence++;
	    		}
	    		else {
	    			_currentAdSequence = adBreakXmlData.sequence;
	    		}
	    		if (_currentAdSequenceIdx === 0) {
	    			// new sequence
	        		_timeOffset += _currenrAdBreakXmlData.duration;
	        		_adIdx++;
	    		}
	    		_currenrAdBreakXmlData = adBreakXmlData;
	    		_adIndicator.innerHTML = 'Ad ' + _adIdx + ' of ' + _breakData.vastXmls.length;
	    		playAd(_currenrAdBreakXmlData.vastSeqData[_currentAdSequenceIdx].vastXml);
	    	}
	    	else {
	    		_adIndicator.style.display = 'none';
	    		showCover(false);
	    		_adIdx = -1;
	    		_player.off('vast.adStart');
	    		_player.off('vast.adError');
	    		_player.off('vast.adsCancel');
	    		_player.off('vast.adSkip');
	    		_player.off('vast.reset');
	    		_player.off('vast.contentEnd');
	    		_player.off('adFinished');
	    		
	    		_player.off('trace.message', traceMessage);
	    		_player.off('trace.event', traceEvent);
	    		
	    		_notifCallback(_breakData.breakId, {name: 'BreakComplete'});
	    		if (!_breakStarted) {
	    			trackEvent('error', {code: 900, message: 'All Ads in the break failed'});
	    		}
	    		else {
	    			trackEvent('breakEnd');
	    		}
	    	}
		}
		
		function getNextAdXml() {
			if (_breakData.vastXmls && _breakData.vastXmls.length > 0) {
				if (!_currentAdSequence) {
					return _breakData.vastXmls[0];
				}
				if (!_currentAdSequencePlaying) {
					// try to get next ad for waterfall
					if (_currentAdSequenceIdx < _currenrAdBreakXmlData.vastSeqData.length - 1) {
						_currentAdSequenceIdx++;
						return _currenrAdBreakXmlData;
					}
				}
				_currentAdSequencePlaying = false;
				_currentAdSequenceIdx = 0;
				for (var i = 0; i < _breakData.vastXmls.length; i++) {
					if (_breakData.vastXmls[i].sequence > _currentAdSequence) {
						return _breakData.vastXmls[i];
					}
				}
			}
			return null;
		}
		
		function getVastXmls() {
			_breakDuration = 0;
			_breakData.vastXmls = [];
			var vastSeqData = [];
			if (_breakData.adSource && _breakData.adSource.vastData) {
				for (var sequence in _breakData.adSource.vastData) {
					if (_breakData.adSource.vastData[sequence].length > 0) {
						vastSeqData = [];
						var seqDuration = 0;
						for (var i = 0; i < _breakData.adSource.vastData[sequence].length; i++) {
							// prepare unwrapped VAST xml
							var vastData = _breakData.adSource.vastData[sequence][i];
							var adId = vastData.adId;
							var vastXml = _vastParser.getUnwrappedVastTag(vastData, null, null, null, null, null, null);
							if (!vastXml) {
								_logger.warn(_prefix, "Failed to get unwrapped xml from internal vast object");
							}
							else {
								vastSeqData.push({vastXml: vastXml, adId: adId, duration: vastData.durationMsecs / 1000.0});
								seqDuration = Math.max(vastData.durationMsecs, seqDuration);
							}
						}
						if (vastSeqData.length > 0) {
							_breakDuration += seqDuration;
							_breakData.vastXmls.push({sequence: parseInt(sequence), vastSeqData: vastSeqData, duration: seqDuration / 1000.0});
						}
					}
				}
				_breakDuration /= 1000.0;	// msecs to secs
				if (_breakData.vastXmls.length > 0) {
					_breakData.vastXmls.sort(function(a, b) {
						return a.sequence - b.sequence;
					});
				}
			}
			else if (_breakData.xml && _breakData.xml.length > 0) {
				vastSeqData.push({vastXml: _breakData.xml, adId: '<unknown>', duration: 0});
				_breakData.vastXmls.push({sequence: 1, vastSeqData: vastSeqData, duration: 0});
			}
		}
		
		getVastXmls();
		
	    this.start = function () {
	    	_timeOffset = 0;
	    	var adBreakXmlData = getNextAdXml();
	    	if (adBreakXmlData) {
	    		_mainSource = _player.currentSource();
	    		if (!adBreakXmlData.sequence) {
	    			_currentAdSequence = 1;
	    		}
	    		else {
	    			_currentAdSequence = adBreakXmlData.sequence;
	    		}
	    		_currentAdSequenceIdx = 0;
	    		_currentAdSequencePlaying = false;
	    		_currenrAdBreakXmlData = adBreakXmlData;
	    		_adIdx = 1;
	    		_adIndicator.innerHTML = 'Ad 1 of ' + _breakData.vastXmls.length;
	    		//_adIndicator.style.display = 'block';
	    		showCover(true);
	    		_notifCallback(_breakData.breakId, {name: 'BreakStarted'});
	    		trackEvent('breakStart');
	    		playAd(_currenrAdBreakXmlData.vastSeqData[_currentAdSequenceIdx].vastXml);
	    	}
	    	else {
	    		trackEvent('error', {code: 900, message: 'No Ads in the break'});
	    		_notifCallback(_breakData.breakId, {name: 'BreakError', data: {errorCode: 900, message: 'No available AD VAST XML for ad break'}});
	    	}
	    };
		
	    this.stop = function () {
	    	_breakData.vastXmls = [];
	    	if (_adIdx >= 0) {
	    		_player.trigger('vast.adsCancel');
	    	}
	    };

	};

	module.exports = breakManager;


/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * VAST Parser module.
	 * @module VastParser
	 */

	var VastXMLParserHelper = __webpack_require__(6);

	var APN_CompanionAds = __webpack_require__(7);
	var APN_Icons = __webpack_require__(8);

	var uaParser = __webpack_require__(9);
	var ua = uaParser();

	var VastParser = function (id, nMsecTimeout, options) {

	    var _logger = __webpack_require__(3);
	    var _prefix = 'VAST Parser';

	    var _callback = null;
	    var _options = options;
	    var _wrapperLimit = _options && _options.wrapperLimit && _options.wrapperLimit > 0 ? _options.wrapperLimit : 5;
	    var _curWrapperLevel = 0;
	    var _sourceVastXml = null;
	    var _id = id;
	    var _nTimeOut = nMsecTimeout && nMsecTimeout > 0 ? nMsecTimeout : 1000;	// 1 second default
	    var _arrMediaFiles = [],
	    	_mezzanine = null,
	    	_arrInteractiveCreatives = [],
	        _arrTrackings = {},
	        _arrImpressions = [],
	        _arrClickUrls = [],
	        _arrClickTrackings = [],
	        _arrErrorUrls = [],
	        _arrInternalErrorUrls = [],
	        _sExtensions = '',
	        _adParameters = '',
	        _nMsecDuration = 0,
	        _strSkipOffset = '';
	    
	    var _errors303 = null;
	    var _arrError303Urls = [];

	    var _arrTrackingsMerge = {},
	        _arrImpressionsMerge = [],
	        _arrClickUrlsMerge = [],
	        _arrClickTrackingsMerge = [],
	        _arrErrorUrlsMerge = [],
	    	_arrViewableImpressionsMerge = {viewable: [], notViewable: [], undetermined: []};

	    var _helper = new VastXMLParserHelper();
	    var _startTime = null;
	    var _withWrapper = false;
	    var _vastVersion = '';
	    var _conditionalAd = false;
	    var _fallbackOnNoAd;

	    var _adTree = [];
	    var _currTreeIdx = -1;

	    var _terminated = false;

	    var _capabilityDetection = __webpack_require__(10);

	    var _waterfall = false;
	    var _vastObjects = [];
	    var _topLevel = false;
	    var _notifyurls = {};
	    var _curNotifyUrl = '';
	    var _buyerMemberIds = {};
	    var _curBuyerMemberId = '';
	    var _viewabilityConfigs = {};
	    var _curViewabilityConfig = '';
	    var _creativeIds = {};
	    var _curCreativeId = '';

	    var _csmCount = 0;
	    var _rtbCount = 0;
	    
	    var _vmap = options.vmap;

	    var _finalVastUri = '';//VIDLA-2240 to keep final VAST URI

	    _logger.always(_prefix, 'Version 3.1.17');

	    function getVASTVersion(vastNode) {
	        var version = 'unknown';
	        if (vastNode) {
	            version = _helper.getNodeAttributeValue(vastNode, 'version');
	            version = version.trim();
	            if (version.length > 3) {
	                version = version.substr(0, 3);
	            }
	        }
	        return version;
	    }

	    function substituteErrorCode(arrErrorUrls, errorCode) {
	        if (arrErrorUrls && arrErrorUrls.length > 0) {
	            for (var i = 0; i < arrErrorUrls.length; i++) {
	                arrErrorUrls[i] = arrErrorUrls[i].replace('[ERRORCODE]', errorCode);
	            }
	        }
	    }

	    function traceTreePath(idx, message) {
	        var curIdx = idx;
	        var text = 'AD DETECTED=' + (message.substr(0, 7) === 'SUCCESS' ? 'SUCCESS' : 'NONE') + ' :: Reason=' + message +
	            ', playerTechnology=' + (_options.hasOwnProperty('playerTechnology') ? JSON.stringify(_options.playerTechnology) : 'unknown') +
	            ', platform=' + _capabilityDetection.getPlatformType() + ', Ad tree path=';
	        var tree = '';
	        while (curIdx !== -1) {
	            var ad = _adTree[curIdx].children[0];
	            if (ad) {
	                var val = _helper.getNodeAttributeValue(ad, 'id');
	                if (tree.length > 0) {
	                    tree = ' -> ' + tree;
	                }
	                tree = val + tree;
	            }
	            curIdx = _adTree[curIdx].parentIdx;
	        }
	        _logger.info(_prefix, text + tree);
	    }

	    function processWrapper(parentNode) {
	        var node = _helper.getSubNode(parentNode, 'VASTAdTagURI');
	        if (!node) {
	            traceTreePath(_currTreeIdx, 'INVALID WRAPPER NODE');
	            if (_adTree.length === 0) {
	                reportError('300', 'invalid wrapper node');
	            }
	            else {
	                processNextAd();
	            }
	            return;
	        }
	        var url = _helper.getNodeValues(node);
	        if (!url || url.length === 0) {
	            traceTreePath(_currTreeIdx, 'EMPTY VASTAdTagURI');
	            if (_adTree.length === 0) {
	                reportError('300', 'Invalid VASTAdTagURI node value');
	            }
	            else {
	                processNextAd();
	            }
	            return;
	        }

	        if (_terminated) {
	            traceTreePath(_currTreeIdx, 'terminated');
	            _callback(false, _id, 'terminated', null, _curNotifyUrl);		// terminated
	            return;
	        }

	        _withWrapper = true;
	        
	        if (_vastVersion >= '4.0') {
	        	var val = _helper.getNodeAttributeBooleanValue(parentNode, 'followAdditionalWrappers', true);
	        	_adTree[_currTreeIdx].state.followAdditionalWrappers = val;
	        	
	        	val = _helper.getNodeAttributeBooleanValue(parentNode, 'allowMultipleAds', false);
	        	_adTree[_currTreeIdx].state.allowMultipleAds = val;
	        	
	        	val = _helper.getNodeAttributeValue(parentNode, 'fallbackOnNoAd');
	        	if (val !== '') {
	        		_fallbackOnNoAd = _helper.getNodeAttributeBooleanValue(parentNode, 'fallbackOnNoAd');
	        	}
	        }

	        //keep final URI for VIDLA-2240
	        _finalVastUri = url;

	        var UrlLoader = __webpack_require__(11);
	        UrlLoader.load(url,
	            function (error, responseText) {
	                if (_terminated) {
	                    traceTreePath(_currTreeIdx, 'terminated');
	                    _callback(false, _id, 'terminated', null, _curNotifyUrl);		// terminated
	                    return;
	                }
	                if (error || responseText.length === 0) {
	                    traceTreePath(_currTreeIdx, 'VASTAdTagURI TIMED OUT: ' + url);
	                    if (_adTree.length === 0) {
	                        reportError('301', 'Timeout of VAST URI provided in wrapper element');
	                    }
	                    else {
	                        processNextAd();
	                    }
	                }
	                else {
	                    _topLevel = false;
	                    parseXML(responseText);
	                }
	            }, _options.adServerTimeout ? _options.adServerTimeout : _nTimeOut);
	    }

	    function isInArray(arr, value) {
	        for (var i = 0; i < arr.length; i++) {
	            if (arr[i] === value) {
	                return true;
	            }
	        }
	        return false;
	    }

	    function addErrorUrls(parentNode, arrErrorUrls) {
	        if (parentNode) {
	            var nodes = _helper.getSubNodes(parentNode, 'Error');
	            if (nodes) {
	                for (var i = 0; i < nodes.length; i++) {
	                    var node = nodes[i];
	                    var url = _helper.getNodeValues(node);
	                    if (url && !isInArray(arrErrorUrls, url)) {
	                        arrErrorUrls.push(url);
	                    }
	                }
	            }
	        }
	    }

	    function addImpressions(parentNode, arrImpressions) {
	        if (parentNode) {
	            var nodes = _helper.getSubNodes(parentNode, 'Impression');
	            if (nodes) {
	                for (var i = 0; i < nodes.length; i++) {
	                    var node = nodes[i];
	                    var url = _helper.getNodeValues(node);
	                    if (url && !isInArray(arrImpressions, url)) {
	                        arrImpressions.push(url);
	                    }
	                }
	            }
	        }
	    }

	    function addTrackings(parentNode, arrTrackings) {
	        //var _nMsecDuration;
	        if (parentNode) {
	            var linear = _helper.getSubNode(parentNode, 'Linear', 0);
	            if (linear) {

	                //comment out by VIDLA-163
	                //var duration_node = _helper.getSubNode(linear, 'Duration');
	                //if (duration_node) {
	                //var str = _helper.getNodeValue(duration_node);
	                //_nMsecDuration = getMsecTime(str, -1);
	                //}


	                var node = _helper.getSubNode(linear, 'TrackingEvents');
	                if (node) {
	                    var nodes = _helper.getSubNodes(node, 'Tracking');
	                    if (nodes) {
	                        for (var i = 0; i < nodes.length; i++) {
	                            node = nodes[i];
	                            var url = _helper.getNodeValues(node);
	                            if (url) {


	                                var event = _helper.getNodeAttributeValue(node, 'event');

	                                //VIDLA-422 progress event also can be multiple in wrapper case
	                                if (event === 'progress') {
	                                    var offset = _helper.getNodeAttributeValue(node, 'offset');
	                                    if (offset) {
	                                        //event = 'progress_' + getMsecTime(offset,_nMsecDuration);
	                                        event = 'progress_' + offset;
	                                    } else {
	                                        event = '';
	                                    }
	                                }
	                                if (event) {
	                                    if (arrTrackings.hasOwnProperty(event)) {
	                                        if (!isInArray(arrTrackings[event], url)) {
	                                            arrTrackings[event].push(url);
	                                        }
	                                    }
	                                    else {
	                                        arrTrackings[event] = [];
	                                        arrTrackings[event].push(url);
	                                    }
	                                }
	                            }
	                        }
	                    }
	                }
	            }
	        }
	    }

	    function addExtensions(parentNode, treeIdx) {
	        if (parentNode) {
	            var node = _helper.getSubNode(parentNode, 'Extensions');
	            if (node && node.innerHTML && node.innerHTML.length > 0) {
	                _adTree[treeIdx].state.sExtensions = _adTree[treeIdx].state.sExtensions + node.innerHTML.toString();
	            }
	            else if (node && node.textContent && node.textContent.length > 0) {
	                _adTree[treeIdx].state.sExtensions = _adTree[treeIdx].state.sExtensions + node.textContent.toString();
	            }
	        }
	    }

	    function addCompanions(parentNode, treeIdx) {
	        if (parentNode) {
	            var node = _helper.getSubNode(parentNode, 'CompanionAds');
	            if (node &&
	                ((node.innerHTML && node.innerHTML.length > 0) ||
	                (node.textContent && node.textContent.length > 0))) {
	                APN_CompanionAds.parse(_adTree[treeIdx].state.companions, node, _helper);
	            }
	        }
	    }

	    function addIcons(parentNode, treeIdx) {
	        if (parentNode) {
	            var node = _helper.getSubNode(parentNode, 'Icons');
	            if (node &&
	                ((node.innerHTML && node.innerHTML.length > 0) ||
	                (node.textContent && node.textContent.length > 0))) {
	                APN_Icons.parse(_adTree[treeIdx].state.icons, node, _helper);
	            }
	        }
	    }

	    function addClickUrls(parentNode, arrClickUrls, arrClickTrackings) {
	        if (parentNode) {
	            var linear = _helper.getSubNode(parentNode, 'Linear', 0);
	            if (linear) {
	                var url = null;
	                var parentNode2 = _helper.getSubNode(linear, 'VideoClicks');
	                if (parentNode2) {
	                    var node = _helper.getSubNode(parentNode2, 'ClickThrough');
	                    if (node) {
	                        url = _helper.getNodeValues(node);
	                        if (url && !isInArray(arrClickUrls, url)) {
	                            arrClickUrls.push(url);
	                        }
	                    }
	                    var nodes = _helper.getSubNodes(parentNode2, 'ClickTracking');
	                    if (nodes) {
	                        for (var i = 0; i < nodes.length; i++) {
	                            node = nodes[i];
	                            url = _helper.getNodeValues(node);
	                            if (url && !isInArray(arrClickTrackings, url)) {
	                                arrClickTrackings.push(url);
	                            }
	                        }
	                    }
	                }
	            }
	        }
	    }

	    function addViewableImpression(parentNode, arrViewableImpression) {
	        if (parentNode) {
	            var viewImps = _helper.getSubNode(parentNode, 'ViewableImpression', 0);
	            if (viewImps) {
	                var url = null;
	                var node = null;
	                var i;
	                var subNodes = _helper.getSubNodes(viewImps, 'Viewable');
	                if (subNodes && subNodes.length > 0) {
	                    for (i = 0; i < subNodes.length; i++) {
	                        node = subNodes[i];
	                        url = _helper.getNodeValues(node);
	                        if (url && !isInArray(arrViewableImpression.viewable, url)) {
	                        	arrViewableImpression.viewable.push(url);
	                        }
	                    }
	                }
	                subNodes = _helper.getSubNodes(viewImps, 'NotViewable');
	                if (subNodes && subNodes.length > 0) {
	                    for (i = 0; i < subNodes.length; i++) {
	                        node = subNodes[i];
	                        url = _helper.getNodeValues(node);
	                        if (url && !isInArray(arrViewableImpression.notViewable, url)) {
	                        	arrViewableImpression.notViewable.push(url);
	                        }
	                    }
	                }
	                subNodes = _helper.getSubNodes(viewImps, 'ViewUndetermined');
	                if (subNodes && subNodes.length > 0) {
	                    for (i = 0; i < subNodes.length; i++) {
	                        node = subNodes[i];
	                        url = _helper.getNodeValues(node);
	                        if (url && !isInArray(arrViewableImpression.undetermined, url)) {
	                        	arrViewableImpression.undetermined.push(url);
	                        }
	                    }
	                }
	            }
	        }
	    }

	    function getMsecTime(strTime, duration) {
	        var nPos = strTime.indexOf('%');
	        if (nPos > 0) {
	            if (duration && duration > 0) {
	                return Number(strTime.substring(0, nPos));
	            }
	            else {
	                return 0;
	            }
	        } else {
	            nPos = strTime.indexOf('.');
	            var msecs = nPos > 0 ? Number(strTime.substring(nPos + 1)) : 0;
	            if (nPos > 0) {
	                strTime = strTime.substring(0, nPos);
	            }
	            var arr = strTime.split(':');
	            if (arr.length === 3) {
	                return (Number(arr[0]) * 3600 + Number(arr[1]) * 60 + Number(arr[2])) * 1000 + msecs;
	            }
	            else {
	                return 0;
	            }
	        }
	    }

	    function isCapable(type, codec) {
	        return _capabilityDetection.canPlay(type, codec);
	    }

	    function isFlashOnlyType(type) {
	        return type === 'video/x-flv' || type === 'video/x-f4v' || type === 'video/f4v' ||
	            type === 'application/x-shockwave-flash';
	    }

	    function isHtml5OnlyType(type) {
	        return type === 'video/webm' || type === 'video/ogg' || type === 'application/javascript' ||
	            type === 'application/x-javascript';
	    }

	    function isVpaidType(type) {
	        return type === 'application/x-shockwave-flash' || type === 'application/javascript' ||
	            type === 'application/x-javascript';
	    }

	    function isOptionsValidated(type) {
	        if (_options.playerTechnology && Array.isArray(_options.playerTechnology) && _options.playerTechnology.length > 0) {
	            var supported = false;
	            for (var i = 0; i < _options.playerTechnology.length; i++) {
	                var tech = _options.playerTechnology[i].toLowerCase();
	                if (!isFlashOnlyType(type.toLowerCase()) && !isHtml5OnlyType(type.toLowerCase())) {
	                    supported = true;
	                    break;
	                }
	                if (tech === 'flash' && !isHtml5OnlyType(type.toLowerCase())) {
	                    supported = true;
	                    break;
	                }
	                if (tech === 'html5' && !isFlashOnlyType(type.toLowerCase())) {
	                    supported = true;
	                    break;
	                }
	            }
	            if (!supported) {
	                return false;
	            }
	        }
	        if (_options.hasOwnProperty('supportVpaid') && !_options.supportVpaid) {
	            if (isVpaidType(type.toLowerCase())) {
	                return false;
	            }
	        }
	        return true;
	    }

	    function configureMediaRendition(node, url, num, mediaTypes) {
	        var rendition = null;
	        if (node) {
	            rendition = {};
	            rendition.type = _helper.getNodeAttributeValue(node, 'type');
	            if (mediaTypes.indexOf(rendition.type) === -1) {
	                mediaTypes.push(rendition.type);
	            }
	            // check capability
	            if (!rendition.type || rendition.type.length === 0) {
	                return null;
	            }
	            var codec = _helper.getNodeAttributeValue(node, 'codec');
	            if (codec && codec.length > 0) {
	            	codec = codec.trim();
	            	codec = codec.length > 2 ? codec : '';	// protection against bad data such as '0'
	            	if (codec.length > 0) {
	                    rendition.codec = codec;
	            	}
	            }
	            if (!isCapable(rendition.type, codec)) {
	                return null;
	            }
	            if (_options) {
	                if (!isOptionsValidated(rendition.type)) {
	                    return null;
	                }
	            }
	            rendition.url = url;
	            rendition.variation = 'Media#' + num;
	            rendition.delivery = _helper.getNodeAttributeValue(node, 'delivery');
	            var bitrate = _helper.getNodeAttributeNumberValue(node, 'bitrate', -1);
	            if (bitrate !== -1) {
	                rendition.bitrate = bitrate;
	            }
	            rendition.width = _helper.getNodeAttributeNumberValue(node, 'width');
	            rendition.height = _helper.getNodeAttributeNumberValue(node, 'height');
	            var valNode = _helper.getNodeAttributeValue(node, 'scalable');
	            if (valNode.length > 0) {
	                rendition.scalable = _helper.getNodeAttributeBooleanValue(node, 'scalable', true);
	            }
	            valNode = _helper.getNodeAttributeValue(node, 'maintainAspectRatio');
	            if (valNode.length > 0) {
	                rendition.maintainAspectRatio = _helper.getNodeAttributeBooleanValue(node, 'maintainAspectRatio', true);
	            }
	            var apiFramework = _helper.getNodeAttributeValue(node, 'apiFramework');
	            if (apiFramework && apiFramework.length > 0) {
	                rendition.apiFramework = apiFramework.toUpperCase();
	            }
	        }

	        return rendition;
	    }

	    function addMediaFilesAndDuration(parentNode) {
	        _nMsecDuration = 0;
	        _strSkipOffset = '';
	        _adParameters = '';
	        _arrMediaFiles = [];
	    	_mezzanine = null;
	    	_arrInteractiveCreatives = [];
	        var message = '';
	        var mediaTypes = [];
	        if (parentNode) {
	            var linear = _helper.getSubNode(parentNode, 'Linear', 0);
	            if (linear) {
	                var node = _helper.getSubNode(linear, 'Duration');
	                if (node) {
	                    var str = _helper.getNodeValue(node);
	                    _nMsecDuration = getMsecTime(str, -1);
	                }
	                var strSkipOffset = _helper.getNodeAttributeValue(linear, 'skipoffset');

	                //comment out by VIDLA-163
	                //if (strSkipOffset && strSkipOffset.length > 0) {
	                //    _nSkipOffset = getMsecTime(strSkipOffset, _nMsecDuration);
	                //}
	                _strSkipOffset = strSkipOffset;

	                //_adParameters = _helper.getSubNodeValue(linear, 'AdParameters', '');
	                _adParameters = _helper.getSubNodeWholeValue(linear, 'AdParameters', '');

	                node = _helper.getSubNode(linear, 'MediaFiles');
	                if (node) {
	                	var url;
	                    var nodes = _helper.getSubNodes(node, 'MediaFile');
	                    if (nodes) {
	                        for (var i = 0; i < nodes.length; i++) {
	                            node = nodes[i];
	                            url = _helper.getNodeValues(node);

	                            if (url.length > 0) {
	                                var rendition = configureMediaRendition(node, url, i, mediaTypes);

	                                if (rendition) {
	                                    _arrMediaFiles.push(rendition);
	                                }
	                            }
	                        }
	                        if (_arrMediaFiles.length === 0) {
	                            message = 'INCOMPATIBLE MEDIA TYPE, Available = ' + JSON.stringify(mediaTypes);
	                        }
	                        else {
	                        	// for VAST 4
	                            node = _helper.getSubNode(linear, 'MediaFiles');
	                        	_mezzanine = _helper.getSubNodeWholeValue(node, 'Mezzanine', '');
	                        	var interactiveNodes = _helper.getSubNodes(node, 'InteractiveCreativeFile');
	                        	if (interactiveNodes && interactiveNodes.length > 0) {
	                        		for (var j = 0; j < interactiveNodes.length; j++) {
	                        			var interactiveCreative = interactiveNodes[j];
	                        			url = _helper.getNodeValues(interactiveCreative);
	                        			if (url) {
	                        				var type = _helper.getNodeAttributeValue(interactiveCreative, 'type');
	                        				var framework = _helper.getNodeAttributeValue(interactiveCreative, 'apiFramework');
	                        				_arrInteractiveCreatives.push({url: url, type: type, apiFramework: framework});
	                        			}
	                        		}
	                        	}
	                        }
	                    }
	                    else {
	                        message = 'MISSING MEDIA FILES';
	                    }
	                }
	                else {
	                    message = 'MISSING MEDIA FILES';
	                }
	            }
	            else {
	                message = 'INVALID VAST STRUCTURE';
	            }
	        }
	        return message;
	    }

	    function trimXml(strVastXml) {
	        var nPos = strVastXml.indexOf('<');
	        var strXml = strVastXml.substr(nPos === -1 ? 0 : nPos);
	        nPos = strXml.lastIndexOf('>');
	        if (nPos !== -1) {
	            strXml = strXml.substr(0, nPos + 1);
	        }
	        return strXml.trim();
	    }

	    function isValidVastVersion(vastVersion) {
	        return vastVersion === '2.0' || vastVersion === '3.0' || vastVersion === '4.0' || vastVersion === '4.1';
	    }

	    function reportError(errCode, message) {
	        var arrErrorForInternalAndExternal = _arrErrorUrls.concat(_arrInternalErrorUrls);//merge with internal error and external error
	        substituteErrorCode(arrErrorForInternalAndExternal, errCode);
	        if (_arrError303Urls && _arrError303Urls.length > 0) {
	        	substituteErrorCode(_arrError303Urls, '303');
	        	arrErrorForInternalAndExternal = arrErrorForInternalAndExternal.concat(_arrError303Urls);
	        }
	        _logger.error(_prefix, 'Error ' + errCode + ' - ' + message);
	        _callback(false, _id, 'vast' + errCode, arrErrorForInternalAndExternal, _curNotifyUrl);
	    }

	    function processNextAd() {

	        //push error urls to global variable _arrInternalErrorUrls which has empty array as an default, it will be used for reportError() to return array of error urls to _callback
	        //the _arrInternalErrorUrls will be emptied by processAd() when exit out of siblings and if there's no internal parsing error
	        var arrStateOfNode = _adTree[_currTreeIdx].state;
	        if (arrStateOfNode && Array.isArray(arrStateOfNode.arrErrorUrls)) {
	            arrStateOfNode.arrErrorUrls.forEach(function (element) {
	                _arrInternalErrorUrls.push(element);
	            });
	        }

	        if (_currTreeIdx >= 0) {
	            _adTree[_currTreeIdx].children[0] = null;
	            _adTree[_currTreeIdx].children.splice(0, 1);
	            if (_adTree[_currTreeIdx].children.length === 0) {
	                var parentIdx = _adTree[_currTreeIdx].parentIdx;
	                _adTree.splice(_currTreeIdx, 1);
	                _currTreeIdx = parentIdx;
	                if (_currTreeIdx === -1) {
	                    if (_waterfall && _vastObjects.length > 0) {
	                        _logger.info(_prefix, 'Waterfall: Vast XML node count detected: # csm nodes: ' + _csmCount + ', # rtb nodes: ' + _rtbCount);
	                        _callback(true, _id, _vastObjects, null);
	                    }
	                    else if (_vmap && _vastObjects.length > 0) {
	                        _logger.info(_prefix, 'VMAP: Ad XML node count detected: ' + _vastObjects.length);
	                        _callback(true, _id, _vastObjects, null);
	                    }
	                    else {
	                        reportError('900', 'no Ad available');
	                    }
	                    return;
	                }
	                else {
	                    processNextAd();
	                    return;
	                }
	            }
	            _curWrapperLevel = _currTreeIdx;
	            _adTree[_currTreeIdx].state = preapareAdStateData();
	            processAd(_adTree[_currTreeIdx].children[0]);
	        }
	    }

	    function preapareAdStateData() {
	        var state = {
	            arrTrackings: {},
	            arrImpressions: [],
	            arrClickUrls: [],
	            arrClickTrackings: [],
	            arrErrorUrls: [],
	            sExtensions: '',
	            sequence: _vmap ? 0 : 1,
	            companions: {required: 'unknown', companions: []},
	            icons: [],
	            arrViewableImpressions: {viewable: [], notViewable: [], undetermined: []}
	        };
	        return state;
	    }

	    function saveNotificationUrl(adNode) {
	        var id = _helper.getNodeAttributeValue(adNode, 'id');
	        if (id.length > 0) {
	            var url = _helper.getNodeAttributeValue(adNode, 'notifyurl');
	            if (url && url.length > 0) {
	                _notifyurls[id] = url;
	            }
	        }
	    }

	    function saveCreativeId(adNode) {
	        var id = _helper.getNodeAttributeValue(adNode, 'id');
	        if (id.length > 0) {
	            var crId = _helper.getNodeAttributeValue(adNode, 'creativeId');
	            if (crId && crId.length > 0) {
	                _creativeIds[id] = crId;
	            }
	        }
	    }

	    function saveBuyerMemberId(adNode) {
	        var id = _helper.getNodeAttributeValue(adNode, 'id');
	        if (id.length > 0) {
	            var buyerId = _helper.getNodeAttributeValue(adNode, 'buyerMemberId');
	            if (buyerId && buyerId.length > 0) {
	                _buyerMemberIds[id] = buyerId;
	            }
	        }
	    }

	    function saveViewabilityConfig(adNode) {
	        var id = _helper.getNodeAttributeValue(adNode, 'id');
	        if (id.length > 0) {
	            var config = _helper.getNodeAttributeValue(adNode, 'viewabilityConfig');
	            if (config && config.length > 0) {
	                _viewabilityConfigs[id] = config;
	            }
	        }
	    }
	    
	    function saveNoAdsErrors() {
	    	if (_errors303 && _errors303.length > 0) {
	    		for (var i = 0; i < _errors303.length; i++) {
	                var node = _errors303[i];
	                var url = _helper.getNodeValues(node);
	                if (url && !isInArray(_arrError303Urls, url)) {
	                	_arrError303Urls.push(url);
	                }
	    		}
	    	}
	    }

	    function parseXML(strVastXml) {
	        _startTime = (new Date()).getTime();
	    	_arrError303Urls = [];	// make sure we keep error url for last vast

	        _sourceVastXml = strVastXml;
	        var strXml = trimXml(strVastXml);
	        if (strXml.length === 0) {
	            traceTreePath(_currTreeIdx, 'EMPTY VAST');
	            if (_adTree.length === 0) {
	                reportError('110', 'no bid response for mediation');
	            }
	            else {
	                processNextAd();
	            }
	            return;
	        }
	        var xmlDoc = null;
	        if (typeof window.DOMParser !== 'undefined') {
	            xmlDoc = (new DOMParser()).parseFromString(strXml, 'text/xml');
	            if (xmlDoc.documentElement.nodeName === 'parsererror') {
	                try {
	                    _logger.error(_prefix, 'Error reason = ' + xmlDoc.documentElement.childNodes[0].nodeValue);
	                }
	                catch (e) {
	                }
	                traceTreePath(_currTreeIdx, 'INVALID VAST STRUCTURE');
	                if (_adTree.length === 0) {
	                    reportError('100', 'VAST XML parsing error');
	                }
	                else {
	                    processNextAd();
	                }
	                return;
	            }
	        }
	        else if (typeof window.ActiveXObject !== 'undefined') {
	            try {
	                xmlDoc = new window.ActiveXObject('Microsoft.XMLDOM');
	                xmlDoc.loadXML(strXml);
	                if (xmlDoc.parseError.errorCode !== 0) {
	                    _logger.error(_prefix, xmlDoc.parseError);
	                    traceTreePath(_currTreeIdx, 'INVALID VAST STRUCTURE');
	                    if (_adTree.length === 0) {
	                        reportError('100', xmlDoc.parseError.errorCode + ', Error reason = ' + xmlDoc.parseError.reason);
	                    }
	                    else {
	                        processNextAd();
	                    }
	                    return;
	                }
	            }
	            catch (ex) {
	                _logger.error(_prefix, 'Failed to parse vast xml by window.ActiveXObject(Microsoft.XMLDOM)', ex);
	                traceTreePath(_currTreeIdx, 'INVALID VAST STRUCTURE');
	                if (_adTree.length === 0) {
	                    reportError('100', 'Failed to parse vast xml by window.ActiveXObject(Microsoft.XMLDOM)');
	                }
	                else {
	                    processNextAd();
	                }
	                return;
	            }
	        }
	        else {
	            _logger.error(_prefix, 'Failed to parse vast xml by window.ActiveXObject(Microsoft.XMLDOM)');
	            traceTreePath(_currTreeIdx, 'INVALID VAST STRUCTURE');
	            if (_adTree.length === 0) {
	                reportError('100', 'Failed to get vast xml');
	            }
	            else {
	                processNextAd();
	            }
	            return;
	        }
	        if (!xmlDoc) {
	            traceTreePath(_currTreeIdx, 'INVALID VAST STRUCTURE');
	            if (_adTree.length === 0) {
	                reportError('102', 'VAST XML parsing error');
	            }
	            else {
	                processNextAd();
	            }
	            return;
	        }
	        var vastNode = _helper.getSubNode(xmlDoc, 'VAST');
	        if (!vastNode || !vastNode.firstChild) {
	            traceTreePath(_currTreeIdx, 'EMPTY VAST');
	            if (_adTree.length === 0) {
	                reportError('110', 'no bid response for mediation');
	            }
	            else {
	                processNextAd();
	            }
	            return;
	        }
	        
	    	_errors303 = _helper.getSubNodes(vastNode, 'Error');
	 
	        var vastVersion = getVASTVersion(vastNode);
	        if (isValidVastVersion(vastVersion)) {
	            if (_topLevel) {
	                _waterfall = _helper.getNodeAttributeBooleanValue(vastNode, 'apn_waterfall');
	                if (_waterfall) {
	                    _options.waterfall = true;
	                }
	            }
	            var ads = _helper.getSubNodes(vastNode, 'Ad');
	            if (!ads || ads.length === 0) {
	            	saveNoAdsErrors();
	                traceTreePath(_currTreeIdx, 'NO AD NODE');
	                if (_adTree.length === 0) {
	                    reportError('900', 'no Ad available');
	                }
	                else {
	                    processNextAd();
	                }
	                return;
	            }
	            var children = [];
	            for (var i = 0; i < ads.length; i++) {
	            	if (_topLevel) {
	                	// make unique Ad id attribute
	            		var adIdTop = _helper.getNodeAttributeValue(ads[i], 'id');
	            		if (adIdTop) {
	            			adIdTop += ('_suffix' + i);
	            			ads[i].id = adIdTop;
	            		}
	            	}
	            	
	            	if (_vastVersion >= '4.0' && _currTreeIdx > 0) {
	            		if (!_adTree[_currTreeIdx].state.allowMultiAds) {
	            			var sequence = _helper.getNodeAttributeValue(ads[i], 'sequence');
	            			if (sequence) {
	            				continue;
	            			}
	            			if (children.length > 0) {
	            				break;
	            			}
	            		}
	            	}
	                children.push(ads[i]);
	                if (_waterfall && _topLevel) {
	                    saveNotificationUrl(ads[i]);
	                }
	                if (_topLevel) {
	                    saveBuyerMemberId(ads[i]);
	                    saveCreativeId(ads[i]);
	                    saveViewabilityConfig(ads[i]);
	                }
	            }
	            if (children.length === 0) {
	            	saveNoAdsErrors();
	                traceTreePath(_currTreeIdx, 'NO VALID AD NODES');
	                if (_adTree.length === 0) {
	                    reportError('900', 'no Ad available');
	                }
	                else {
	                    processNextAd();
	                }
	            	return;
	            }
	            var treeElem = {parentIdx: _currTreeIdx, currentIdx: 0, children: children, state: preapareAdStateData()};
	            _adTree.push(treeElem);
	            treeElem.currentIdx = _adTree.length - 1;
	            _currTreeIdx = treeElem.currentIdx;
	            processAd(_adTree[_currTreeIdx].children[0], vastVersion);
	        }
	        else {
	            traceTreePath(_currTreeIdx, 'INVALID VAST VERSION: ' + vastVersion);
	            if (_adTree.length === 0) {
	                reportError('102', 'VAST version not supported');
	            }
	            else {
	                processNextAd();
	            }
	        }
	    }

	    function mergeTrackings(idx) {
	        for (var event in _adTree[idx].state.arrTrackings) {
	            for (var i = 0; i < _adTree[idx].state.arrTrackings[event].length; i++) {
	                if (_arrTrackingsMerge.hasOwnProperty(event)) {
	                    if (!isInArray(_arrTrackingsMerge[event], _adTree[idx].state.arrTrackings[event][i])) {
	                        _arrTrackingsMerge[event].push(_adTree[idx].state.arrTrackings[event][i]);
	                    }
	                }
	                else {
	                    _arrTrackingsMerge[event] = [];
	                    _arrTrackingsMerge[event].push(_adTree[idx].state.arrTrackings[event][i]);
	                }
	            }
	        }
	        return _arrTrackingsMerge;
	    }

	    function mergeTreeTrackings(treeIdx) {
	        var idx = treeIdx;
	        while (idx >= 0) {
	            mergeTrackings(idx);
	            idx = _adTree[idx].parentIdx;
	        }
	        return _arrTrackingsMerge;
	    }

	    function mergeImpressions(idx) {
	        for (var i = 0; i < _adTree[idx].state.arrImpressions.length; i++) {
	            if (!isInArray(_arrImpressionsMerge, _adTree[idx].state.arrImpressions[i])) {
	                _arrImpressionsMerge.push(_adTree[idx].state.arrImpressions[i]);
	            }
	        }
	        return _arrImpressionsMerge;
	    }

	    function mergeTreeImpressions(treeIdx) {
	        var idx = treeIdx;
	        while (idx >= 0) {
	            mergeImpressions(idx);
	            idx = _adTree[idx].parentIdx;
	        }
	        return _arrImpressionsMerge;
	    }

	    function mergeClickUrls(idx) {
	        for (var i = 0; i < _adTree[idx].state.arrClickUrls.length; i++) {
	            if (!isInArray(_arrClickUrlsMerge, _adTree[idx].state.arrClickUrls[i])) {
	                _arrClickUrlsMerge.push(_adTree[idx].state.arrClickUrls[i]);
	            }
	        }
	        return _arrClickUrlsMerge;
	    }

	    function mergeTreeClickUrls(treeIdx) {
	        var idx = treeIdx;
	        while (idx >= 0) {
	            mergeClickUrls(idx);
	            idx = _adTree[idx].parentIdx;
	        }
	        return _arrClickUrlsMerge;
	    }

	    function mergeClickTrackings(idx) {
	        for (var i = 0; i < _adTree[idx].state.arrClickTrackings.length; i++) {
	            if (!isInArray(_arrClickTrackingsMerge, _adTree[idx].state.arrClickTrackings[i])) {
	                _arrClickTrackingsMerge.push(_adTree[idx].state.arrClickTrackings[i]);
	            }
	        }
	        return _arrClickTrackingsMerge;
	    }

	    function mergeTreeClickTrackings(treeIdx) {
	        var idx = treeIdx;
	        while (idx >= 0) {
	            mergeClickTrackings(idx);
	            idx = _adTree[idx].parentIdx;
	        }
	        return _arrClickTrackingsMerge;
	    }

	    function mergeErrorUrls(idx) {
	        for (var i = 0; i < _adTree[idx].state.arrErrorUrls.length; i++) {
	            if (!isInArray(_arrErrorUrlsMerge, _adTree[idx].state.arrErrorUrls[i])) {
	                _arrErrorUrlsMerge.push(_adTree[idx].state.arrErrorUrls[i]);
	            }
	        }
	        return _arrErrorUrlsMerge;
	    }

	    function mergeTreeErrorUrls(treeIdx) {
	        var idx = treeIdx;
	        while (idx >= 0) {
	            mergeErrorUrls(idx);
	            idx = _adTree[idx].parentIdx;
	        }
	        return _arrErrorUrlsMerge;
	    }

	    function mergeExtensions(idx) {
	        if (_adTree[idx].state.sExtensions.length > 0) {
	            _sExtensions = _sExtensions + _adTree[idx].state.sExtensions;
	        }
	        return _sExtensions;
	    }

	    function mergeTreeExtensions(treeIdx) {
	        var idx = treeIdx;
	        while (idx >= 0) {
	            mergeExtensions(idx);
	            idx = _adTree[idx].parentIdx;
	        }
	        return _sExtensions;
	    }

	    function mergeCompanions(treeIdx) {
	        var idx = treeIdx;
	        while (idx > 0) {
	            var parentIdx = _adTree[idx].parentIdx;
	            APN_CompanionAds.mergeCompanions(_adTree[parentIdx].state.companions, _adTree[idx].state.companions);
	            idx = parentIdx;
	        }
	        if (_adTree[idx].state.companions.required === 'unknown') {
	            delete _adTree[idx].state.companions.required;
	        }
	        return _adTree[idx].state.companions;
	    }

	    function mergeTreeCompanions(treeIdx) {
	        var arrCompanions = {required: 'unknown', companions: []};
	        var idx = treeIdx;
	        while (idx >= 0) {
	            APN_CompanionAds.mergeCompanions(arrCompanions, _adTree[idx].state.companions);
	            idx = _adTree[idx].parentIdx;
	        }
	        return arrCompanions;
	    }

	    function isProgramExist(arrIcons, program) {
	        for (var i = 0; i < arrIcons.length; i++) {
	            if (arrIcons[i].program.toLowerCase() === program.toLowerCase()) {
	                return true;
	            }
	        }
	        return false;
	    }

	    function removeProgram(arrIcons, program) {
	        for (var i = 0; i < arrIcons.length; i++) {
	            if (arrIcons[i].program.toLowerCase() === program.toLowerCase()) {
	                //arrIcons[i].splice(i, 1);
	                arrIcons.splice(i, 1);//one of arrIcons should be removed if it has same program for VIDLA-625
	                return;
	            }
	        }
	    }

	    function mergeIcons(treeIdx) {
	        var idx = treeIdx;
	        while (idx > 0) {
	            var parentIdx = _adTree[idx].parentIdx;
	            for (var i = 0; i < _adTree[idx].state.icons.length; i++) {
	                // avoid duplicate icons with same program (replace if exist)
	                if (isProgramExist(_adTree[parentIdx].state.icons, _adTree[idx].state.icons[i].program)) {
	                    removeProgram(_adTree[parentIdx].state.icons, _adTree[idx].state.icons[i].program);
	                }
	                _adTree[parentIdx].state.icons.push(_adTree[idx].state.icons[i]);
	            }
	            idx = parentIdx;
	        }
	        return _adTree[idx].state.icons;
	    }

	    function mergeTreeIcons(treeIdx) {
	        var arrIcons = [];
	        var idx = treeIdx;
	        while (idx >= 0) {
	            for (var i = 0; i < _adTree[idx].state.icons.length; i++) {
	                // avoid duplicate icons with same program
	                if (!isProgramExist(arrIcons, _adTree[idx].state.icons[i].program)) {
	                    arrIcons.push(_adTree[idx].state.icons[i]);
	                }
	            }
	            idx = _adTree[idx].parentIdx;
	        }
	        return arrIcons;
	    }

	    function aggregateCompanions(companionsObj) {
	        // get companions with resources and without resorces
	        var resCompanions = [];
	        var noresCompanions = [];
	        var companions = companionsObj.companions;
	        if (!companionsObj.companions) {
	            return companionsObj;
	        }
	        var companion;
	        var i, j;
	        for (i = companions.length - 1; i >= 0; i--) {
	            companion = companions[i];
	            if (companion.StaticResource || companion.IFrameResource || companion.HTMLResource) {
	                var sameSize = false;
	                for (j = 0; j < resCompanions.length; j++) {
	                    if (companion.width === resCompanions[j].width &&
	                        companion.height === resCompanions[j].height) {
	                        sameSize = true;
	                        break;
	                    }
	                }
	                if (!sameSize) {
	                    resCompanions.push(companion);
	                }
	            }
	            else {
	                noresCompanions.push(companion);
	            }
	        }

	        // aggregate companions without resorces into companions with resources
	        for (i = 0; i < noresCompanions.length; i++) {
	            for (j = 0; j < resCompanions.length; j++) {
	                if (noresCompanions[i].width === resCompanions[j].width && noresCompanions[i].height === resCompanions[j].height) {
	                    if ((noresCompanions[i].id && noresCompanions[i].id === resCompanions[j].id) || (!noresCompanions[i].id)) {
	                        // add click trackings
	                        if (noresCompanions[i].CompanionClickTracking) {
	                            if (!resCompanions[j].CompanionClickTracking) {
	                                resCompanions[j].CompanionClickTracking = [];
	                            }
	                            resCompanions[j].CompanionClickTracking = resCompanions[j].CompanionClickTracking.concat(noresCompanions[i].CompanionClickTracking);
	                        }
	                        // add view trackings
	                        if (noresCompanions[i].TrackingEvents) {
	                            if (!resCompanions[j].TrackingEvents) {
	                                resCompanions[j].TrackingEvents = [];
	                            }
	                            resCompanions[j].TrackingEvents = resCompanions[j].TrackingEvents.concat(noresCompanions[i].TrackingEvents);
	                        }
	                    }
	                }
	            }
	        }
	        var ret = {companions: resCompanions};
	        if (companionsObj.required) {
	            ret.required = companionsObj.required;
	        }
	        return ret;
	    }
	    
	    function getCategories(node) {
	    	var categories = [];
	    	var nodes = _helper.getSubNodes(node, 'Category');
	    	if (nodes && nodes.length > 0) {
	    		for (var i = 0; i < nodes.length; i++) {
	    			var val = _helper.getNodeValues(nodes[i]);
	    			if (val && val.length > 0) {
	    				// if category value is not present ignore this category node
	        			var authority = _helper.getNodeAttributeValue(nodes[i], 'authority');
	        			categories.push({category: val, authority: authority});
	    			}
	    		}
	    	}
	    	return categories.length > 0 ? categories : null;
	    }

	    function mergeViewableImpressions(idx) {
	    	var i;
	        for (i = 0; i < _adTree[idx].state.arrViewableImpressions.viewable.length; i++) {
	            if (!isInArray(_arrViewableImpressionsMerge.viewable, _adTree[idx].state.arrViewableImpressions.viewable[i])) {
	            	_arrViewableImpressionsMerge.viewable.push(_adTree[idx].state.arrViewableImpressions.viewable[i]);
	            }
	        }
	        for (i = 0; i < _adTree[idx].state.arrViewableImpressions.notViewable.length; i++) {
	            if (!isInArray(_arrViewableImpressionsMerge.notViewable, _adTree[idx].state.arrViewableImpressions.notViewable[i])) {
	            	_arrViewableImpressionsMerge.notViewable.push(_adTree[idx].state.arrViewableImpressions.notViewable[i]);
	            }
	        }
	        for (i = 0; i < _adTree[idx].state.arrViewableImpressions.undetermined.length; i++) {
	            if (!isInArray(_arrViewableImpressionsMerge.undetermined, _adTree[idx].state.arrViewableImpressions.undetermined[i])) {
	            	_arrViewableImpressionsMerge.undetermined.push(_adTree[idx].state.arrViewableImpressions.undetermined[i]);
	            }
	        }
	        return _arrViewableImpressionsMerge;
	    }

	    function mergeTreeViewableImpressions(treeIdx) {
	        var idx = treeIdx;
	        while (idx >= 0) {
	        	mergeViewableImpressions(idx);
	            idx = _adTree[idx].parentIdx;
	        }
	        return _arrViewableImpressionsMerge;
	    }
	    
	    function getUniversalAdId(node) {
	    	var creatieves = _helper.getSubNodes(node, 'Creative');
	    	if (creatieves && creatieves.length > 0) {
	    		for (var i = 0; i < creatieves.length; i++) {
	    			var linear = _helper.getSubNode(creatieves[i], 'Linear');
	    			if (linear) {
	        			var universalAdId = _helper.getSubNode(creatieves[i], 'UniversalAdId');
	        			return universalAdId;
	    			}
	    		}
	    	}
	    	return null;
	    }
	    
	    function getAdVerifications(node) {
	    	var verifications = [];
	    	var adVer = _helper.getSubNode(node, 'AdVerifications');
	    	if (adVer) {
	    		var nodes = _helper.getSubNodes(adVer, 'Verification');
	    		if (nodes && nodes.length > 0) {
	    			for (var i = 0; i < nodes.length; i++) {
	    				var verification = nodes[i];
	    				var vendor = _helper.getNodeAttributeValue(verification, 'vendor');
	    				var jsResources = [];
	    				var flashResources = [];
	    				var val;
	    				var attr;
	    				var j;
	    				var resources = _helper.getSubNodes(verification, 'JavaScriptResource');
	    				if (resources && resources.length > 0) {
	    					for (j = 0; j < resources.length; j++) {
	    						val = _helper.getNodeValues(resources[j]);
	    						var attrFr = _helper.getNodeAttributeValue(resources[j], 'apiFramework');
	    						var attrBr = _helper.getNodeAttributeBooleanValue(resources[j], 'browserOptional');
	    						jsResources.push({url: val, framework: attrFr, browserOptional: attrBr});
	    					}
	    				}
	    				resources = _helper.getSubNodes(verification, 'FlashResource');
	    				if (resources && resources.length > 0) {
	    					for (j = 0; j < resources.length; j++) {
	    						val = _helper.getNodeValues(resources[j]);
	    						attr = _helper.getNodeAttributeValue(resources[j], 'apiFramework');
	    						flashResources.push({url: val, framework: attr});
	    					}
	    				}
	                    var viewableImpression = _helper.getSubNodeWholeValue(verification, 'ViewableImpression');
	                    var trackingEvents = {};
	                    var hasTrackings = false;
	    				var trEvents = _helper.getSubNode(verification, 'TrackingEvents');
	    				if (trEvents) {
	                        var trackings = _helper.getSubNodes(trEvents, 'Tracking');
	                        if (trackings && trackings.length > 0) {
	                            for (j = 0; j < trackings.length; j++) {
	                                val = _helper.getNodeValues(trackings[j]);
	                                var event = _helper.getNodeAttributeValue(trackings[j], 'event');
	                                if (event && val) {
	                                    hasTrackings = true;
	                                    if (trackingEvents.hasOwnProperty(event)) {
	                                        trackingEvents[event].push(val);
	                                    }
	                                    else {
	                                        trackingEvents[event] = [val];
	                                    }
	                                }
	                            }                              
	                        }
	    				}
	                    var verificationParameters = _helper.getSubNodeWholeValue(verification, 'VerificationParameters');
	    				var verData = {};
	    				if (vendor) {
	    					verData.vendor = vendor;
	    				}
	    				if (jsResources.length > 0) {
	    					verData.jsResources = jsResources;
	    				}
	    				if (flashResources.length > 0) {
	    					verData.flashResources = flashResources;
	    				}
	    				if (viewableImpression) {
	    					verData.viewableImpression = viewableImpression;
	                    }
	                    if (hasTrackings) {
	                        verData.trackingEvents = trackingEvents;
	                    }
	                    if (verificationParameters) {
	                        verData.verificationParameters = verificationParameters;
	                    }
	    				verifications.push(verData);
	    			}
	    		}
	    	}
	    	
	    	return verifications.length > 0 ? verifications : null;
	    }
	    
	    function normalizeAdId(id) {
	    	var retId = id;
	    	var idx = retId.indexOf('_suffix');
	    	if (idx > 0) {
	    		retId = retId.substring(0, idx);
	    	}
	    	return retId;
	    }

	    function processAd(adNode, vastVersion) {
	        var inLineWrapperNode = _helper.getSubNode(adNode, 'Wrapper');
	        var isWrapper = inLineWrapperNode !== null;
	        if (!isWrapper) {
	            inLineWrapperNode = _helper.getSubNode(adNode, 'InLine');
	        }
	        
	        if (!inLineWrapperNode) {
	        	saveNoAdsErrors();
	            traceTreePath(_currTreeIdx, 'MISSING WRAPPER / INLINE NODE');
	            processNextAd();
	            return;
	        }

	        _curWrapperLevel++;
	        // wrapper limit is number of Wrapper nodes + InLine node
	        if (_curWrapperLevel > _wrapperLimit) {
	            traceTreePath(_currTreeIdx, 'Reach Wrapper limit');
	            processNextAd();
	            return;
	        }

	        if (vastVersion > _vastVersion) {
	            _vastVersion = vastVersion;
	        }

	        var id = _helper.getNodeAttributeValue(adNode, 'id');
	        if (_notifyurls.hasOwnProperty(id)) {
	            _curNotifyUrl = _notifyurls[id];
	        }
	        if (_creativeIds.hasOwnProperty(id)) {
	            _curCreativeId = _creativeIds[id];
	        }
	        if (_buyerMemberIds.hasOwnProperty(id)) {
	            _curBuyerMemberId = _buyerMemberIds[id];
	        }
	        if (_viewabilityConfigs.hasOwnProperty(id)) {
	            _curViewabilityConfig = _viewabilityConfigs[id];
	        }
	        // worried only about top level ad sequence attribute
	        if (_currTreeIdx === 0) {
	            var seq = _helper.getNodeAttributeValue(adNode, 'sequence');
	            if (seq) {
	                _adTree[_currTreeIdx].state.sequence = parseInt(seq);
	            }
	            var conditional = _helper.getNodeAttributeValue(adNode, 'conditionalAd');
	            if (conditional) {
	            	_conditionalAd = _helper.getNodeAttributeBooleanValue(adNode, 'conditionalAd');
	            }
	        }

	        addErrorUrls(inLineWrapperNode, _adTree[_currTreeIdx].state.arrErrorUrls);
	        addImpressions(inLineWrapperNode, _adTree[_currTreeIdx].state.arrImpressions);
	        addTrackings(inLineWrapperNode, _adTree[_currTreeIdx].state.arrTrackings);
	        addClickUrls(inLineWrapperNode, _adTree[_currTreeIdx].state.arrClickUrls, _adTree[_currTreeIdx].state.arrClickTrackings);
	        addExtensions(inLineWrapperNode, _currTreeIdx);
	        addCompanions(inLineWrapperNode, _currTreeIdx);
	        addIcons(inLineWrapperNode, _currTreeIdx);
	        addViewableImpression(inLineWrapperNode, _adTree[_currTreeIdx].state.arrViewableImpressions);

	        _arrInternalErrorUrls = [];//clear _arrInternalErrorUrls at this time, all same sibiling's error will be gathered by processNextAd()

	        if (isWrapper) {
	        	if (_vastVersion >= '4.0' && _currTreeIdx > 0) {
	        		if (!_adTree[_currTreeIdx - 1].state.followAdditionalWrappers) {
	                    traceTreePath(_currTreeIdx, 'Additional Wrappers are not allowed');
	                    processNextAd();
	                    return;
	        		}
	        	}
	            processWrapper(inLineWrapperNode);
	        }
	        else {
	            var message = addMediaFilesAndDuration(inLineWrapperNode);
	            if (_arrMediaFiles.length === 0 || message.length > 0) {
	                traceTreePath(_currTreeIdx, message);
	                processNextAd();
	                return;
	            }
	            _arrTrackingsMerge = JSON.parse(JSON.stringify(_arrTrackings));
	            _arrImpressionsMerge = _arrImpressions.slice(0);
	            _arrClickUrlsMerge = _arrClickUrls.slice(0);
	            _arrClickTrackingsMerge = _arrClickTrackings.slice(0);
	            _arrErrorUrlsMerge = _arrErrorUrls.slice(0);
	            _sExtensions = '';

	            var strTrackingUrls = JSON.stringify(mergeTreeTrackings(_adTree[_currTreeIdx].parentIdx));
	            var strImpressionUrls = JSON.stringify(mergeTreeImpressions(_adTree[_currTreeIdx].parentIdx));
	            var strClickUrls = JSON.stringify(mergeTreeClickUrls(_adTree[_currTreeIdx].parentIdx));
	            var strClickTrackingUrls = JSON.stringify(mergeTreeClickTrackings(_adTree[_currTreeIdx].parentIdx));
	            var strErrorUrls = JSON.stringify(mergeTreeErrorUrls(_adTree[_currTreeIdx].parentIdx));
	            var strExtensions = mergeTreeExtensions(_adTree[_currTreeIdx].parentIdx);
	            var strCompanions = JSON.stringify(mergeTreeCompanions(_adTree[_currTreeIdx].parentIdx));
	            var strIcons = JSON.stringify(mergeTreeIcons(_adTree[_currTreeIdx].parentIdx));
	            _sExtensions = '';
	            var companions = mergeCompanions(_currTreeIdx);
	            companions = aggregateCompanions(companions);
	            var vastObj = {
	                vastVersion: _vastVersion,
	                withWrapper: _withWrapper,
	                mediaFiles: _arrMediaFiles,
	                trackingUrls: mergeTrackings(_currTreeIdx),
	                impressionUrls: mergeImpressions(_currTreeIdx),
	                clickUrls: mergeClickUrls(_currTreeIdx),
	                clickTrackingUrls: mergeClickTrackings(_currTreeIdx),
	                errorUrls: mergeErrorUrls(_currTreeIdx),
	                durationMsecs: _nMsecDuration,
	                skipOffset: _strSkipOffset,
	                extensions: mergeExtensions(_currTreeIdx),
	                adParameters: _adParameters,
	                vastXml: _sourceVastXml,			// inline vast xml
	                extTrackingUrls: strTrackingUrls,
	                extImpressionUrls: strImpressionUrls,
	                extClickUrls: strClickUrls,
	                extClickTrackingUrls: strClickTrackingUrls,
	                extErrorUrls: strErrorUrls,
	                extExtensions: strExtensions,
	                adId: normalizeAdId(id),
	                sequence: _adTree[0].state.sequence,
	                companionAds: companions,
	                extCompanions: strCompanions,
	                icons: mergeIcons(_currTreeIdx),
	                extIcons: strIcons,
	                finalVastUri: _finalVastUri //VIDLA-2240
	            };
	            
	            // vast 4 data
	            if (_vastVersion.substr(0, 1) > '3') {
	        		var universalAdId = getUniversalAdId(inLineWrapperNode);
	        		if (universalAdId) {
	                    var idRegistry = _helper.getNodeAttributeValue(universalAdId, 'idRegistry');
	                    var idValue = _helper.getNodeAttributeValue(universalAdId, 'idValue');
	                    if (idRegistry.length === 0 || idValue.length === 0) {
	                        traceTreePath(_currTreeIdx, 'universalAdId is invalid');
	                        processNextAd();
	                        return;
	                    }
	                    vastObj.universalAdId = {idRegistry: idRegistry, idValue: idValue};
	                }
	        		
	            	vastObj.conditionalAd = _conditionalAd;
	            	var categories = getCategories(inLineWrapperNode);
	            	if (categories) {
	            		for (var j = 0; j < categories.length; j++) {
	            			if (!categories[j].category || !categories[j].authority) {
	                            traceTreePath(_currTreeIdx, 'invalid Category node');
	                            processNextAd();
	                            return;
	            			}
	            		}
	                	vastObj.categories = categories;
	            	}
	            	
	                var strViewableImpressions = JSON.stringify(mergeTreeViewableImpressions(_adTree[_currTreeIdx].parentIdx));
	            	var viewImpressions = mergeViewableImpressions(_currTreeIdx);
	            	// use only not empty (with not empty arrays) viewImpressions object
	            	if (viewImpressions && 
	            		(viewImpressions.viewable.length + viewImpressions.notViewable.length + viewImpressions.undetermined.length) > 0) {
	                	vastObj.extViewableImpression = strViewableImpressions;
	                	vastObj.viewableImpression = viewImpressions;
	            	}
	            	
	            	var adVerifications = getAdVerifications(inLineWrapperNode);
	        		if (adVerifications && adVerifications.length > 0) {
	                	vastObj.adVerifications = adVerifications;
	        		}
	        		
	        		if (_mezzanine) {
	        			vastObj.mezzanine = _mezzanine;
	        		}
	        		if (_arrInteractiveCreatives && _arrInteractiveCreatives.length > 0) {
	        			vastObj.interactiveCreativeFiles = _arrInteractiveCreatives;
	        		}
	        		
	        		if (_fallbackOnNoAd !== undefined) {
	        			vastObj.fallbackOnNoAd = _fallbackOnNoAd;
	        		}
	            }
	            
	            if (_waterfall && _curNotifyUrl.length > 0) {
	                vastObj.notifyurl = _curNotifyUrl;
	            }
	            if (_curCreativeId.length > 0) {
	                vastObj.creative_id = _curCreativeId;
	            }
	            if (_curBuyerMemberId.length > 0) {
	                vastObj.buyerMemberId = _curBuyerMemberId;
	            }
	            if (_curViewabilityConfig.length > 0) {
	                vastObj.viewabilityConfig = _curViewabilityConfig;
	            }
	            // becaurse waterfall xml always unwrapped, we can set rtb flag base on current ad node
	            var rtb = false;
	            if (_waterfall) {
	                var rtbAttr = _helper.getNodeAttributeValue(adNode, 'rtb');
	                if (rtbAttr && rtbAttr === 'true') {
	                    rtb = true;
	                    vastObj.rtb = true;
	                }
	            }
	            if (_terminated) {
	                traceTreePath(_currTreeIdx, 'terminated');
	                _callback(false, _id, 'terminated', null, _curNotifyUrl);		// terminated
	                return;
	            }
	            var mediaTypes = [];
	            for (var i = 0; i < _arrMediaFiles.length; i++) {
	                if (mediaTypes.indexOf(_arrMediaFiles[i].type) === -1) {
	                    mediaTypes.push(_arrMediaFiles[i].type);
	                }
	            }
	            traceTreePath(_currTreeIdx, 'SUCCESS, Available=' + JSON.stringify(mediaTypes));
	            if (_waterfall) {
	                _vastObjects.push(vastObj);
	                if (rtb) {
	                    _rtbCount++;
	                }
	                else {
	                    _csmCount++;
	                }
	                processNextAd();
	            }
	            else if (_vmap) {
	            	vastObj.vastXml = getXmlForSequence(vastObj.vastXml, vastObj.sequence);
	            	_vastObjects.push(vastObj);
	                processNextAd();
	            }
	            else {
	                _callback(true, _id, vastObj, null);
	            }
	        }
	    }
	    
	    function getXmlForSequence(xml, sequence) {
	        var xmlDoc = (new DOMParser()).parseFromString(xml, 'text/xml');
	        var vastNode = _helper.getSubNode(xmlDoc, 'VAST');
	        var adNodes = _helper.getSubNodes(vastNode, 'Ad');
	        for (var i = 0; i < adNodes.length;) {
	        	var adSequence = _helper.getNodeAttributeValue(adNodes[i], 'sequence');
	        	if (adSequence && parseInt(adSequence) !== sequence) {
	        		// delete ad with different sequence attribute
	        		vastNode.removeChild(adNodes[i]);
	        	}
	        	else {
	        		i++;
	        	}
	        }
	    	var browser = ua.browser.name.toLowerCase();    
	        var xmlOut;
	        if (browser === 'ie') {
	        	xmlOut = (new XMLSerializer()).serializeToString(xmlDoc.childNodes[0]);
	        }
	        else {
	            xmlOut = xmlDoc.childNodes[0].outerHTML; 
	        }
	        return xmlOut;
	    }

	    function prepareExternalTrackers(videoTrackers, impTracker) {

	        var url;
	        var i;
	        var arr;
	        var name;
	        if (impTracker) {
	            _arrImpressions.push(impTracker.trim());
	        }
	        if (videoTrackers) {
	            if (Array.isArray(videoTrackers) && videoTrackers.length === 1) {
	                // new format
	                var trackers = videoTrackers[0];
	                if (trackers.impression_urls) {
	                    for (i = 0; i < trackers.impression_urls.length; i++) {
	                        url = trackers.impression_urls[i].trim();
	                        _arrImpressions.push(url);
	                    }
	                }
	                if (trackers.error_urls) {
	                    for (i = 0; i < trackers.error_urls.length; i++) {
	                        url = trackers.error_urls[i].trim();
	                        _arrErrorUrls.push(url);
	                    }
	                }
	                if (trackers.video_click_urls) {
	                    for (i = 0; i < trackers.video_click_urls.length; i++) {
	                        url = trackers.video_click_urls[i].trim();
	                        _arrClickTrackings.push(url);
	                    }
	                }
	                for (name in trackers.video_events) {
	                    arr = trackers.video_events[name];
	                    for (i = 0; i < arr.length; i++) {
	                        url = arr[i].trim();
	                        if (_arrTrackings.hasOwnProperty(name)) {
	                            if (!isInArray(_arrTrackings[name], url)) {
	                                _arrTrackings[name].push(url);
	                            }
	                        }
	                        else {
	                            _arrTrackings[name] = [url];
	                        }
	                    }
	                }
	            }
	            else {
	                for (name in videoTrackers) {
	                    if (name === 'service') {	// ignore not vast related trackers
	                        continue;
	                    }
	                    if (Array.isArray(videoTrackers[name])) {
	                        arr = videoTrackers[name];
	                        for (i = 0; i < arr.length; i++) {
	                            url = arr[i].trim();
	                            if (name === 'click') {
	                                _arrClickTrackings.push(url);
	                            }
	                            else if (name === 'error') {
	                                _arrErrorUrls.push(url);
	                            }
	                            else if (name === 'impression') {
	                                _arrImpressions.push(url);
	                            }
	                            else {
	                                if (_arrTrackings.hasOwnProperty(name)) {
	                                    if (!isInArray(_arrTrackings[name], url)) {
	                                        _arrTrackings[name].push(url);
	                                    }
	                                }
	                                else {
	                                    _arrTrackings[name] = [url];
	                                }
	                            }
	                        }
	                    }
	                    else {
	                        url = videoTrackers[name].trim();
	                        if (name === 'click') {
	                            _arrClickTrackings.push(url);
	                        }
	                        else if (name === 'error') {
	                            _arrErrorUrls.push(url);
	                        }
	                        else if (name === 'impression') {
	                            _arrImpressions.push(url);
	                        }
	                        else {
	                            if (_arrTrackings.hasOwnProperty(name)) {
	                                if (!isInArray(_arrTrackings[name], url)) {
	                                    _arrTrackings[name].push(url);
	                                }
	                            }
	                            else {
	                                _arrTrackings[name] = [url];
	                            }
	                        }
	                    }
	                }
	            }
	        }
	    }

	    this.parse = function (strVastXml, videoTrackers, impTracker, callback) {
	        _callback = callback;
	        prepareExternalTrackers(videoTrackers, impTracker);
	        _topLevel = true;
	        parseXML(strVastXml);
	    };

	    this.terminate = function () {
	        _terminated = true;
	    };
	};

	var VastModifier = __webpack_require__(14);

	var VastMerger = __webpack_require__(15);

	module.exports = {
	    /** Describe Parser Main Entry Point Here.
	     * @param {string} strVastXml - VAST xml.
	     * @param {function} fnCallback - Callback function.
	     *        Callback parameters:
	     *            succ: true if success, false otherwise
	     *            sourceId: mediation element identificator
	     *            data: object is success, error code otherwise
	     *            arrErrorUrl: null if success, list of tracking url parsed from vast xml untill parsing has failed
	     * @param {object} id - mediation element identificator.
	     * @param {number} nMsecTimeout - time out in miliseconds for loading wrapper xml.
	     * @param {object} videoTrackers - video_trackings field from impbus request.
	     * @param {string} videoTrackers - imp_tracking_url field from impbus request.
	     * @param {object} options - publisher options.
	     * 		  If adServerTimeout is present in options, VAST parser uses adServerTimeout value for loading wrapper xml instead of nMsecTimeout.
	     */
	    parse: function (strVastXml, fnCallback, id, nMsecTimeout, videoTrackers, impTracker, options) {
	        var parserObj = new VastParser(id, nMsecTimeout, options);
	        parserObj.parse(strVastXml, videoTrackers, impTracker,
	            function (succ, sourceId, data, arrErrorUrls, notifUrl) {
	                if (fnCallback) {
	                    fnCallback(succ, sourceId, data, arrErrorUrls, notifUrl);
	                }
	                parserObj = null;
	            });
	        return parserObj;
	    },

	    /** Describe Vast Unwrapping Entry Point Here.
	     * @param {object} parserData - object returned after successful parsing.
	     * @param {string} adToken - optional ad identificator used for debug mode
	     * @return {string} - unwrapped VAST xml.
	     */
	    getUnwrappedVastTag: function (parserData, adToken, notifyUrl, contentSource, buyerMemberId, viewabilityConfig, additionalTrackers, creativeId) {
	        if (!parserData || !parserData.vastXml) {
	            return null;
	        }
	        var obj = new VastModifier(parserData, adToken, notifyUrl, contentSource, buyerMemberId, viewabilityConfig, additionalTrackers, creativeId);
	        var xml = obj.addTrackers();
	        obj = null;
	        return xml;
	    },

	    /** Describe Vast Merging VAST XMLs Entry Point Here.
	     * @param {object} xmlListData - object containes XMLs and additional data:
	     *                    xml: VAST XML
	     *                    notifyUrl: notification url from impbus response
	     *                    buyerMemberId: buyer member idenfificator from impbus response
	     * @return {string} - merged VAST xml.
	     */
	    getMergedVastTag: function (xmlList) {
	        if (!xmlList || xmlList.length === 0) {
	            return null;
	        }
	        var obj = new VastMerger(xmlList);
	        var xml = obj.getVastXml();
	        obj = null;
	        return xml;
	    }
	};


/***/ }),
/* 6 */
/***/ (function(module, exports) {

	var XMLParserHelper = function () {
	    this.getSubNodes = function (node, subNodeName) {
	        var nodes = node.getElementsByTagName(subNodeName);
	        if (nodes.length > 0) {
	            return nodes;
	        }
	        return null;
	    };

	    this.getSubNode = function (node, subNodeName, index) {
	        if (!index) {
	            index = 0;
	        }
	        var nodes = node.getElementsByTagName(subNodeName);
	        if (nodes.length > index) {
	            return nodes[index];
	        }
	        return null;
	    };

	    this.getNodeValue = function (node) {
	        if (node.childNodes.length === 0) {
	            return '';
	        }
	        var val = node.childNodes[0].nodeValue;
	        if (val) {
	            return val.trim();
	        }
	        return '';
	    };

	    this.getNodeValues = function (node) {
	        if (node.childNodes.length === 0) {
	            return '';
	        }
	        var wholeVal = '';
	        for (var i = 0; i < node.childNodes.length; i++) {
	            var val = node.childNodes[i].nodeValue;
	            if (val) {
	            	wholeVal += val;
	            }
	        }
	        return wholeVal.trim();
	    };

	    this.getNodeAttributeValue = function (node, attributeName) {
	        var val = node.getAttribute(attributeName);
	        if (val === null) {
	            val = '';
	        }
	        return val;
	    };

	    this.getNodeAttributeNumberValue = function (node, attributeName, defaultValue) {
	        if (!defaultValue) {
	            defaultValue = 0;
	        }
	        var answer = defaultValue;
	        var val = this.getNodeAttributeValue(node, attributeName);

	        if (val.length > 0) {
	            if (val.indexOf('.') >= 0) {
	                answer = parseFloat(val);
	            }
	            else {
	                answer = parseInt(val);
	            }
	        }

	        return answer;
	    };

	    this.getNodeAttributeBooleanValue = function (node, attributeName, defaultValue) {
	        if (!defaultValue) {
	            defaultValue = false;
	        }
	        var answer = defaultValue;
	        var val = this.getNodeAttributeValue(node, attributeName);

	        if (val.length > 0) {
	            var char = val.toLowerCase().charAt(0);
	            answer = (char === 't');
	        }

	        return answer;
	    };

	    this.getSubNodeValue = function (parentNode, subNodeName, defaultValue) {
	        defaultValue = (typeof defaultValue === 'undefined') ? '' : defaultValue;
	        var subnode = this.getSubNode(parentNode, subNodeName);
	        if (subnode !== null) {
	            return this.getNodeValue(subnode);
	        }
	        return defaultValue;
	    };

	    this.getSubNodeWholeValue = function (parentNode, subNodeName, defaultValue) {
	        defaultValue = (typeof defaultValue === 'undefined') ? '' : defaultValue;
	        var subnode = this.getSubNode(parentNode, subNodeName);
	        if (subnode !== null) {
	            return this.getNodeValues(subnode);
	        }
	        return defaultValue;
	    };

	    this.getSubNodeBooleanValue = function (parentNode, subNodeName, defaultValue) {
	        defaultValue = (typeof defaultValue === 'undefined') ? 'false' : defaultValue;

	        var value = this.getSubNodeValue(parentNode, subNodeName);
	        if (value.length > 0 && value.toLowerCase().charAt(0) === 't') {
	            return true;
	        }
	        if (value.length > 0 && value.toLowerCase().charAt(0) === 'f') {
	            return false;
	        }
	        return defaultValue;
	    };
	};

	module.exports = XMLParserHelper;


/***/ }),
/* 7 */
/***/ (function(module, exports) {

	var CompanionAds = {

	    parse: function (companionAdsDest, companionAdsNode, helper) {
	        var req = helper.getNodeAttributeValue(companionAdsNode, 'required');
	        if (req && req.length > 0) {
	            companionAdsDest.required = req;
	        }

	        var nodes = helper.getSubNodes(companionAdsNode, 'Companion');
	        if (nodes) {
	            for (var i = 0; i < nodes.length; i++) {
	                var node = nodes[i];
	                //var companion = JSON.parse(JSON.stringify(APN_Companion));
	                var companion = {};

	                // required attributes
	                var width = helper.getNodeAttributeNumberValue(node, 'width', -1);
	                var height = helper.getNodeAttributeNumberValue(node, 'height', -1);
	                if (width <= 0 || height <= 0) {
	                    continue;
	                }
	                companion.width = width;
	                companion.height = height;

	                // optional attributes and subnodes
	                var val = helper.getNodeAttributeValue(node, 'id');
	                if (val) {
	                    companion.id = val;
	                }

	                val = helper.getNodeAttributeNumberValue(node, 'assetWidth', -1);
	                if (val > 0) {
	                    companion.assetWidth = val;
	                }

	                val = helper.getNodeAttributeNumberValue(node, 'assetHeight', -1);
	                if (val > 0) {
	                    companion.assetHeight = val;
	                }

	                val = helper.getNodeAttributeNumberValue(node, 'expandedWidth', -1);
	                if (val > 0) {
	                    companion.expandedWidth = val;
	                }

	                val = helper.getNodeAttributeNumberValue(node, 'expandedHeight', -1);
	                if (val > 0) {
	                    companion.expandedHeight = val;
	                }

	                val = helper.getNodeAttributeValue(node, 'apiFramework');
	                if (val) {
	                    companion.apiFramework = val;
	                }

	                val = helper.getNodeAttributeValue(node, 'adSlotID');
	                if (val) {
	                    companion.adSlotID = val;
	                }

	                var pxratio = helper.getNodeAttributeNumberValue(node, 'pxratio', 1.0);
	                if (pxratio !== 1.0) {
	                	companion.pxratio = pxratio;
	                }
	                
	                val = helper.getNodeAttributeValue(node, 'required');
	                if (val) {
	                    companion.required = val;
	                }

	                val = helper.getSubNodeValue(node, 'AltText');
	                if (val) {
	                    companion.AltText = val;
	                }

	                val = helper.getSubNodeValue(node, 'AdParameters');
	                if (val) {
	                    companion.AdParameters = val;
	                }

	                var resource = helper.getSubNode(node, 'StaticResource');
	                if (resource) {
	                    val = helper.getNodeAttributeValue(resource, 'creativeType');
	                    if (val) {
	                        // validate capability
	                        var flashOnlyType = val === 'video/x-flv' || val === 'video/x-f4v' || val === 'video/f4v' || val === 'application/x-shockwave-flash';
	                        var isMobile = false;
	                        if (/Android|webOS|iPhone|iPad|BlackBerry|IEMobile|Windows Phone|Kindle|Silk|Opera Mini/i.test(navigator.userAgent)) {
	                            isMobile = true;
	                        }
	                        if (isMobile && flashOnlyType) {
	                            // ignore this companion
	                            continue;
	                        }

	                        var staticResource = {type: val};
	                        val = helper.getNodeValues(resource);
	                        if (val) {
	                            staticResource.src = val;
	                            companion.StaticResource = staticResource;
	                        }
	                    }
	                }

	                val = helper.getSubNodeWholeValue(node, 'IFrameResource');
	                if (val) {
	                    companion.IFrameResource = val;
	                }

	                val = helper.getSubNodeWholeValue(node, 'HTMLResource');
	                if (val) {
	                    companion.HTMLResource = val;
	                }

	                val = helper.getSubNodeValue(node, 'CompanionClickThrough');
	                if (val) {
	                    companion.CompanionClickThrough = val;
	                }

	                var j;
	                var trackingNode;
	                var url;
	                var clickTrackinEvents = helper.getSubNodes(node, 'CompanionClickTracking');
	                if (clickTrackinEvents) {
	                    companion.CompanionClickTracking = [];
	                    for (j = 0; j < clickTrackinEvents.length; j++) {
	                        trackingNode = clickTrackinEvents[j];
	                        url = helper.getNodeValues(trackingNode);
	                        if (url) {
	                            companion.CompanionClickTracking.push(url);
	                        }
	                    }
	                }

	                var trackinEvents = helper.getSubNodes(node, 'Tracking');
	                if (trackinEvents) {
	                    companion.TrackingEvents = [];
	                    for (j = 0; j < trackinEvents.length; j++) {
	                        trackingNode = trackinEvents[j];
	                        var event = helper.getNodeAttributeValue(trackingNode, 'event');
	                        url = helper.getNodeValues(trackingNode);
	                        if (event && url) {
	                            companion.TrackingEvents.push({eventType: event, url: url});
	                        }
	                    }
	                }

	                companionAdsDest.companions.push(companion);
	            }
	        }
	    },

	    mergeCompanions: function (companionAdsDest, companionAds) {
	        if (companionAdsDest.required === 'unknown') {
	            companionAdsDest.required = companionAds.required;
	        }
	        companionAdsDest.companions = companionAdsDest.companions.concat(companionAds.companions);
	    },

	    createCompanionNode: function (xmlDoc, data) {
	        var companion = xmlDoc.createElement('Companion');
	        var i;
	        var elem;
	        var attr;
	        var cdata;

	        var arrAttrs = ['id', 'width', 'height', 'assetWidth', 'assetHeight', 'expandedWidth', 'expandedHeight',
	            'apiFramework', 'adSlotID', 'required'];
	        for (i = 0; i < arrAttrs.length; i++) {
	            if (data.hasOwnProperty(arrAttrs[i])) {
	                attr = xmlDoc.createAttribute(arrAttrs[i]);
	                attr.value = data[arrAttrs[i]];
	                companion.setAttributeNode(attr);
	            }
	        }

	        if (data.hasOwnProperty('StaticResource')) {
	            elem = xmlDoc.createElement('StaticResource');
	            attr = xmlDoc.createAttribute('creativeType');
	            attr.value = data.StaticResource.type;
	            elem.setAttributeNode(attr);
	            cdata = xmlDoc.createCDATASection(data.StaticResource.src);
	            elem.appendChild(cdata);
	            companion.appendChild(elem);
	        }

	        var arrNodes = ['AdParameters', 'IFrameResource', 'HTMLResource', 'CompanionClickThrough'];
	        for (i = 0; i < arrNodes.length; i++) {
	            if (data.hasOwnProperty(arrNodes[i])) {
	                elem = xmlDoc.createElement(arrNodes[i]);
	                cdata = xmlDoc.createCDATASection(data[arrNodes[i]]);
	                elem.appendChild(cdata);
	                companion.appendChild(elem);
	            }
	        }

	        if (data.hasOwnProperty('AltText')) {
	            elem = xmlDoc.createElement('AltText');
	            try {
	                elem.innerHTML = data.AltText;
	            }
	            catch (ex) {
	                // IE 11 does not allow set innerHTML property
	                try {
	                    elem.textContent = data.AltText;
	                }
	                catch (ex2) {

	                }
	            }
	            companion.appendChild(elem);
	        }

	        if (data.hasOwnProperty('CompanionClickTracking')) {
	            for (i = 0; i < data.CompanionClickTracking.length; i++) {
	                var tracking = xmlDoc.createElement('CompanionClickTracking');
	                cdata = xmlDoc.createCDATASection(data.CompanionClickTracking[i]);
	                tracking.appendChild(cdata);
	                companion.appendChild(tracking);
	            }
	        }

	        if (data.hasOwnProperty('TrackingEvents')) {
	            elem = xmlDoc.createElement('TrackingEvents');
	            // enumerate trackers
	            for (i = 0; i < data.TrackingEvents.length; i++) {
	                var event = xmlDoc.createElement('Tracking');
	                attr = xmlDoc.createAttribute('event');
	                attr.value = data.TrackingEvents[i].eventType;
	                event.setAttributeNode(attr);
	                cdata = xmlDoc.createCDATASection(data.TrackingEvents[i].url);
	                event.appendChild(cdata);
	                elem.appendChild(event);
	            }
	            companion.appendChild(elem);
	        }

	        return companion;
	    }
	};

	module.exports = CompanionAds;

/***/ }),
/* 8 */
/***/ (function(module, exports) {

	var Icons = {

	    parse: function (IconsDest, IconsNode, helper) {
	        var nodes = helper.getSubNodes(IconsNode, 'Icon');
	        if (nodes) {
	            for (var i = 0; i < nodes.length; i++) {
	                var node = nodes[i];
	                var icon = {};

	                // required attributes
	                var width = helper.getNodeAttributeNumberValue(node, 'width', -1);
	                var height = helper.getNodeAttributeNumberValue(node, 'height', -1);
	                var program = helper.getNodeAttributeValue(node, 'program');
	                var xPosition = helper.getNodeAttributeValue(node, 'xPosition');
	                var yPosition = helper.getNodeAttributeValue(node, 'yPosition');
	                if (width <= 0 || height <= 0 || program.length === 0 || xPosition.length === 0 || yPosition.length === 0) {
	                    continue;
	                }
	                icon.width = width;
	                icon.height = height;
	                icon.program = program;
	                icon.xPosition = xPosition;
	                icon.yPosition = yPosition;

	                // optional attributes and subnodes
	                var val = helper.getNodeAttributeValue(node, 'apiFramework');
	                if (val) {
	                    icon.apiFramework = val;
	                }

	                var pxratio = helper.getNodeAttributeNumberValue(node, 'pxratio', 1.0);
	                if (pxratio !== 1.0) {
	                	icon.pxratio = pxratio;
	                }
	                
	                val = helper.getNodeAttributeValue(node, 'offset');
	                if (val) {
	                    // validate
	                    if (isNaN(Date.parse('January 1, 1970 ' + val))) {
	                        // invalid time format
	                        continue;
	                    }
	                    icon.offset = val;
	                }

	                val = helper.getNodeAttributeValue(node, 'duration');
	                if (val) {
	                    // validate
	                    if (isNaN(Date.parse('January 1, 1970 ' + val))) {
	                        // invalid time format
	                        continue;
	                    }
	                    icon.duration = val;
	                }

	                var resource = helper.getSubNode(node, 'StaticResource');
	                if (resource) {
	                    val = helper.getNodeAttributeValue(resource, 'creativeType');
	                    if (val) {
	                        // validate capability
	                        var flashOnlyType = val === 'video/x-flv' || val === 'video/x-f4v' || val === 'video/f4v' || val === 'application/x-shockwave-flash';
	                        var isMobile = false;
	                        if (/Android|webOS|iPhone|iPad|BlackBerry|IEMobile|Windows Phone|Kindle|Silk|Opera Mini/i.test(navigator.userAgent)) {
	                            isMobile = true;
	                        }
	                        if (isMobile && flashOnlyType) {
	                            // ignore this companion
	                            continue;
	                        }

	                        var staticResource = {type: val};
	                        val = helper.getNodeValues(resource);
	                        if (val) {
	                            staticResource.src = val;
	                            icon.StaticResource = staticResource;
	                        }
	                    }
	                }

	                val = helper.getSubNodeWholeValue(node, 'IFrameResource');
	                if (val) {
	                    icon.IFrameResource = val;
	                }

	                val = helper.getSubNodeWholeValue(node, 'HTMLResource');
	                if (val) {
	                    icon.HTMLResource = val;
	                }
	                
	                // icon must contain a resource
	                if (!icon.StaticResource && !icon.IFrameResource && !icon.HTMLResource) {
	                	continue;
	                }

	                var iconClicks = helper.getSubNode(node, 'IconClicks');
	                if (iconClicks) {
	                    val = helper.getSubNodeValue(node, 'IconClickThrough');
	                    if (val) {
	                        icon.IconClickThrough = val;
	                    }

	                    //IconClickTracking can be multiple by a VAST3.0 spec 2.4.3.5 Icon Clicks and Tracking
	                    val = helper.getSubNodes(iconClicks, 'IconClickTracking');
	                    if (val) {
	                        icon.IconClickTracking = [];
	                        for (var cntIconClick = 0; cntIconClick < val.length; cntIconClick++) {
	                            icon.IconClickTracking.push(helper.getNodeValues(val[cntIconClick]));
	                        }
	                    }
	                }

	                /* VAST3 XML schema explains IconViewTracking can be multiple like below
	                 <xs:element name="IconViewTracking" type="xs:anyURI" minOccurs="0" maxOccurs="unbounded">
	                 <xs:annotation>
	                 <xs:documentation>URLs to ping when icon is shown.</xs:documentation>
	                 </xs:annotation>
	                 </xs:element>
	                 */
	                var iconViewTracking = helper.getSubNodes(node, 'IconViewTracking');
	                if (iconViewTracking) {
	                    icon.IconViewTracking = [];
	                    for (var cntIconView = 0; cntIconView < iconViewTracking.length; cntIconView++) {
	                        icon.IconViewTracking.push(helper.getNodeValues(iconViewTracking[cntIconView]));
	                    }
	                }


	                var removeExistingProgram = function (IconsDest, program) {
	                    for (var cntIconDest = 0; cntIconDest < IconsDest.length; cntIconDest++) {
	                        if (IconsDest[cntIconDest].program === program) {
	                            IconsDest.splice(cntIconDest, 1);
	                        }
	                    }
	                };

	                //VIDLA-625 if same program exists in Icons node last one will be used.
	                removeExistingProgram(IconsDest, program);

	                IconsDest.push(icon);

	            }
	        }
	    },

	    createIconNode: function (xmlDoc, data) {
	        var icon = xmlDoc.createElement('Icon');
	        var i;
	        var elem;
	        var attr;
	        var cdata;

	        var arrAttrs = ['width', 'height', 'program', 'xPosition', 'yPosition', 'apiFramework', 'offset', 'duration'];
	        for (i = 0; i < arrAttrs.length; i++) {
	            if (data.hasOwnProperty(arrAttrs[i])) {
	                attr = xmlDoc.createAttribute(arrAttrs[i]);
	                attr.value = data[arrAttrs[i]];
	                icon.setAttributeNode(attr);
	            }
	        }

	        if (data.hasOwnProperty('StaticResource')) {
	            elem = xmlDoc.createElement('StaticResource');
	            attr = xmlDoc.createAttribute('creativeType');
	            attr.value = data.StaticResource.type;
	            elem.setAttributeNode(attr);
	            cdata = xmlDoc.createCDATASection(data.StaticResource.src);
	            elem.appendChild(cdata);
	            icon.appendChild(elem);
	        }

	        var arrNodes = ['IFrameResource', 'HTMLResource', 'IconViewTracking'];
	        for (i = 0; i < arrNodes.length; i++) {
	            if (data.hasOwnProperty(arrNodes[i])) {
	                elem = xmlDoc.createElement(arrNodes[i]);
	                cdata = xmlDoc.createCDATASection(data[arrNodes[i]]);
	                elem.appendChild(cdata);
	                icon.appendChild(elem);
	            }
	        }

	        if (data.hasOwnProperty('IconClickThrough') || data.hasOwnProperty('IconClickTracking')) {
	            var iconClicks = xmlDoc.createElement('IconClicks');
	            if (data.hasOwnProperty('IconClickThrough')) {
	                elem = xmlDoc.createElement('IconClickThrough');
	                cdata = xmlDoc.createCDATASection(data.IconClickThrough);
	                elem.appendChild(cdata);
	                iconClicks.appendChild(elem);
	            }
	            if (data.hasOwnProperty('IconClickTracking')) {
	                elem = xmlDoc.createElement('IconClickTracking');
	                cdata = xmlDoc.createCDATASection(data.IconClickTracking);
	                elem.appendChild(cdata);
	                iconClicks.appendChild(elem);
	            }
	            icon.appendChild(iconClicks);
	        }

	        return icon;
	    }
	};

	module.exports = Icons;

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright © 2012-2016 Faisal Salman <fyzlman@gmail.com>
	 * Dual licensed under GPLv2 & MIT
	 *
	 * User-Agent Parser module.
	 * @module UserAgentParser
	*/

	var prefixOfLog = 'UserAgentParser';
	var APN_Logger = __webpack_require__(3);

	APN_Logger.always(prefixOfLog, 'Version 0.0.1');

	/////////////////
	// Constructor
	////////////////
	var UserAgentParser = function (uastring, extensions) {

		//////////////
		// Constants
		/////////////
		var EMPTY       = '',
		    UNKNOWN     = '?',
		    FUNC_TYPE   = 'function',
		    OBJ_TYPE    = 'object',
		    STR_TYPE    = 'string',
		    MODEL       = 'model',
		    NAME        = 'name',
		    TYPE        = 'type',
		    VENDOR      = 'vendor',
		    VERSION     = 'version',
		    CONSOLE     = 'console',
		    MOBILE      = 'mobile',
		    TABLET      = 'tablet',
		    SMARTTV     = 'smarttv',
		    WEARABLE    = 'wearable';

		///////////
		// Helper
		//////////
		var util = {
		    extend : function (regexes, extensions) {
		        var margedRegexes = {};
		        for (var i in regexes) {
		            if (extensions[i] && extensions[i].length % 2 === 0) {
		                margedRegexes[i] = extensions[i].concat(regexes[i]);
		            } else {
		                margedRegexes[i] = regexes[i];
		            }
		        }
		        return margedRegexes;
		    },
		    has : function (str1, str2) {
		      if (typeof str1 === 'string') {
		        return str2.toLowerCase().indexOf(str1.toLowerCase()) !== -1;
		      } else {
		        return false;
		      }
		    },
		    lowerize : function (str) {
		        return str.toLowerCase();
		    },
		    major : function (version) {
		        return typeof(version) === STR_TYPE ? version.replace(/[^\d\.]/g,'').split('.')[0] : undefined;
		    },
		    trim : function (str) {
		      return str.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, '');
		    }
		};

	    ///////////////
	    // Map helper
	    //////////////
	    var mapper = {

	        rgx : function () {

	            var result = {}, i = 0, j, k, p, q, matches, match, args = arguments;

	            // construct object barebones
	            for (p = 0; p < args[1].length; p++) {
	                q = args[1][p];
	                result[typeof q === OBJ_TYPE ? q[0] : q] = undefined;
	            }

	            // loop through all regexes maps
	            while (i < args.length && !matches) {

	                var regex = args[i],       // even sequence (0,2,4,..)
	                    props = args[i + 1];   // odd sequence (1,3,5,..)
	                j = k = 0;

	                // try matching uastring with regexes
	                while (j < regex.length && !matches) {

	                    matches = regex[j++].exec(this.getUA());

	                    if (!!matches) {
	                        for (p = 0; p < props.length; p++) {
	                            match = matches[++k];
	                            q = props[p];
	                            // check if given property is actually array
	                            if (typeof q === OBJ_TYPE && q.length > 0) {
	                                if (q.length === 2) {
	                                    if (typeof q[1] === FUNC_TYPE) {
	                                        // assign modified match
	                                        result[q[0]] = q[1].call(this, match);
	                                    } else {
	                                        // assign given value, ignore regex match
	                                        result[q[0]] = q[1];
	                                    }
	                                } else if (q.length === 3) {
	                                    // check whether function or regex
	                                    if (typeof q[1] === FUNC_TYPE && !(q[1].exec && q[1].test)) {
	                                        // call function (usually string mapper)
	                                        result[q[0]] = match ? q[1].call(this, match, q[2]) : undefined;
	                                    } else {
	                                        // sanitize match using given regex
	                                        result[q[0]] = match ? match.replace(q[1], q[2]) : undefined;
	                                    }
	                                } else if (q.length === 4) {
	                                        result[q[0]] = match ? q[3].call(this, match.replace(q[1], q[2])) : undefined;
	                                }
	                            } else {
	                                result[q] = match ? match : undefined;
	                            }
	                        }
	                    }
	                }
	                i += 2;
	            }
	            return result;
	        },

	        str : function (str, map) {

	            for (var i in map) {
	                // check if array
	                if (typeof map[i] === OBJ_TYPE && map[i].length > 0) {
	                    for (var j = 0; j < map[i].length; j++) {
	                        if (util.has(map[i][j], str)) {
	                            return (i === UNKNOWN) ? undefined : i;
	                        }
	                    }
	                } else if (util.has(map[i], str)) {
	                    return (i === UNKNOWN) ? undefined : i;
	                }
	            }
	            return str;
	        }
	    };

	    ///////////////
	    // String map
	    //////////////
	    var maps = {

	        browser : {
	            oldsafari : {
	                version : {
	                    '1.0'   : '/8',
	                    '1.2'   : '/1',
	                    '1.3'   : '/3',
	                    '2.0'   : '/412',
	                    '2.0.2' : '/416',
	                    '2.0.3' : '/417',
	                    '2.0.4' : '/419',
	                    '?'     : '/'
	                }
	            }
	        },

	        device : {
	            amazon : {
	                model : {
	                    'Fire Phone' : ['SD', 'KF']
	                }
	            },
	            sprint : {
	                model : {
	                    'Evo Shift 4G' : '7373KT'
	                },
	                vendor : {
	                    'HTC'       : 'APA',
	                    'Sprint'    : 'Sprint'
	                }
	            }
	        },

	        os : {
	            windows : {
	                version : {
	                    'XP'        : ['NT 5.1', 'NT 5.2'],
	                    'Vista'     : 'NT 6.0',
	                    '7'         : 'NT 6.1',
	                    '8'         : 'NT 6.2',
	                    '8.1'       : 'NT 6.3',
	                    '10'        : ['NT 6.4', 'NT 10.0'],
	                    'RT'        : 'ARM'
	                }
	            }
	        }
	    };

	    //////////////
	    // Regex map
	    /////////////


	    var regexes = {

	        browser : [[

	            // Presto based
	            /(opera\smini)\/([\w\.-]+)/i,                                       // Opera Mini
	            /(opera\s[mobiletab]+).+version\/([\w\.-]+)/i,                      // Opera Mobi/Tablet
	            /(opera).+version\/([\w\.]+)/i,                                     // Opera > 9.80
	            /(opera)[\/\s]+([\w\.]+)/i                                          // Opera < 9.80
	            ], [NAME, VERSION], [

	            /(opios)[\/\s]+([\w\.]+)/i                                          // Opera mini on iphone >= 8.0
	            ], [[NAME, 'Opera Mini'], VERSION], [

	            /\s(opr)\/([\w\.]+)/i                                               // Opera Webkit
	            ], [[NAME, 'Opera'], VERSION], [

	            // Mixed
	            /(kindle)\/([\w\.]+)/i,                                             // Kindle
	            /(lunascape|maxthon|netfront|jasmine|blazer)[\/\s]?([\w\.]+)*/i,
	                                                                                // Lunascape/Maxthon/Netfront/Jasmine/Blazer

	            // Trident based
	            /(avant\s|iemobile|slim|baidu)(?:browser)?[\/\s]?([\w\.]*)/i,
	                                                                                // Avant/IEMobile/SlimBrowser/Baidu
	            /(?:ms|\()(ie)\s([\w\.]+)/i,                                        // Internet Explorer

	            // Webkit/KHTML based
	            /(rekonq)\/([\w\.]+)*/i,                                            // Rekonq
	            /(chromium|flock|rockmelt|midori|epiphany|silk|skyfire|ovibrowser|bolt|iron|vivaldi|iridium|phantomjs)\/([\w\.-]+)/i
	                                                                                // Chromium/Flock/RockMelt/Midori/Epiphany/Silk/Skyfire/Bolt/Iron/Iridium/PhantomJS
	            ], [NAME, VERSION], [

	            /(trident).+rv[:\s]([\w\.]+).+like\sgecko/i                         // IE11
	            ], [[NAME, 'IE'], VERSION], [

	            /(edge)\/((\d+)?[\w\.]+)/i                                          // Microsoft Edge
	            ], [NAME, VERSION], [

	            /(yabrowser)\/([\w\.]+)/i                                           // Yandex
	            ], [[NAME, 'Yandex'], VERSION], [

	            /(comodo_dragon)\/([\w\.]+)/i                                       // Comodo Dragon
	            ], [[NAME, /_/g, ' '], VERSION], [

	            /(micromessenger)\/([\w\.]+)/i                                      // WeChat
	            ], [[NAME, 'WeChat'], VERSION], [

	            /xiaomi\/miuibrowser\/([\w\.]+)/i                                   // MIUI Browser
	            ], [VERSION, [NAME, 'MIUI Browser']], [

	            /\swv\).+(chrome)\/([\w\.]+)/i                                      // Chrome WebView
	            ], [[NAME, /(.+)/, '$1 WebView'], VERSION], [

	            /android.+samsungbrowser\/([\w\.]+)/i,
	            /android.+version\/([\w\.]+)\s+(?:mobile\s?safari|safari)*/i        // Android Browser
	            ], [VERSION, [NAME, 'Android Browser']], [

	            /(chrome|omniweb|arora|[tizenoka]{5}\s?browser)\/v?([\w\.]+)/i,
	                                                                                // Chrome/OmniWeb/Arora/Tizen/Nokia
	            /(qqbrowser)[\/\s]?([\w\.]+)/i
	                                                                                // QQBrowser
	            ], [NAME, VERSION], [

	            /(uc\s?browser)[\/\s]?([\w\.]+)/i,
	            /ucweb.+(ucbrowser)[\/\s]?([\w\.]+)/i,
	            /juc.+(ucweb)[\/\s]?([\w\.]+)/i
	                                                                                // UCBrowser
	            ], [[NAME, 'UCBrowser'], VERSION], [

	            /(dolfin)\/([\w\.]+)/i                                              // Dolphin
	            ], [[NAME, 'Dolphin'], VERSION], [

	            /((?:android.+)crmo|crios)\/([\w\.]+)/i                             // Chrome for Android/iOS
	            ], [[NAME, 'Chrome'], VERSION], [

	            /;fbav\/([\w\.]+);/i                                                // Facebook App for iOS
	            ], [VERSION, [NAME, 'Facebook']], [

	            /fxios\/([\w\.-]+)/i                                                // Firefox for iOS
	            ], [VERSION, [NAME, 'Firefox']], [

	            /version\/([\w\.]+).+?mobile\/\w+\s(safari)/i                       // Mobile Safari
	            ], [VERSION, [NAME, 'Mobile Safari']], [

	            /version\/([\w\.]+).+?(mobile\s?safari|safari)/i                    // Safari & Safari Mobile
	            ], [VERSION, NAME], [

	            /webkit.+?(mobile\s?safari|safari)(\/[\w\.]+)/i                     // Safari < 3.0
	            ], [NAME, [VERSION, mapper.str, maps.browser.oldsafari.version]], [

	            /(konqueror)\/([\w\.]+)/i,                                          // Konqueror
	            /(webkit|khtml)\/([\w\.]+)/i
	            ], [NAME, VERSION], [

	            // Gecko based
	            /(navigator|netscape)\/([\w\.-]+)/i                                 // Netscape
	            ], [[NAME, 'Netscape'], VERSION], [
	            /(swiftfox)/i,                                                      // Swiftfox
	            /(icedragon|iceweasel|camino|chimera|fennec|maemo\sbrowser|minimo|conkeror)[\/\s]?([\w\.\+]+)/i,
	                                                                                // IceDragon/Iceweasel/Camino/Chimera/Fennec/Maemo/Minimo/Conkeror
	            /(firefox|seamonkey|k-meleon|icecat|iceape|firebird|phoenix)\/([\w\.-]+)/i,
	                                                                                // Firefox/SeaMonkey/K-Meleon/IceCat/IceApe/Firebird/Phoenix
	            /(mozilla)\/([\w\.]+).+rv\:.+gecko\/\d+/i,                          // Mozilla

	            // Other
	            /(polaris|lynx|dillo|icab|doris|amaya|w3m|netsurf|sleipnir)[\/\s]?([\w\.]+)/i,
	                                                                                // Polaris/Lynx/Dillo/iCab/Doris/Amaya/w3m/NetSurf/Sleipnir
	            /(links)\s\(([\w\.]+)/i,                                            // Links
	            /(gobrowser)\/?([\w\.]+)*/i,                                        // GoBrowser
	            /(ice\s?browser)\/v?([\w\._]+)/i,                                   // ICE Browser
	            /(mosaic)[\/\s]([\w\.]+)/i                                          // Mosaic
	            ], [NAME, VERSION]
	        ],

	        device : [[

	            /\((ipad|playbook);[\w\s\);-]+(rim|apple)/i                         // iPad/PlayBook
	            ], [MODEL, VENDOR, [TYPE, TABLET]], [

	            /applecoremedia\/[\w\.]+ \((ipad)/                                  // iPad
	            ], [MODEL, [VENDOR, 'Apple'], [TYPE, TABLET]], [

	            /(apple\s{0,1}tv)/i                                                 // Apple TV
	            ], [[MODEL, 'Apple TV'], [VENDOR, 'Apple']], [

	            /(archos)\s(gamepad2?)/i,                                           // Archos
	            /(hp).+(touchpad)/i,                                                // HP TouchPad
	            /(hp).+(tablet)/i,                                                  // HP Tablet
	            /(kindle)\/([\w\.]+)/i,                                             // Kindle
	            /\s(nook)[\w\s]+build\/(\w+)/i,                                     // Nook
	            /(dell)\s(strea[kpr\s\d]*[\dko])/i                                  // Dell Streak
	            ], [VENDOR, MODEL, [TYPE, TABLET]], [

	            /(kf[A-z]+)\sbuild\/[\w\.]+.*silk\//i                               // Kindle Fire HD
	            ], [MODEL, [VENDOR, 'Amazon'], [TYPE, TABLET]], [
	            /(sd|kf)[0349hijorstuw]+\sbuild\/[\w\.]+.*silk\//i                  // Fire Phone
	            ], [[MODEL, mapper.str, maps.device.amazon.model], [VENDOR, 'Amazon'], [TYPE, MOBILE]], [

	            /\((ip[honed|\s\w*]+);.+(apple)/i                                   // iPod/iPhone
	            ], [MODEL, VENDOR, [TYPE, MOBILE]], [
	            /\((ip[honed|\s\w*]+);/i                                            // iPod/iPhone
	            ], [MODEL, [VENDOR, 'Apple'], [TYPE, MOBILE]], [

	            /(blackberry)[\s-]?(\w+)/i,                                         // BlackBerry
	            /(blackberry|benq|palm(?=\-)|sonyericsson|acer|asus|dell|huawei|meizu|motorola|polytron)[\s_-]?([\w-]+)*/i,
	                                                                                // BenQ/Palm/Sony-Ericsson/Acer/Asus/Dell/Huawei/Meizu/Motorola/Polytron
	            /(hp)\s([\w\s]+\w)/i,                                               // HP iPAQ
	            /(asus)-?(\w+)/i                                                    // Asus
	            ], [VENDOR, MODEL, [TYPE, MOBILE]], [
	            /\(bb10;\s(\w+)/i                                                   // BlackBerry 10
	            ], [MODEL, [VENDOR, 'BlackBerry'], [TYPE, MOBILE]], [
	                                                                                // Asus Tablets
	            /android.+(transfo[prime\s]{4,10}\s\w+|eeepc|slider\s\w+|nexus 7|padfone)/i
	            ], [MODEL, [VENDOR, 'Asus'], [TYPE, TABLET]], [

	            /(sony)\s(tablet\s[ps])\sbuild\//i,                                  // Sony
	            /(sony)?(?:sgp.+)\sbuild\//i
	            ], [[VENDOR, 'Sony'], [MODEL, 'Xperia Tablet'], [TYPE, TABLET]], [
	            /(?:sony)?(?:(?:(?:c|d)\d{4})|(?:so[-l].+))\sbuild\//i
	            ], [[VENDOR, 'Sony'], [MODEL, 'Xperia Phone'], [TYPE, MOBILE]], [

	            /\s(ouya)\s/i,                                                      // Ouya
	            /(nintendo)\s([wids3u]+)/i                                          // Nintendo
	            ], [VENDOR, MODEL, [TYPE, CONSOLE]], [

	            /android.+;\s(shield)\sbuild/i                                      // Nvidia
	            ], [MODEL, [VENDOR, 'Nvidia'], [TYPE, CONSOLE]], [

	            /(playstation\s[34portablevi]+)/i                                   // Playstation
	            ], [MODEL, [VENDOR, 'Sony'], [TYPE, CONSOLE]], [

	            /(sprint\s(\w+))/i                                                  // Sprint Phones
	            ], [[VENDOR, mapper.str, maps.device.sprint.vendor], [MODEL, mapper.str, maps.device.sprint.model], [TYPE, MOBILE]], [

	            /(lenovo)\s?(S(?:5000|6000)+(?:[-][\w+]))/i                         // Lenovo tablets
	            ], [VENDOR, MODEL, [TYPE, TABLET]], [

	            /(htc)[;_\s-]+([\w\s]+(?=\))|\w+)*/i,                               // HTC
	            /(zte)-(\w+)*/i,                                                    // ZTE
	            /(alcatel|geeksphone|huawei|lenovo|nexian|panasonic|(?=;\s)sony)[_\s-]?([\w-]+)*/i
	                                                                                // Alcatel/GeeksPhone/Huawei/Lenovo/Nexian/Panasonic/Sony
	            ], [VENDOR, [MODEL, /_/g, ' '], [TYPE, MOBILE]], [

	            /(nexus\s9)/i                                                       // HTC Nexus 9
	            ], [MODEL, [VENDOR, 'HTC'], [TYPE, TABLET]], [

	            /(nexus\s6p)/i                                                      // Huawei Nexus 6P
	            ], [MODEL, [VENDOR, 'Huawei'], [TYPE, MOBILE]], [

	            /(microsoft);\s(lumia[\s\w]+)/i                                     // Microsoft Lumia
	            ], [VENDOR, MODEL, [TYPE, MOBILE]], [

	            /[\s\(;](xbox(?:\sone)?)[\s\);]/i                                   // Microsoft Xbox
	            ], [MODEL, [VENDOR, 'Microsoft'], [TYPE, CONSOLE]], [
	            /(kin\.[onetw]{3})/i                                                // Microsoft Kin
	            ], [[MODEL, /\./g, ' '], [VENDOR, 'Microsoft'], [TYPE, MOBILE]], [

	                                                                                // Motorola
	            /\s(milestone|droid(?:[2-4x]|\s(?:bionic|x2|pro|razr))?(:?\s4g)?)[\w\s]+build\//i,
	            /mot[\s-]?(\w+)*/i,
	            /(XT\d{3,4}) build\//i,
	            /(nexus\s6)/i
	            ], [MODEL, [VENDOR, 'Motorola'], [TYPE, MOBILE]], [
	            /android.+\s(mz60\d|xoom[\s2]{0,2})\sbuild\//i
	            ], [MODEL, [VENDOR, 'Motorola'], [TYPE, TABLET]], [

	            /hbbtv\/\d+\.\d+\.\d+\s+\([\w\s]*;\s*(\w[^;]*);([^;]*)/i            // HbbTV devices
	            ], [[VENDOR, util.trim], [MODEL, util.trim], [TYPE, SMARTTV]], [

	            /hbbtv.+maple;(\d+)/i
	            ], [[MODEL, /^/, 'SmartTV'], [VENDOR, 'Samsung'], [TYPE, SMARTTV]], [

	            /\(dtv[\);].+(aquos)/i                                              // Sharp
	            ], [MODEL, [VENDOR, 'Sharp'], [TYPE, SMARTTV]], [

	            /android.+((sch-i[89]0\d|shw-m380s|gt-p\d{4}|gt-n\d+|sgh-t8[56]9|nexus 10))/i,
	            /((SM-T\w+))/i
	            ], [[VENDOR, 'Samsung'], MODEL, [TYPE, TABLET]], [                  // Samsung
	            /smart-tv.+(samsung)/i
	            ], [VENDOR, [TYPE, SMARTTV], MODEL], [
	            /((s[cgp]h-\w+|gt-\w+|galaxy\snexus|sm-\w[\w\d]+))/i,
	            /(sam[sung]*)[\s-]*(\w+-?[\w-]*)*/i,
	            /sec-((sgh\w+))/i
	            ], [[VENDOR, 'Samsung'], MODEL, [TYPE, MOBILE]], [

	            /sie-(\w+)*/i                                                       // Siemens
	            ], [MODEL, [VENDOR, 'Siemens'], [TYPE, MOBILE]], [

	            /(maemo|nokia).*(n900|lumia\s\d+)/i,                                // Nokia
	            /(nokia)[\s_-]?([\w-]+)*/i
	            ], [[VENDOR, 'Nokia'], MODEL, [TYPE, MOBILE]], [

	            /android\s3\.[\s\w;-]{10}(a\d{3})/i                                 // Acer
	            ], [MODEL, [VENDOR, 'Acer'], [TYPE, TABLET]], [

	            /android\s3\.[\s\w;-]{10}(lg?)-([06cv9]{3,4})/i                     // LG Tablet
	            ], [[VENDOR, 'LG'], MODEL, [TYPE, TABLET]], [
	            /(lg) netcast\.tv/i                                                 // LG SmartTV
	            ], [VENDOR, MODEL, [TYPE, SMARTTV]], [
	            /(nexus\s[45])/i,                                                   // LG
	            /lg[e;\s\/-]+(\w+)*/i
	            ], [MODEL, [VENDOR, 'LG'], [TYPE, MOBILE]], [

	            /android.+(ideatab[a-z0-9\-\s]+)/i                                  // Lenovo
	            ], [MODEL, [VENDOR, 'Lenovo'], [TYPE, TABLET]], [

	            /linux;.+((jolla));/i                                               // Jolla
	            ], [VENDOR, MODEL, [TYPE, MOBILE]], [

	            /((pebble))app\/[\d\.]+\s/i                                         // Pebble
	            ], [VENDOR, MODEL, [TYPE, WEARABLE]], [

	            /android.+;\s(glass)\s\d/i                                          // Google Glass
	            ], [MODEL, [VENDOR, 'Google'], [TYPE, WEARABLE]], [

	            /android.+;\s(pixel c)\s/i                                          // Google Pixel C
	            ], [MODEL, [VENDOR, 'Google'], [TYPE, TABLET]], [

	            /android.+;\s(pixel xl|pixel)\s/i                                   // Google Pixel
	            ], [MODEL, [VENDOR, 'Google'], [TYPE, MOBILE]], [


	            /android.+(\w+)\s+build\/hm\1/i,                                    // Xiaomi Hongmi 'numeric' models
	            /android.+(hm[\s\-_]*note?[\s_]*(?:\d\w)?)\s+build/i,               // Xiaomi Hongmi
	            /android.+(mi[\s\-_]*(?:one|one[\s_]plus|note lte)?[\s_]*(?:\d\w)?)\s+build/i    // Xiaomi Mi
	            ], [[MODEL, /_/g, ' '], [VENDOR, 'Xiaomi'], [TYPE, MOBILE]], [

	            /android.+a000(1)\s+build/i                                         // OnePlus
	            ], [MODEL, [VENDOR, 'OnePlus'], [TYPE, MOBILE]], [

	            /\s(tablet)[;\/]/i,                                                 // Unidentifiable Tablet
	            /\s(mobile)(?:[;\/]|\ssafari)/i                                     // Unidentifiable Mobile
	            ], [[TYPE, util.lowerize], VENDOR, MODEL]
	        ],

	        engine : [[

	            /windows.+\sedge\/([\w\.]+)/i                                       // EdgeHTML
	            ], [VERSION, [NAME, 'EdgeHTML']], [

	            /(presto)\/([\w\.]+)/i,                                             // Presto
	            /(webkit|trident|netfront|netsurf|amaya|lynx|w3m)\/([\w\.]+)/i,     // WebKit/Trident/NetFront/NetSurf/Amaya/Lynx/w3m
	            /(khtml|tasman|links)[\/\s]\(?([\w\.]+)/i,                          // KHTML/Tasman/Links
	            /(icab)[\/\s]([23]\.[\d\.]+)/i                                      // iCab
	            ], [NAME, VERSION], [

	            /rv\:([\w\.]+).*(gecko)/i                                           // Gecko
	            ], [VERSION, NAME]
	        ],

	        os : [[

	            // Windows based
	            /microsoft\s(windows)\s(vista|xp)/i                                 // Windows (iTunes)
	            ], [NAME, VERSION], [
	            /(windows)\snt\s6\.2;\s(arm)/i,                                     // Windows RT
	            /(windows\sphone(?:\sos)*)[\s\/]?([\d\.\s]+\w)*/i,                  // Windows Phone
	            /(windows\smobile|windows)[\s\/]?([ntce\d\.\s]+\w)/i
	            ], [NAME, [VERSION, mapper.str, maps.os.windows.version]], [
	            /(win(?=3|9|n)|win\s9x\s)([nt\d\.]+)/i
	            ], [[NAME, 'Windows'], [VERSION, mapper.str, maps.os.windows.version]], [

	            // Mobile/Embedded OS
	            /\((bb)(10);/i                                                      // BlackBerry 10
	            ], [[NAME, 'BlackBerry'], VERSION], [
	            /(blackberry)\w*\/?([\w\.]+)*/i,                                    // Blackberry
	            /(tizen)[\/\s]([\w\.]+)/i,                                          // Tizen
	            /(android|webos|palm\sos|qnx|bada|rim\stablet\sos|meego|contiki)[\/\s-]?([\w\.]+)*/i,
	                                                                                // Android/WebOS/Palm/QNX/Bada/RIM/MeeGo/Contiki
	            /linux;.+(sailfish);/i                                              // Sailfish OS
	            ], [NAME, VERSION], [
	            /(symbian\s?os|symbos|s60(?=;))[\/\s-]?([\w\.]+)*/i                 // Symbian
	            ], [[NAME, 'Symbian'], VERSION], [
	            /\((series40);/i                                                    // Series 40
	            ], [NAME], [
	            /mozilla.+\(mobile;.+gecko.+firefox/i                               // Firefox OS
	            ], [[NAME, 'Firefox OS'], VERSION], [

	            // Console
	            /(nintendo|playstation)\s([wids34portablevu]+)/i,                   // Nintendo/Playstation

	            // GNU/Linux based
	            /(mint)[\/\s\(]?(\w+)*/i,                                           // Mint
	            /(mageia|vectorlinux)[;\s]/i,                                       // Mageia/VectorLinux
	            /(joli|[kxln]?ubuntu|debian|[open]*suse|gentoo|(?=\s)arch|slackware|fedora|mandriva|centos|pclinuxos|redhat|zenwalk|linpus)[\/\s-]?(?!chrom)([\w\.-]+)*/i,
	                                                                                // Joli/Ubuntu/Debian/SUSE/Gentoo/Arch/Slackware
	                                                                                // Fedora/Mandriva/CentOS/PCLinuxOS/RedHat/Zenwalk/Linpus
	            /(hurd|linux)\s?([\w\.]+)*/i,                                       // Hurd/Linux
	            /(gnu)\s?([\w\.]+)*/i                                               // GNU
	            ], [NAME, VERSION], [

	            /(cros)\s[\w]+\s([\w\.]+\w)/i                                       // Chromium OS
	            ], [[NAME, 'Chromium OS'], VERSION],[

	            // Solaris
	            /(sunos)\s?([\w\.]+\d)*/i                                           // Solaris
	            ], [[NAME, 'Solaris'], VERSION], [

	            // BSD based
	            /\s([frentopc-]{0,4}bsd|dragonfly)\s?([\w\.]+)*/i                   // FreeBSD/NetBSD/OpenBSD/PC-BSD/DragonFly
	            ], [NAME, VERSION],[

	            /(haiku)\s(\w+)/i                                                  // Haiku
	            ], [NAME, VERSION],[

	            /(ip[honead]+)(?:.*os\s([\w]+)*\slike\smac|;\sopera)/i              // iOS
	            ], [[NAME, 'iOS'], [VERSION, /_/g, '.']], [

	            /(mac\sos\sx)\s?([\w\s\.]+\w)*/i,
	            /(macintosh|mac(?=_powerpc)\s)/i                                    // Mac OS
	            ], [[NAME, 'Mac OS'], [VERSION, /_/g, '.']], [

	            // Other
	            /((?:open)?solaris)[\/\s-]?([\w\.]+)*/i,                            // Solaris
	            /(aix)\s((\d)(?=\.|\)|\s)[\w\.]*)*/i,                               // AIX
	            /(plan\s9|minix|beos|os\/2|amigaos|morphos|risc\sos|openvms)/i,
	                                                                                // Plan9/Minix/BeOS/OS2/AmigaOS/MorphOS/RISCOS/OpenVMS
	            /(unix)\s?([\w\.]+)*/i                                              // UNIX
	            ], [NAME, VERSION]
	        ]
	    };

		
	    if (!(this instanceof UserAgentParser)) {
	        return new UserAgentParser(uastring, extensions).getResult();
	    }

	    var ua = uastring || ((window && window.navigator && window.navigator.userAgent) ? window.navigator.userAgent : EMPTY);
	    var rgxmap = extensions ? util.extend(regexes, extensions) : regexes;

	    this.getBrowser = function () {
	        var browser = mapper.rgx.apply(this, rgxmap.browser);
	        browser.major = util.major(browser.version);
	        return browser;
	    };
	    this.getDevice = function () {
	        return mapper.rgx.apply(this, rgxmap.device);
	    };
	    this.getEngine = function () {
	        return mapper.rgx.apply(this, rgxmap.engine);
	    };
	    this.getOS = function () {
	        return mapper.rgx.apply(this, rgxmap.os);
	    };
	    this.getResult = function () {
	        return {
	            ua      : this.getUA(),
	            browser : this.getBrowser(),
	            engine  : this.getEngine(),
	            os      : this.getOS(),
	            device  : this.getDevice()
	        };
	    };
	    this.getUA = function () {
	        return ua;
	    };
	    return this;
	};

	module.exports = UserAgentParser;


/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

	var prefixOfLog = "CapabilityDetection";
	var APN_Logger = __webpack_require__(3);
	var debug = function (message) {
	    APN_Logger.debug(prefixOfLog,message);
	};


	/**
	 * Capability Detection module.
	 * @module CapabilityDetection
	 */

	function isMobile(){
	    if (/Android|webOS|iPhone|iPad|BlackBerry|IEMobile|Windows Phone|Kindle|Silk|Opera Mini/i.test(navigator.userAgent)) {
	        return true;
	    }
	    return false;
	}

	function hasFlashPlugin(){
	    var flash_installed = typeof navigator.plugins !== 'undefined' && typeof navigator.plugins['Shockwave Flash'] === 'object';
	    if (!flash_installed) {
	        flash_installed = window.ActiveXObject && (new ActiveXObject('ShockwaveFlash.ShockwaveFlash'));
	    }
	    return flash_installed;
	}

	function isFlashOnlyType(type) {
	    return type === 'video/x-flv' || type === 'video/x-f4v' || type === 'video/f4v' ||
	        type === 'application/x-shockwave-flash';
	}

	function isHtml5VpaidType(type) {
	    return type === 'application/javascript' || type === 'application/x-javascript';
	}

	function isIphone() {
	    var isFlag = (/iphone/i.test(navigator.userAgent.toLowerCase()));
	    return isFlag;
	}

	function isIos() {
	    var isFlag = isIphone() || (/ipad/i.test(navigator.userAgent.toLowerCase()));
	    return isFlag;
	}

	function isAndroid() {
	    return (/android/i.test(navigator.userAgent.toLowerCase()));
	}

	module.exports = {
	    /** Checks for Flash support.
	     * @returns {boolean} True is flash is supported, false otherwise.
	     */
	    supportsFlash: function() {
	        return !isMobile() && hasFlashPlugin();
	    },

	    /** Detects browser on mobile devices.
	     * @returns {boolean} True is browser on mobile, false otherwise.
	     */
	    isBrowserOnMobile: function() {
	        return isMobile();
	    },

	    /** Detects browser.
	     * @returns {string} browser name.
	     */
	    getBrowserName: function() {
	        var ua = navigator.userAgent,
	            tem,
	            M = ua.match(/(opera|chrome|safari|firefox|msie|trident(?=\/))\/?\s*(\d+)/i) || [];

	        if (/trident/i.test(M[1])) {
	            tem =/\brv[ :]+(\d+)/g.exec(ua) || [];
	            return 'IE';
	        }
	        if (M[1] === 'Chrome') {
	            tem = ua.match(/\bOPR\/(\d+)/);
	            if (tem !== null) {
	                return 'Opera';
	            }
	        }
	        M = M[2] ? [M[1], M[2]] : [navigator.appName, navigator.appVersion, '-?'];
	        if ((tem = ua.match(/version\/(\d+)/i)) !== null) {
	            M.splice(1,1,tem[1]);
	        }
	        return M[0];
	    },

	    /** Detects is video type playable for particular browser.
	     * @param {string} mimeType - media type from VAST xml.
	     * @param {string} codec - codec from VAST xml if present.
	     * @returns {boolean} True if playable, false otherwise.
	     */
	    canPlay: function(mimeType, codec) {

	        //VIDLA-139
	        //Edge browser can have error when calling canPlayType method in video element - this is suggested safe way for all browsers reffered by https://developer.microsoft.com/en-us/microsoft-edge/platform/documentation/dev-guide/html5/video/
	        var wrapperOfCanPlayType = function(vid, type, codec) {
	            debug("invoke canPlayType with video(" + vid + ") and type(" + type + ") and codec(" + codec + ")");
	            if (vid && vid.canPlayType) {
	                var result = vid.canPlayType(type + ';codecs="' + codec + '"');
	                debug("result : " + result);
	                return result;
	            } else {
	                debug("result : failed to invoke canPlayType with " + vid);
	                return "";
	            }
	        };

	        var alternativeCodec = null;
	        if (isFlashOnlyType(mimeType.toLowerCase())) {
	            return !isMobile() && hasFlashPlugin();
	        }
	        else if (isHtml5VpaidType(mimeType.toLowerCase())) {
	            return true;		// always allow to play html5 vpaid
	        }
	        else {
	            var type = mimeType.toLowerCase();
	            if (!codec || codec === '') {
	                if (type === 'video/mp4') {
	                    codec = 'avc1.42E01E,mp4a.40.2';
	                    //only test with video codec for alternativeCodec
	                    alternativeCodec = 'avc1.42E01E';//iphone7 + iOS10GM will return "maybe" for the "mp4a.40.2", so alternative codecs should be tested more to provide extra opportunity to be choosen by canPlayType
	                    //vid.canPlayType("video/mp4;codecs=avc1.42E01E,mp4a.40.2");
	                    //iphone 7 + iOS10GM : maybe
	                    //iphone 6 + iOS10GM : probably
	                }
	                else if (type === 'video/webm') {
	                    codec = 'vp8,vorbis';
	                }
	                else if (type === 'video/ogg') {
	                    codec = 'theora,vorbis';
	                }
	                else {
	                    return false;	// unknown video mime type
	                }
	            }
	            var vid = document.createElement('video');
	            //var response = vid.canPlayType(type + ';codecs="' + codec + '"');//VIDLA-139
	            var response = wrapperOfCanPlayType(vid, type, codec);



	            if (response === 'probably') {
	                return true;
	            }
	            if (response === 'maybe') {
	                if (type === 'video/webm') {
	                    return true;
	                }
	                //if alternativeCodec exists, do a test once again to give additoinal opportunity to be tested
	                //if (alternativeCodec && vid.canPlayType(type + ';codecs="' + alternativeCodec + '"') === "probably") {
	                //VIDLA-139
	                if (alternativeCodec && wrapperOfCanPlayType(vid, type, alternativeCodec) === "probably") {
	                    return true;
	                }
	            }
	            return false;
	        }
	    },

	    /** Returns information about device where ad is running.
	     * @returns {string} One of the following: desktop-flash, desktop-no-flash, mobile-Android, mobile-iOS, mobile-unknown.
	     */
	    getPlatformType: function() {
	        if (isMobile()) {
	            if (isAndroid()) {
	                return 'mobile-Android';
	            }
	            if (isIos()) {
	                return 'mobile-iOS';
	            }
	            return 'mobile-unknown';
	        }
	        else {
	            if (hasFlashPlugin()) {
	                return 'desktop-flash';
	            }
	            return 'desktop-no-flash';
	        }
	    }
	};


/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * URL Loader module.
	 * @module UrlLoader
	 */



	var _logger = __webpack_require__(3);

	function ajaxLoad(url, data, callback, timeout, options, command) {

	    var httpRequest;
	    var startTime = 0;
	    var duration = 0;
	    var calcDuration = false;
	    var logger = __webpack_require__(12);
	    var cacheManager = __webpack_require__(13);

	    var useWithCredentials = true;
	    
		var debug = function(message) {
		    logger.logDebug(message, 'URL Loader');
		};
	    
	    if (options &&  typeof options.withCredentials !== 'undefined') {
	        useWithCredentials = options.withCredentials;
	    } 

	    if (window.XMLHttpRequest) { // Mozilla, Safari, ...
	        httpRequest = new XMLHttpRequest();
	    } else if (window.ActiveXObject) { // IE
	        try {
	            httpRequest = new ActiveXObject('Msxml2.XMLHTTP');
	        } catch (msxmlErr) {
	            try {
	                httpRequest = new ActiveXObject('Microsoft.XMLHTTP');
	            } catch (msErr) {}
	        }
	    }


	    if (!httpRequest) {
	        if (callback) {
	            callback.call(this, '406', ''); // request is not acceptable
	        }
	        return;
	    }
	    
	    httpRequest.onreadystatechange = function() {
	        if (httpRequest.readyState === 4) {

	            if (httpRequest.status === 200) {
	                if (callback) {
	                    callback.call(this, undefined, httpRequest.responseText, httpRequest);
	                }
	                debug('duration: ' + duration + ', response length: ' + httpRequest.responseText.length);
	                if (calcDuration && httpRequest.responseText && httpRequest.responseText.length > 2048) {
	                	var nBandWidth = (httpRequest.responseText.length * 8.0 * 1000.0) / (Math.max(1.0, duration) * 1024.0);
	            		var intBandwidth = parseInt(nBandWidth.toString());
	                    debug('Bandwidth: ' + intBandwidth);
	                	try {
	                		cacheManager.setGenericData('anxBandwidth', intBandwidth);
	                		//localStorage.setItem('anxBandwidth', intBandwidth);
	                	}
	                	catch(ex) {
	                	}
	                }
	            } else {
	                if (httpRequest.status >= 400 && httpRequest.status < 600) {
	                    if (callback) {
	                        callback.call(this, httpRequest.status, '', httpRequest);
	                    }
	                }
	            }

	        }
	        else if (httpRequest.readyState === 2) {
	        	startTime = (new Date()).getTime();
	        }
	        else if (httpRequest.readyState === 3) {
	        	if (startTime > 0) {
	        		calcDuration = true;
	        		duration = (new Date()).getTime() - startTime;
	        	}
	        }
	    };

	    httpRequest.onerror = function() {
	        //if there is an error, it might be becase we are using withCredentials
	        //let's try one more time without that flag set.
	        //this won't send cookies, but it's better than no ad at all
	        if(useWithCredentials) {
	            var newOpts = options ? options : {};
	            newOpts.withCredentials = false;
	            ajaxLoad(url, data, callback, timeout, newOpts, command);
	        } else {
	            if (callback) {
	                var errorStatus = httpRequest.status === 0 ? '404' : httpRequest.status.toString();
	                callback.call(this, errorStatus, '', httpRequest);
	            }
	        }
	    };


	    httpRequest.ontimeout = function() {
	        //_logger.log('Server Timeout');
	        if (callback) {
	            callback.call(this, 'Timeout', '', httpRequest);
	        }
	    };

	    httpRequest.open(command, url);
	    if (timeout) {
	        httpRequest.timeout = timeout;
	    }
	    httpRequest.withCredentials = useWithCredentials;
	    startTime = 0;
	    if (command === 'POST') {
	    	httpRequest.send(data);
	    }
	    else {
	        httpRequest.send();
	    }
	}

	function createTrackingPixel(url, eventName) {
	    _logger.log('Logging Event: ' + eventName + ' at url:' + url);
	    new Image(1, 1).src = url;

	}



	module.exports = {
		    /** Load a URL.
		     * @param {string} url - Target URL to load. 
		     * @param {Function} callback - Function to call back once loading has either completed or encountered an error.
		     * @param {number} timeout - Timeout (in ms) to use for this URL Load.
		     */
		    load: function(url, callback, timeout) {
		        ajaxLoad(url, null, callback, timeout, {withCredentials:true}, 'GET');
		    },

		    /** Load a URL.
		     * @param {string} url - Target URL to load. 
		     * @param {string} data - request data 
		     * @param {Function} callback - Function to call back once loading has either completed or encountered an error.
		     * @param {number} timeout - Timeout (in ms) to use for this URL Load.
		     */
		    loadPost: function(url, data, callback, timeout) {
		        ajaxLoad(url, data, callback, timeout, {withCredentials:true}, 'POST');
		    },


	    /** Track Pixel.
	     * @param {String} url - Url of traking pixel to track. 
	     * @param {String} eventName - Name of event being tracked.
	     */
	    trackPixel: function(url, eventName) {
	        createTrackingPixel(url, eventName);
	    }
	};


/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * General Utilities module.
	 * @module GeneralUtilities
	 */

	var _logger = __webpack_require__(3);


	//////////////////////////////////////////////////////////////////////
	// CONSTANTS
	var MAX_OBJ_TO_STRING_RECURSION = 9;




	//////////////////////////////////////////////////////////////////////
	// VARIABLES


	//////////////////////////////////////////////////////////////////////
	// FUNCTIONS
	function getXmlResponseFromXhrObject(responseObj) {
	    if (responseObj) {
	        //if the response has parsed XML, trace it as an XML object
	        //otherwise, trace it as a string
	        if (responseObj.responseXML) {
	            return responseObj.responseXML;
	        } else {
	            return responseObj.responseText;
	        }
	    }
	}

	//////////////////////////////////////////////////////////////////////
	// EXPORTS
	module.exports = {
	    /**
	     * @deprecated - use @appnexus/videoads-util-logging
	     * Writes an entry to the console log if the current debug level is set to "Error", "Warn" or Debug"
	     * @param (string) message = text to be written to the log
	     * @param (string) source = optional string which identifies the source of the debug statement
	     *      - if present, then it will be prepended to front of the string
	     *      - example 1:  debug("hello") ==> <timestamp> hello
	     *      - example 2:  debug("hello", "TM") ==> <timestamp> TM>hello
	     */
	    debug: function() {
	        _logger.handleLogDebugLegacySupport.apply(this, arguments);

	    },

	    /**
	     * @deprecated - use @appnexus/videoads-util-logging
	     * Writes an entry to the console log if the current debug level is set to "Error", "Warn" or Debug"
	     * @param (string) message = text to be written to the log
	     * @param (string) source = optional string which identifies the source of the debug statement
	     *      - if present, then it will be prepended to front of the string
	     *      - example 1:  debug("hello") ==> <timestamp> hello
	     * 
	     */
	    logDebug: function() {
	        _logger.handleLogDebugLegacySupport.apply(this, arguments);

	    },

	    /**
	     * @deprecated - use @appnexus/videoads-util-logging
	     * Sets debug level for logger
	     * @param (string) level = Debug level to use
	     */
	    setDebugLevel: function(level) {
	        _logger.setDebugLevel(level);
	    },

	    /**
	     * Checks to see if a string or an array is not empty:
	     *  @param (object) arg = string or array which is being evaluated
	     *  @returns (boolean)
	     *      - true = arg is defined and the length > 0
	     *      - false = arg is null, undefined or has a length of zero
	     */
	    isNotEmpty: function(arg) {
	        var answer = false;
	        if (arg !== null && arg) {
	            answer = (arg.length > 0);
	        }

	        return answer;
	    },

	    /**
	     * @deprecated - since we now have the abilility to directly pass objects to our debug statements, we no longer need this
	     * returns a string version of an object
	     * if the value of a field is itself an object, then will stringify that object as well
	     */
	    objectToString: function(obj, recursionCount) {
	        /*
	                try{
	                    return JSON.stringify(obj);
	                }catch(ex){
	                    return "null"
	                }
	             */
	        var answer = "null";

	        //set default recurisonCount if it's not specified
	        recursionCount = typeof recursionCount !== 'undefined' ? recursionCount : 0;

	        if (obj !== null) {
	            answer = "OBJ[";
	            var props = "";
	            for (var key in obj) {
	                var val = obj[key];
	                if (typeof val === 'object') {
	                    recursionCount++;
	                    if (recursionCount < MAX_OBJ_TO_STRING_RECURSION) {
	                        try {
	                            val = this.objectToString(val);
	                        } catch (ex) {
	                            val = "err:" + ex;
	                        }
	                    } else {
	                        val = "err: max recursion hit";
	                    }
	                }
	                if (props.length > 0) {
	                    props += ",";
	                }
	                props += (key + "=" + val);
	            }
	            answer += props;
	            answer += "]";
	        }


	        return answer;

	    },

	    /**
	     *  Generates a alphanueric random string, up to 16 characters long containing the set [0-9,a-z].
	     *  Note: It is not guaranteed that this will start with a letter.
	     *  Note: These are not UUIDs/GUIDs, do not use as such in critcial situaitons.
	     *  Note: This is not guaranteed to be crypogtaphically secure.
	     *  @param (object) arg = string or array which is being evaluated
	     *  @returns (String)
	     *      - random character string
	     */
	    getRandomString: function() {
	        return Math.random().toString(36).substring(2);
	    },

	    /**
	     *  Trace a XML response in a XHR object at the "info" trace level (if enabled)
	     *  @param (Object) responseObjects = Single XHR Response object, or Array of XHR Response Objects to trace.
	     *  @param (String) tracePrefix = Text to print as part of trace statement.
	     *
	     */
	    traceVastFromXhr: function(responseObjects, tracePrefix) {
	        try {
	            if (responseObjects) {
	                //if we are passed an array, treat each item in array as a XHR Response
	                if (Array.isArray(responseObjects)) {
	                    if (responseObjects.length > 0) {
	                        // var responsesToTrace = [];
	                        var xmlUrlLoadingChain = [];

	                        //parse URL and payload out of each object
	                        for (var curResponseArrayPos in responseObjects) {
	                            // var curResponsePayload = {};
	                            // curResponsePayload.url = responseObjects[curResponseArrayPos].responseURL;
	                            // curResponsePayload.payloadObj = getXmlResponseFromXhrObject(responseObjects[curResponseArrayPos]);
	                            // responsesToTrace.push(curResponsePayload);

	                            xmlUrlLoadingChain.push(responseObjects[curResponseArrayPos].responseURL);
	                        }

	                        var finalXhrObject = responseObjects[responseObjects.length - 1];
	                        if (finalXhrObject) {
	                            var finalXmlTag = getXmlResponseFromXhrObject(finalXhrObject);
	                            var finalXmlTagUrl = finalXhrObject.responseURL;

	                            _logger.info(tracePrefix, "Tag load chain:", xmlUrlLoadingChain, "\n",
	                                "Final Tag URL: ", finalXmlTagUrl, "\n", "Final Tag: ", finalXmlTag);
	                        }
	                    }
	                } else {
	                    //if we didn't get an array, treat responseObjects as a single XHR responsw
	                    var responsePayloadToTrace = getXmlResponseFromXhrObject(responseObjects);
	                    _logger.info(tracePrefix, "Tag URL:", responseObjects.responseURL, "\n", "Tag:", responsePayloadToTrace);

	                }
	            } 
	        }catch (e) {}
	    }



	};


/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Cache Manager module.
	 * @module CacheManager
	 */

	var utils = __webpack_require__(12);


	var prefix = "Cache Manager";

	//////////////////////////////////////////////////////////////////////
	// CONSTANTS
	var TTL_DEFAULT_MIN = 2 * 20; // 2 hours expressed in minutes
	var MSEC_PER_MINUTE = 60 * 1000;
	var TTL_DEFAULT_MSEC = TTL_DEFAULT_MIN * MSEC_PER_MINUTE; // expressed in seconds

	//////////////////////////////////////////////////////////////////////
	// VARIABLES
	var _ttlMsec = TTL_DEFAULT_MSEC;

	var _genericDataStotagePrefix = "___appnexus_video_cachemanager_generic_data___";
	var adTokenStorageKey = "___appnexus_video_cachemanager_ad_token___";

	var backupInMemoryStorageObj = {};

	//storage types:
	//0 - localStorage
	//1 - cookie
	//2 - in memory
	var storageTypeToUse;

	if (isLocalStorageSupported()) {
	    storageTypeToUse = 0;
	} else {
	    if (isCookieStorageSupported()) {
	        storageTypeToUse = 1;
	    } else {
	        storageTypeToUse = 2;
	    }

	}

	utils.debug("Using Cache Method " + storageTypeToUse, prefix);

	//docCookies library from https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie
	var docCookies = {
	    getItem: function(sKey) {
	        if (!sKey) {
	            return null;
	        }
	        return decodeURIComponent(document.cookie.replace(new RegExp("(?:(?:^|.*;)\\s*" + encodeURIComponent(sKey).replace(/[\-\.\+\*]/g, "\\$&") + "\\s*\\=\\s*([^;]*).*$)|^.*$"), "$1")) || null;
	    },
	    setItem: function(sKey, sValue, vEnd, sPath, sDomain, bSecure) {
	        if (!sKey || /^(?:expires|max\-age|path|domain|secure)$/i.test(sKey)) {
	            return false;
	        }
	        var sExpires = "";
	        if (vEnd) {
	            switch (vEnd.constructor) {
	                case Number:
	                    sExpires = vEnd === Infinity ? "; expires=Fri, 31 Dec 9999 23:59:59 GMT" : "; max-age=" + vEnd;
	                    break;
	                case String:
	                    sExpires = "; expires=" + vEnd;
	                    break;
	                case Date:
	                    sExpires = "; expires=" + vEnd.toUTCString();
	                    break;
	            }
	        }
	        document.cookie = encodeURIComponent(sKey) + "=" + encodeURIComponent(sValue) + sExpires + (sDomain ? "; domain=" + sDomain : "") + (sPath ? "; path=" + sPath : "") + (bSecure ? "; secure" : "");
	        return true;
	    },
	    removeItem: function(sKey, sPath, sDomain) {
	        if (!this.hasItem(sKey)) {
	            return false;
	        }
	        document.cookie = encodeURIComponent(sKey) + "=; expires=Thu, 01 Jan 1970 00:00:00 GMT" + (sDomain ? "; domain=" + sDomain : "") + (sPath ? "; path=" + sPath : "");
	        return true;
	    },
	    hasItem: function(sKey) {
	        if (!sKey) {
	            return false;
	        }
	        return (new RegExp("(?:^|;\\s*)" + encodeURIComponent(sKey).replace(/[\-\.\+\*]/g, "\\$&") + "\\s*\\=")).test(document.cookie);
	    },
	    keys: function() {
	        var aKeys = document.cookie.replace(/((?:^|\s*;)[^\=]+)(?=;|$)|^\s*|\s*(?:\=[^;]*)?(?:\1|$)/g, "").split(/\s*(?:\=[^;]*)?;\s*/);
	        for (var nLen = aKeys.length, nIdx = 0; nIdx < nLen; nIdx++) {
	            aKeys[nIdx] = decodeURIComponent(aKeys[nIdx]);
	        }
	        return aKeys;
	    }
	};

	//write object to whatever storage method we are using, with specified key
	function writeToStorage(key, obj, dontExpire) {
	    switch (storageTypeToUse) {
	        case 0:
	            writeToLocalStorage(key, obj);
	            break;
	        case 1:
	            writeToCookieStorage(key, obj, dontExpire);
	            break;
	        default:
	        case 2:
	            writeToInMemoryStorage(key, obj);
	            break;
	    }
	}

	//get a object from the storage method we are using, that has the specified key
	function getFromStorage(key) {
	    switch (storageTypeToUse) {
	        case 0:
	            return getFromLocalStorage(key);
	        case 1:
	            return getFromCookieStorage(key);
	        default:
	        case 2:
	            return getFromInMemoryStorage(key);
	    }

	}

	//delete an object in the storaege method we are using, 
	function deleteFromStorage(key) {
	    switch (storageTypeToUse) {
	        case 0:
	            deleteFromLocalStorage(key);
	            break;
	        case 1:
	            deleteFromCookieStorage(key);
	            break;
	        default:
	        case 2:
	            deleteFromInMemoryStorage(key);
	            break;
	    }
	}

	function writeToLocalStorage(key, obj) {
	    if (localStorage) {
	        localStorage.setItem(key, obj);
	    }
	}

	function getFromLocalStorage(key) {
	    if (localStorage) {
	        return localStorage.getItem(key);
	    }
	}

	function deleteFromLocalStorage(key) {
	    if (localStorage) {
	        localStorage.removeItem(key);
	    }
	}

	function writeToCookieStorage(key, obj, dontExpire) {
	    docCookies.setItem(key, obj, (dontExpire ? Infinity : new Date((Date.now() + _ttlMsec)).toUTCString()));
	}

	function getFromCookieStorage(key) {
	    return docCookies.getItem(key);
	}

	function deleteFromCookieStorage(key) {
	    docCookies.removeItem(key);
	}

	function writeToInMemoryStorage(key, obj) {
	    if (backupInMemoryStorageObj) {
	        backupInMemoryStorageObj[key] = obj;
	    }
	}

	function getFromInMemoryStorage(key) {
	    if (backupInMemoryStorageObj) {
	        return backupInMemoryStorageObj[key];
	    }
	}

	function deleteFromInMemoryStorage(key) {
	    if (backupInMemoryStorageObj) {
	        delete backupInMemoryStorageObj[key];
	    }
	}

	//return true if localStorage is supported, false otherwise
	function isLocalStorageSupported() {

	    //if the browser is blocking 3rd party storage, accessing localStorage might throw an exception (VID-2089)
	    try {
	        if (localStorage) {
	            var testValue = "apntestls" + Math.random();
	            try {
	                //try writing and reading something
	                localStorage.setItem(testValue, testValue);
	                localStorage.removeItem(testValue);
	                return true;
	            } catch (e) {}
	        }
	    } catch (e) {}

	    return false;
	}


	//return true if localStorage is supported, false otherwise
	function isCookieStorageSupported() {
	    try {
	        if (document && document.cookie) {
	            var testValue = "apntestcookie" + Math.random();
	            try {
	                docCookies.setItem(testValue, testValue, Infinity);
	                var cookieWorked = docCookies.hasItem(testValue) && (docCookies.getItem(testValue) === testValue);
	                docCookies.removeItem(testValue);
	                return cookieWorked;
	            } catch (e) {}
	        }
	    } catch (e) {}

	    return false;
	}

	// caches the adObject - this will overwrite any existing cached ad
	// the cache will also be timestamp with the current time in milliseconds
	// for calculating time to live
	function addAdToCache(adObject, adId) {
	    var cacheObject = {};
	    cacheObject.timestamp = new Date().getTime();
	    cacheObject.ad = adObject;

	    try {
	        writeToStorage(adId, JSON.stringify(cacheObject));
	    } catch (e) {

	    }
	}

	// returns the ad stored in the cache if the cache has not expired
	// returns null if the cache has expired (based on the configured time-to-live) 
	// OR if there is no ad in the cache
	// NOTE:  It is not clear yet what to do with placement id - ignore it for now
	function getCachedAd(adId) {
	    var ts = new Date().getTime();

	    var retrievedCacheItem;

	    try {
	        var itemFromCache = getFromStorage(adId);
	        retrievedCacheItem = (itemFromCache && JSON.parse(itemFromCache));
	        // clear the cache, setting it back to default (or empty)
	        deleteFromStorage(adId);
	    } catch (e) {

	    }

	    // check to see if the ad cache exists and if the cache has not expired
	    if (retrievedCacheItem && retrievedCacheItem.timestamp && retrievedCacheItem.timestamp > 0) {
	        var cacheAge = ts - retrievedCacheItem.timestamp;
	        //if we have expired, return nothing
	        if (cacheAge <= _ttlMsec) {
	            return retrievedCacheItem.ad;
	        }
	    }

	    return null;
	}

	// clear the ad cache by creating a default ad cache object
	//NOTE:  It is not clear yet what to do with placement id - ignore it for now
	function clearAdCache(adId) {
	    try {
	        deleteFromStorage(adId);
	    } catch (e) {

	    }
	}

	// converts the time-to-live argument from minutes to milliseconds
	// to make it easier to compare timestamps
	function setTTL(ttlMinutes) {
	    _ttlMsec = ttlMinutes * MSEC_PER_MINUTE;
	}

	// gets the current token from the cache
	function getAdToken() {
	    var tokenToReturn;
	    var tokenFromCache;
	    tokenFromCache = getFromStorage(adTokenStorageKey);

	    if (tokenFromCache) {
	        tokenToReturn = parseInt(tokenFromCache);
	    } else {
	        //no token found, use default
	        tokenToReturn = 0;
	    }

	    //store new token in localStorage or local memory
	    writeToStorage(adTokenStorageKey, (tokenToReturn += 1), true);


	    return tokenToReturn;
	}

	function prependAppnexusIdToKey(incomingKey) {
	    return "apn_" + incomingKey;
	}

	module.exports = {

	    /**
	     * Set generic data in cache
	     * @param (string) key = key under which to store data
	     * @param (object) value = value to store.
	     * @return (boolean) true if value was succesfully stored, false otherwise
	     */
	    setGenericData: function(key, value) {
	        if (typeof key !== "undefined" && typeof value !== "undefined") {
	            key = _genericDataStotagePrefix + key;
	            try {
	                writeToStorage(key, value);
	                return true;
	            } catch (e) {

	            }
	        }
	        return false;
	    },

	    /**
	     * Get generic data from cache
	     * @param (string) key = key to retrive from data
	     * @return (object) object contaninig data from cache with given key, undefined if key not found.
	     */
	    getGenericData: function(key) {
	        if (typeof key !== "undefined") {
	            key = _genericDataStotagePrefix + key;
	            return getFromStorage(key);
	        }
	    },

	    /**
	     * Delete generic data from cache
	     * @param (string) key = key to delete from cache
	     */
	    deleteGenericData: function(key) {
	        if (typeof key !== "undefined") {
	            key = _genericDataStotagePrefix + key;
	            deleteFromStorage(key);
	        }
	    },

	    /**
	     * Force usage of a specifc cache storage method, This is an optional function, if it is not called we will attempt to use
	     * localStorage, with a in-memory object as backup. 0= use localStorage.  1 = use cookie.  2 = use in-memory storage
	     */
	    forceStorageMethod: function(storageType) {
	        storageTypeToUse = storageType;
	        utils.debug("Forced usage of cache method " + storageTypeToUse, prefix);
	    },

	    /**
	     * add the ad data to the cache
	     * @param (object) adObject = JSON object describing the contents of the VAST tag after it has been parsed and unwrapped
	     *      - this will become the input into the ad rendering logic
	     * @param (integer) adId = unique identifier for a specific ad cache
	     */
	    addAd: function(adObject, adId) {
	        if (adObject) {
	            addAdToCache(adObject, prependAppnexusIdToKey(adId));
	        }
	    },

	    /** Retrieves ad from the ad cache.  If none exists or if the cache has expired, null is returned
	     * @param (integer) adId = unique identifier for a specific ad cache
	     * @return (object) object containing results of VAST parsing if ad is cached; otherwise return null
	     */
	    getAd: function(adId) {
	        return getCachedAd(prependAppnexusIdToKey(adId));
	    },

	    /**
	     * Clears the cache, removing any cached ad
	     * @param (integer) adId = unique identifier for a specific ad cache
	     */
	    clearAd: function(adId) {
	        clearAdCache(prependAppnexusIdToKey(adId));
	    },

	    /** Sets the time-to-live settings for the ad cache
	     * @param (number) timeToLiveMinutes = specifies how long (in minutes) ad ad may remain in the cache before being discarded
	     */
	    setTimeToLive: function(timeToLiveMinutes) {
	        setTTL(timeToLiveMinutes);
	    },

	    /**
	     * Returns a token unique to this page which is used to identify an ad request.
	     */
	    getNextAdToken: function() {
	        // Remove unnecessary additional characters.
	        // return chars.substring(0, len);
	        return getAdToken();
	    }
	};


/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * VAST Parser module.
	 * @module VastParser
	 */

	var VastXMLParserHelper = __webpack_require__(6);

	var APN_CompanionAds = __webpack_require__(7);
	var APN_Icons = __webpack_require__(8);

	var VastModifier = function (parserData, adToken, notifyUrl, contentSource, buyerMemberId, viewabilityConfig, additionalTrackers, creativeId) {

	    var _logger = __webpack_require__(3);
	    var _prefix = 'VAST Parser';

	    var _parserData = parserData;
	    var _adToken = adToken;
	    var _notifyUrl = notifyUrl;
	    var _creativeId = creativeId;
	    var _buyerMemberId = buyerMemberId;
	    var _contentSource = contentSource;
	    var _viewabilityConfig = viewabilityConfig;
		var _additionalTrackers = additionalTrackers;
	    var _helper = new VastXMLParserHelper();

	    function trimXml(strVastXml) {
	        var nPos = strVastXml.indexOf('<');
	        var strXml = strVastXml.substr(nPos === -1 ? 0 : nPos);
	        nPos = strXml.lastIndexOf('>');
	        if (nPos !== -1) {
	            strXml = strXml.substr(0, nPos + 1);
	        }
	        return strXml;
	    }

	    function prepareDocObject(strVastXml) {
	        var strXml = trimXml(strVastXml);
	        var xmlDoc = null;
	        if (typeof window.DOMParser !== 'undefined') {
	            xmlDoc = (new DOMParser()).parseFromString(strXml, 'text/xml');
	            if (xmlDoc.documentElement.nodeName === 'parsererror') {
	                try {
	                    _logger.error(_prefix, 'Error reason = ' + xmlDoc.documentElement.childNodes[0].nodeValue);
	                }
	                catch (e) {
	                }
	                return null;
	            }
	        }
	        else if (typeof window.ActiveXObject !== 'undefined') {
	            try {
	                xmlDoc = new window.ActiveXObject('Microsoft.XMLDOM');
	                xmlDoc.loadXML(strXml);
	                if (xmlDoc.parseError.errorCode !== 0) {
	                    _logger.error(_prefix, xmlDoc.parseError);
	                    return null;
	                }
	            }
	            catch (ex) {
	                _logger.error(_prefix, 'Failed to parse vast xml by window.ActiveXObject(Microsoft.XMLDOM)', ex);
	                return null;
	            }
	        }
	        else {
	            _logger.error(_prefix, 'Failed to get vast xml parser');
	            return null;
	        }
	        return xmlDoc;
	    }

	    var _xmlDoc = prepareDocObject(parserData.vastXml);

	    function updateVastVersion(vastVersion) {
	        if (_xmlDoc) {
	            var vastNode = _helper.getSubNode(_xmlDoc, 'VAST');
	            if (vastNode) {
	                var attr = _xmlDoc.createAttribute('version');
	                attr.value = vastVersion;
	                vastNode.setAttributeNode(attr);
	            }
	        }
	    }

	    updateVastVersion(parserData.vastVersion);

	    function appendAttributesToAdNode() {
	        if (_xmlDoc) {
	            var vastNode = _helper.getSubNode(_xmlDoc, 'VAST');
	            if (vastNode) {
	                var ads = _helper.getSubNodes(vastNode, 'Ad');
	                if (ads && ads.length > 0) {
	                    for (var i = 0; i < ads.length; i++) {
	                        if (_notifyUrl) {
	                            var attr = _xmlDoc.createAttribute('notifyurl');
	                            attr.value = _notifyUrl;
	                            ads[i].setAttributeNode(attr);
	                        }
	                        if (_contentSource && _contentSource === 'rtb') {
	                            var attr2 = _xmlDoc.createAttribute('rtb');
	                            attr2.value = 'true';
	                            ads[i].setAttributeNode(attr2);
	                        }
	                        var attr3 = _xmlDoc.createAttribute('sequence');
	                        attr3.value = _parserData.sequence.toString();
	                        ads[i].setAttributeNode(attr3);
	                        if (_buyerMemberId) {
	                            var attr4 = _xmlDoc.createAttribute('buyerMemberId');
	                            attr4.value = _buyerMemberId;
	                            ads[i].setAttributeNode(attr4);
	                        }
	                        if (_viewabilityConfig) {
	                            var attr5 = _xmlDoc.createAttribute('viewabilityConfig');
	                            attr5.value = _viewabilityConfig;
	                            ads[i].setAttributeNode(attr5);
	                        }
	                        if (_creativeId) {
	                            var attr6 = _xmlDoc.createAttribute('creativeId');
	                            attr6.value = _creativeId;
	                            ads[i].setAttributeNode(attr6);
	                        }
	                    }
	                }
	            }
	        }
	    }

	    appendAttributesToAdNode();

	    function addCdataBlock(parentNode, url) {
	        var cdata = _xmlDoc.createCDATASection(url);
	        parentNode.appendChild(cdata);
	    }

	    var _creativesNode = null;

	    function getLinearNode() {
	        if (_adToken) {
	            var vastNode = _helper.getSubNode(_xmlDoc, 'VAST');
	            var attr = _xmlDoc.createAttribute('adtoken');
	            attr.value = _adToken;
	            vastNode.setAttributeNode(attr);
	        }

	        var inLine = _helper.getSubNode(_xmlDoc, 'InLine');
	        if (!inLine) {
	            return null;	// VAST xml has no InLine node
	        }

	        var i;
	        var impNode;
	        if (_parserData.extImpressionUrls && typeof _parserData.extImpressionUrls === 'string') {
	            var impTrackers = JSON.parse(_parserData.extImpressionUrls);
	            if (Array.isArray(impTrackers) && impTrackers.length > 0) {
	                for (i = 0; i < impTrackers.length; i++) {
	                    impNode = _xmlDoc.createElement('Impression');
	                    addCdataBlock(impNode, impTrackers[i]);
	                    inLine.appendChild(impNode);
	                }
	            }
	            delete _parserData.extImpressionUrls;
	        }
	    	if (_additionalTrackers && _additionalTrackers.impressions) {
	    		for (i = 0; i < _additionalTrackers.impressions.length; i++) {
	    			if (_additionalTrackers.impressions[i]) {
		            	impNode = _xmlDoc.createElement('Impression');
		            	addCdataBlock(impNode, _additionalTrackers.impressions[i]);
		            	inLine.appendChild(impNode);
	    			}
	    		}
	    	}
	        	
	    	var errNode;
	        if (_parserData.extErrorUrls && typeof _parserData.extErrorUrls === 'string') {
	            var errTrackers = JSON.parse(_parserData.extErrorUrls);
	            if (Array.isArray(errTrackers) && errTrackers.length > 0) {
	                for (i = 0; i < errTrackers.length; i++) {
	                    errNode = _xmlDoc.createElement('Error');
	                    addCdataBlock(errNode, errTrackers[i]);
	                    inLine.appendChild(errNode);
	                }
	            }
	            delete _parserData.extErrorUrls;
	        }
	    	if (_additionalTrackers && _additionalTrackers.errors) {
	    		for (i = 0; i < _additionalTrackers.errors.length; i++) {
	    			if (_additionalTrackers.errors[i]) {
		            	errNode = _xmlDoc.createElement('Error');
		            	addCdataBlock(errNode, _additionalTrackers.errors[i]);
		            	inLine.appendChild(errNode);
	    			}
	    		}
	    	}
	    	
	        if (_parserData.extViewableImpression && typeof _parserData.extViewableImpression === 'string') {
	            var viewableImpressions = JSON.parse(_parserData.extViewableImpression);
	            var viNode = _xmlDoc.createElement('ViewableImpression');
	            if (Array.isArray(viewableImpressions.viewable) && viewableImpressions.viewable.length > 0) {
	                for (i = 0; i < viewableImpressions.viewable.length; i++) {
	                    var viewableNode = _xmlDoc.createElement('Viewable');
	                    addCdataBlock(viewableNode, viewableImpressions.viewable[i]);
	                    viNode.appendChild(viewableNode);
	                }
	            }
	            if (Array.isArray(viewableImpressions.notViewable) && viewableImpressions.notViewable.length > 0) {
	                for (i = 0; i < viewableImpressions.notViewable.length; i++) {
	                    var notViewableNode = _xmlDoc.createElement('NotViewable');
	                    addCdataBlock(notViewableNode, viewableImpressions.notViewable[i]);
	                    viNode.appendChild(notViewableNode);
	                }
	            }
	            if (Array.isArray(viewableImpressions.undetermined) && viewableImpressions.undetermined.length > 0) {
	                for (i = 0; i < viewableImpressions.undetermined.length; i++) {
	                    var undeterminedNode = _xmlDoc.createElement('ViewUndetermined');
	                    addCdataBlock(undeterminedNode, viewableImpressions.undetermined[i]);
	                    viNode.appendChild(undeterminedNode);
	                }
	            }
	            inLine.appendChild(viNode);
	            delete _parserData.extViewableImpression;
	        }
	        	
	        var uaParser = __webpack_require__(9);
	        var ua = uaParser();
	        var browser = ua.browser.name.toLowerCase();
	        if (_parserData.extExtensions && typeof _parserData.extExtensions === 'string') {
	            var extensions = _parserData.extExtensions;
	            if (extensions.length > 0) {
	                var extensionsNode = _helper.getSubNode(inLine, 'Extensions');
	                if (!extensionsNode) {
	                    extensionsNode = _xmlDoc.createElement('Extensions');
	                    inLine.appendChild(extensionsNode);
	                    if (browser === 'ie') {
	                    	extensionsNode.textContent = extensions;
	                    }
	                    else {
	                        extensionsNode.innerHTML = extensions;
	                    }
	                }
	                else {
	                    if (browser === 'ie') {
	                    	extensionsNode.textContent = extensionsNode.textContent.toString() + extensions;
	                    }
	                    else {
	                        extensionsNode.innerHTML = extensionsNode.innerHTML.toString() + extensions;
	                    }
	                }
	            }
	            delete _parserData.extExtensions;
	        }

	        _creativesNode = _helper.getSubNode(inLine, 'Creatives');
	        if (!_creativesNode) {
	            _creativesNode = _xmlDoc.createElement('Creatives');
	            inLine.appendChild(_creativesNode);
	        }
	        var linearNode = _helper.getSubNode(_creativesNode, 'Linear');
	        if (!linearNode) {
	            var creativeNode = _xmlDoc.createElement('Creative');
	            _creativesNode.appendChild(creativeNode);
	            linearNode = _xmlDoc.createElement('Linear');
	            creativeNode.appendChild(linearNode);
	        }
	        return linearNode;
	    }

	    function iconAlreadyExist(iconsNode, program) {
	        var icons = _helper.getSubNodes(iconsNode, 'Icon');
	        if (icons && icons.length > 0) {
	            for (var i = 0; i < icons.length; i++) {
	                var programAttr = _helper.getNodeAttributeValue(icons[i], 'program');
	                if (programAttr.toLowerCase() === program.toLowerCase()) {
	                    return true;
	                }
	            }
	        }
	        return false;
	    }

	    function appendTrackings(linearNode) {
	        var i;
	        if (_parserData.extTrackingUrls && typeof _parserData.extTrackingUrls === 'string' &&
	            _parserData.extTrackingUrls.length > 5) {
	            var videoTrackers = JSON.parse(_parserData.extTrackingUrls);
	            var trackersNode = _helper.getSubNode(linearNode, 'TrackingEvents');
	            if (!trackersNode) {
	                trackersNode = _xmlDoc.createElement('TrackingEvents');
	                linearNode.appendChild(trackersNode);
	            }
	            // enumerate video trackers
	            for (var name in videoTrackers) {
	                var urls = videoTrackers[name];
	                for (i = 0; i < urls.length; i++) {
	                    var trackerNode = _xmlDoc.createElement('Tracking');
	                    var attr = _xmlDoc.createAttribute('event');
	                    attr.value = name;
	                    trackerNode.setAttributeNode(attr);
	                    //trackerNode.textContent = urls[i];
	                    addCdataBlock(trackerNode, urls[i]);
	                    trackersNode.appendChild(trackerNode);
	                }
	            }
	            delete _parserData.extTrackingUrls;
	        }

	        var videoClicksNode;
	        if (_parserData.extClickUrls && typeof _parserData.extClickUrls === 'string') {
	            var videoClicks = JSON.parse(_parserData.extClickUrls);
	            if (Array.isArray(videoClicks) && videoClicks.length > 0) {
	                videoClicksNode = _helper.getSubNode(linearNode, 'VideoClicks');
	                if (!videoClicksNode) {
	                    videoClicksNode = _xmlDoc.createElement('TrackingEvents');
	                    linearNode.appendChild(videoClicksNode);
	                }
	                if (!_helper.getSubNode(videoClicksNode, 'ClickThrough')) {
	                    var clickNode = _xmlDoc.createElement('ClickThrough');
	                    //clickNode.textContent = videoClicks[0];
	                    addCdataBlock(clickNode, videoClicks[0]);
	                    videoClicksNode.appendChild(clickNode);
	                }
	            }
	            delete _parserData.extClickUrls;
	        }

	        if (_parserData.extClickTrackingUrls && typeof _parserData.extClickTrackingUrls === 'string') {
	            var clickTrackings = JSON.parse(_parserData.extClickTrackingUrls);
	            if (Array.isArray(clickTrackings) && clickTrackings.length > 0) {
	                videoClicksNode = _helper.getSubNode(linearNode, 'VideoClicks');
	                if (!videoClicksNode) {
	                    videoClicksNode = _xmlDoc.createElement('VideoClicks');
	                    linearNode.appendChild(videoClicksNode);
	                }
	                for (i = 0; i < clickTrackings.length; i++) {
	                    var clickTrackingNode = _xmlDoc.createElement('ClickTracking');
	                    //clickTrackingNode.textContent = clickTrackings[i];
	                    addCdataBlock(clickTrackingNode, clickTrackings[i]);
	                    videoClicksNode.appendChild(clickTrackingNode);
	                }
	            }
	            delete _parserData.extClickTrackingUrls;
	        }

	        if (_parserData.extIcons && typeof _parserData.extIcons === 'string') {
	            var icons = JSON.parse(_parserData.extIcons);
	            if (Array.isArray(icons) && icons.length > 0) {
	                var iconsNode = _helper.getSubNode(linearNode, 'Icons');
	                if (!iconsNode) {
	                    iconsNode = _xmlDoc.createElement('Icons');
	                    linearNode.appendChild(iconsNode);
	                }
	                for (i = 0; i < icons.length; i++) {
	                    // avoid duplicate icons with same program
	                    if (!iconAlreadyExist(iconsNode, icons[i].program)) {
	                        var iconNode = APN_Icons.createIconNode(_xmlDoc, icons[i]);
	                        if (iconNode) {
	                            iconsNode.appendChild(iconNode);
	                        }
	                    }
	                }
	            }
	            delete _parserData.extIcons;
	        }
	    }

	    function appendNewCompanion(companionAdsNode, newCompanion) {
	        // get companions with resources
	        var companionNode, j;
	        var companionAdsObj = {companions: []};
	        APN_CompanionAds.parse(companionAdsObj, companionAdsNode, _helper);
	        var resCompanions = companionAdsObj.companions;
	        if (newCompanion.StaticResource || newCompanion.IFrameResource || newCompanion.HTMLResource) {
	            var sameSize = false;
	            for (j = 0; j < resCompanions.length; j++) {
	                if (newCompanion.width === resCompanions[j].width &&
	                    newCompanion.height === resCompanions[j].height) {
	                    sameSize = true;
	                    break;
	                }
	            }
	            if (!sameSize) {
	                companionNode = APN_CompanionAds.createCompanionNode(_xmlDoc, newCompanion);
	                companionAdsNode.appendChild(companionNode);
	            }
	        }
	        else {
	            // aggregate companion without resorces into companions with resources
	            var needUpdate = false;
	            for (j = 0; j < resCompanions.length; j++) {
	                if (newCompanion.width === resCompanions[j].width && newCompanion.height === resCompanions[j].height) {
	                    if ((newCompanion.id && newCompanion.id === resCompanions[j].id) || (!newCompanion.id)) {
	                        // add click trackings
	                        if (newCompanion.CompanionClickTracking) {
	                            if (!resCompanions[j].CompanionClickTracking) {
	                                resCompanions[j].CompanionClickTracking = [];
	                            }
	                            resCompanions[j].CompanionClickTracking = resCompanions[j].CompanionClickTracking.concat(newCompanion.CompanionClickTracking);
	                        }
	                        // add view trackings
	                        if (newCompanion.TrackingEvents) {
	                            if (!resCompanions[j].TrackingEvents) {
	                                resCompanions[j].TrackingEvents = [];
	                            }
	                            resCompanions[j].TrackingEvents = resCompanions[j].TrackingEvents.concat(newCompanion.TrackingEvents);
	                        }
	                        needUpdate = true;
	                        break;
	                    }
	                }
	            }
	            if (needUpdate) {
	                while (companionAdsNode.firstChild) {
	                    companionAdsNode.removeChild(companionAdsNode.firstChild);
	                }
	                for (var i = 0; i < resCompanions.length; i++) {
	                    companionNode = APN_CompanionAds.createCompanionNode(_xmlDoc, resCompanions[i]);
	                    companionAdsNode.appendChild(companionNode);
	                }
	            }
	        }
	    }

	    function appendCompanions() {
	        if (_parserData.extCompanions && typeof _parserData.extCompanions === 'string') {
	            var companions = JSON.parse(_parserData.extCompanions);
	            if (Array.isArray(companions.companions) && companions.companions.length > 0) {
	                var companionAdsNode = _helper.getSubNode(_creativesNode, 'CompanionAds');
	                if (!companionAdsNode) {
	                    companionAdsNode = _xmlDoc.createElement('CompanionAds');
	                    _creativesNode.appendChild(companionAdsNode);
	                }
	                var attr;
	                if (companions.required !== 'unknown') {
	                    attr = _xmlDoc.createAttribute('required');
	                    attr.value = companions.required;
	                    companionAdsNode.setAttributeNode(attr);
	                }
	                for (var i = 0; i < companions.companions.length; i++) {
	                    appendNewCompanion(companionAdsNode, companions.companions[i]);
	                }
	            }
	        }
	    }

	    this.addTrackers = function () {
	        if (!_xmlDoc) {
	            return '';
	        }
	        var linearNode = getLinearNode();
	        if (!linearNode) {
	            return '';
	        }
	        appendTrackings(linearNode);
	        if (_creativesNode) {
	            appendCompanions();
	        }
	        var strOut;
	        var uaParser = __webpack_require__(9);
	        var ua = uaParser();
	        var browser = ua.browser.name.toLowerCase();
	        if (browser === 'edge') {
	            // VIDLA-683. Edge is loosing nested CDATA during serialization to string.
	            strOut = _xmlDoc.childNodes[0].outerHTML;
	        }
	        else if (browser === 'ie') {
	            // VIDLA-683. IE is loosing nested CDATA during parsing XML string to DOM.
	            // We have to restore nested CDATA for AdParameters if needed.
	            var nodes = _xmlDoc.getElementsByTagName('AdParameters');
	            for (var i = 0; i < nodes.length; i++) {
	                if (nodes[i].textContent.indexOf(']]>') > 0 && nodes[i].textContent.substr(0, 9) !== '<![CDATA[') {
	                    nodes[i].textContent = nodes[i].textContent.replace(/]]>/g, "]]]]><![CDATA[>");
	                    nodes[i].textContent = '<![CDATA[' + nodes[i].textContent + ']]>';
	                }
	            }
	            strOut = (new XMLSerializer()).serializeToString(_xmlDoc);
	            strOut = strOut.replace(/&lt;/g, '<');
	            strOut = strOut.replace(/&gt;/g, '>');
	        }
	        else {
	            strOut = (new XMLSerializer()).serializeToString(_xmlDoc);
	        }
	        return strOut;
	    };
	};

	module.exports = VastModifier;

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * VastMerger module.
	 * @module VastParser
	 */

	var VastXMLParserHelper = __webpack_require__(6);

	var VastMerger = function (xmlList) {

	    var _logger = __webpack_require__(3);
	    var _prefix = 'VAST Parser';

	    var _xmls = xmlList;
	    var _helper = new VastXMLParserHelper();

	    function trimXml(strVastXml) {
	        var nPos = strVastXml.indexOf('<');
	        var strXml = strVastXml.substr(nPos === -1 ? 0 : nPos);
	        nPos = strXml.lastIndexOf('>');
	        if (nPos !== -1) {
	            strXml = strXml.substr(0, nPos + 1);
	        }
	        return strXml;
	    }

	    function prepareDocObject(strVastXml) {
	        var strXml = trimXml(strVastXml);
	        var xmlDoc = null;
	        if (typeof window.DOMParser !== 'undefined') {
	            xmlDoc = (new DOMParser()).parseFromString(strXml, 'text/xml');
	            if (xmlDoc.documentElement.nodeName === 'parsererror') {
	                try {
	                    _logger.error(_prefix, 'Error reason = ' + xmlDoc.documentElement.childNodes[0].nodeValue);
	                }
	                catch (e) {
	                }
	                return null;
	            }
	        }
	        else if (typeof window.ActiveXObject !== 'undefined') {
	            try {
	                xmlDoc = new window.ActiveXObject('Microsoft.XMLDOM');
	                xmlDoc.loadXML(strXml);
	                if (xmlDoc.parseError.errorCode !== 0) {
	                    _logger.error(_prefix, xmlDoc.parseError);
	                    return null;
	                }
	            }
	            catch (ex) {
	                _logger.error(_prefix, 'Failed to parse vast xml by window.ActiveXObject(Microsoft.XMLDOM)', ex);
	                return null;
	            }
	        }
	        else {
	            _logger.error(_prefix, 'Failed to get vast xml parser');
	            return null;
	        }
	        return xmlDoc;
	    }

	    var _xmlDoc = prepareDocObject(_xmls[0]);
	    if (!_xmlDoc) {
	        return;
	    }

	    var _vastNode = _helper.getSubNode(_xmlDoc, 'VAST');
	    var attr = _xmlDoc.createAttribute('apn_waterfall');
	    attr.value = true;
	    _vastNode.setAttributeNode(attr);

	    var adNodes = [];
	    for (var i = 0; i < _xmls.length; i++) {
	        var doc = prepareDocObject(_xmls[i]);
	        var vastNode = _helper.getSubNode(doc, 'VAST');
	        var ads = _helper.getSubNodes(vastNode, 'Ad');
	        if (ads && ads.length > 0) {
	            for (var j = 0; j < ads.length; j++) {
	                adNodes.push(ads[j]);
	            }
	        }
	    }

	    adNodes.sort(function (a, b) {
	        return _helper.getNodeAttributeNumberValue(a, 'sequence') - _helper.getNodeAttributeNumberValue(b, 'sequence');
	    });

	    var uaParser = __webpack_require__(9);
	    var ua = uaParser();
	    var browser = ua.browser.name.toLowerCase();
	    
	    if (browser === 'ie') {
	        _vastNode.textContent = '';
	    }
	    else {
	        _vastNode.innerHTML = '';
	    }
	    for (i = 0; i < adNodes.length; i++) {
	        _vastNode.appendChild(adNodes[i]);
	    }

	    this.getVastXml = function () {
	        if (!_xmlDoc) {
	            return '';
	        }
	        var strOut;
	        if (browser === 'edge') {
	            // VIDLA-683. Edge is loosing nested CDATA during serialization to string.
	            strOut = _xmlDoc.childNodes[0].outerHTML;
	        }
	        else if (browser === 'ie') {
	            // VIDLA-683. IE is loosing nested CDATA during parsing XML string to DOM.
	            // We have to restore nested CDATA for AdParameters if needed.
	            var nodes = _xmlDoc.getElementsByTagName('AdParameters');
	            for (var i = 0; i < nodes.length; i++) {
	                if (nodes[i].textContent.indexOf(']]>') > 0 && nodes[i].textContent.substr(0, 9) !== '<![CDATA[') {
	                    nodes[i].textContent = nodes[i].textContent.replace(/]]>/g, "]]]]><![CDATA[>");
	                    nodes[i].textContent = '<![CDATA[' + nodes[i].textContent + ']]>';
	                }
	            }
	            strOut = (new XMLSerializer()).serializeToString(_xmlDoc);
	            strOut = strOut.replace(/&lt;/g, '<');
	            strOut = strOut.replace(/&gt;/g, '>');
	        }
	        else {
	            strOut = (new XMLSerializer()).serializeToString(_xmlDoc);
	        }
	        return strOut;
	    };
	};

	module.exports = VastMerger;


/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

	var _logger = __webpack_require__(3);
	var _uaParser = __webpack_require__(9);

	var _prefix = 'apnVmapVast->Utils';

	function convertSecsToString(nSecs) {
		var hours = Math.floor(nSecs / 3600);
		var mins = Math.floor((nSecs - hours * 3600) / 60);
		var secs = Math.floor(nSecs - hours * 3600 - mins * 60);
		var str = (hours > 9 ? '' : '0') + hours + ':' + (mins > 9 ? '' : '0') + mins + ':' + (secs > 9 ? '' : '0') + secs;
		return str;
	}

	function getUUID() {
		var d = new Date().getTime();
		var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
			var r = (d + Math.random() * 16) % 16 | 0;
			d = Math.floor(d / 16);
			return (c === 'x' ? r : r & 0x3 | 0x8).toString(16);
		});
		return uuid;
	}

	function trackUrls(arrUrls) {
		if (arrUrls && Array.isArray(arrUrls) && arrUrls.length > 0) {
			for (var i = 0; i < arrUrls.length; i++) {
				new Image(1, 1).src = arrUrls[i];
			}
		}
	}

	function showNextOverlay(show) {
		var nextOverlays = document.getElementsByClassName('vjs-next-overlay');
		if (nextOverlays && nextOverlays.length > 0) {
			nextOverlays[0].style.display = show ? '' : 'none';
		}
	}

	function convertStringToSeconds(strTime, duration, currentTime) {
		// validate parameters
		if (!strTime || !duration || duration <= 0) {
			return null;
		}
		
		var nSeconds = null;
		var nPos;
		if (strTime.indexOf(':') === 2 && strTime.length >= 8) {
			// hh:mm:ss or hh:mm:ss.mmm
			nPos = strTime.indexOf(':');
			var nHours = parseInt(strTime.substr(0, nPos));
			strTime = strTime.substr(nPos + 1, strTime.length - nPos - 1);
			nPos = strTime.indexOf(':');
			var nMinuts = parseInt(strTime.substr(0, nPos));
			strTime = strTime.substr(nPos + 1, strTime.length - nPos - 1);
			nPos = strTime.indexOf('.');
			var nSecs = nPos > 0 ? parseInt(strTime.substr(0, nPos)) : parseInt(strTime);
			var nMsecs = 0;
			if (nPos > 0) {
				strTime = strTime.substr(nPos + 1, strTime.length - nPos - 1);
				nMsecs = parseInt(strTime);
			}
			nSeconds = nHours * 3600 + nMinuts * 60 + nSecs + (nMsecs >= 500 ? 1 : 0); 
		}
		else if (strTime.indexOf('%') > 0){
			// n%
			nPos = strTime.indexOf('%');
			var nPercents = parseInt(strTime.substr(0, nPos));
			nSeconds = parseInt(duration * nPercents / 100); 
		}
		else if (strTime === 'start') {
			nSeconds = 0;
		}
		else if (strTime === 'end') {
			//nSeconds = parseInt(duration - 0.5); 
			nSeconds = duration; 
		}
		else if (strTime[0] === '#') {
			// #n
			strTime = strTime.substr(1, strTime.length - 1);
			nSeconds = (-1) * parseInt(strTime);
		}
		else if (strTime === 'now' && currentTime !== undefined) {
			nSeconds = parseInt(currentTime + 1);
		}
		return nSeconds;
	}

	function convertStringToMseconds(strTime) {
		// validate parameter
		if (!strTime) {
			return null;
		}
		
		var nMseconds = null;
		var nPos;
		if (strTime.indexOf(':') === 2 && strTime.length >= 8) {
			// hh:mm:ss or hh:mm:ss.mmm
			nPos = strTime.indexOf(':');
			var nHours = parseInt(strTime.substr(0, nPos));
			strTime = strTime.substr(nPos + 1, strTime.length - nPos - 1);
			nPos = strTime.indexOf(':');
			var nMinuts = parseInt(strTime.substr(0, nPos));
			strTime = strTime.substr(nPos + 1, strTime.length - nPos - 1);
			nPos = strTime.indexOf('.');
			var nSecs = nPos > 0 ? parseInt(strTime.substr(0, nPos)) : parseInt(strTime);
			var nMsecs = 0;
			if (nPos > 0) {
				strTime = strTime.substr(nPos + 1, strTime.length - nPos - 1);
				nMsecs = parseInt(strTime);
			}
			nMseconds = (nHours * 3600 + nMinuts * 60 + nSecs) * 1000 + nMsecs; 
		}
		return nMseconds;
	}

	/**
	 * Returns an object that captures the portions of player state relevant to
	 * video playback. The result of this function can be passed to
	 * restorePlayerSnapshot with a player to return the player to the state it
	 * was in when this function was invoked.
	 * @param {object} player The videojs player object
	 */
	function getPlayerSnapshot(player) {
	  var tech = player.el().querySelector('.vjs-tech');

	  var snapshot = {
	    ended: player.ended(),
	    src: player.currentSrc(),
	    currentTime: player.currentTime(),
	    type: player.currentType(),
	    playing: player.scrubbing_ || !player.paused(),
	    suppressedTracks: getSuppressedTracks(player),
	    muted: player.muted(),
	    volume: player.volume()
	  };

	  if (tech) {
	    snapshot.nativePoster = tech.poster;
	    snapshot.style = tech.getAttribute('style');
	  }
	  var ua = _uaParser();
	  var os = ua.os.name.toLowerCase();
	  if (os === 'ios' &&  Math.abs(player.duration() - snapshot.currentTime) < 2) {
		  snapshot.postrollOnIOS = true;
		}
		var els = document.getElementsByClassName('vjs-dock-text');
		if (els && els.length > 0) {
			snapshot.dockText = els[0];
			snapshot.dockText.style.display = 'none';
		}
	  _logger.log(_prefix, 'Break snapshot = ', snapshot);
	  return snapshot;

	  /**** Local Functions ****/
	  function getSuppressedTracks(player) {
	    var tracks = player.remoteTextTracks ? player.remoteTextTracks() : [];

	    if (tracks && Array.isArray(tracks.tracks_)) {
	      tracks = tracks.tracks_;
	    }

	    if (!Array.isArray(tracks)) {
	      tracks = [];
	    }

	    var suppressedTracks = [];
	    tracks.forEach(function (track) {
	      suppressedTracks.push({
	        track: track,
	        mode: track.mode
	      });
	      track.mode = 'disabled';
	    });

	    return suppressedTracks;
	  }
	}

	/**
	 * Attempts to modify the specified player so that its state is equivalent to
	 * the state of the snapshot.
	 * @param {object} snapshot - the player state to apply
	 */
	function restorePlayerSnapshot(player, snapshot) {
	  var tech = player.el().querySelector('.vjs-tech');
	  var attempts = 40; // the number of remaining attempts to restore the snapshot

	  if (snapshot.nativePoster) {
	    tech.poster = snapshot.nativePoster;
	  }

	  if ('style' in snapshot) {
	    // overwrite all css style properties to restore state precisely
	    tech.setAttribute('style', snapshot.style || '');
		}
		
		if (snapshot.dockText) {
			snapshot.dockText.style.display = 'block';
		}

	  //if (hasSrcChanged(player, snapshot)) {
		    // on ios7, fiddling with textTracks too early will cause safari to crash
		    player.one('contentloadedmetadata', restoreTracks);
		
		    player.one('canplay', tryToResume);
		    ensureCanplayEvtGetsFired();
		
	        _logger.log(_prefix, 'Break snapshot.src = ', snapshot.src);
		    // if the src changed for ad playback, reset it
		    player.src({src: snapshot.src, type: snapshot.type});
		
		    // safari requires a call to `load` to pick up a changed source
		    //player.load();		// don't need more
		    
		    //player.muted(snapshot.muted);
		    //player.volume(snapshot.volume);
	  /* } else 
		   {
		    restoreTracks();
		
		    if (snapshot.playing) {
		      player.play();
		    }
	   }*/


	    /**
	     * Sometimes firefox does not trigger the 'canplay' evt.
	     * This code ensure that it always gets triggered triggered.
	     */
	    function ensureCanplayEvtGetsFired() {
		    var timeoutId = setTimeout(function() {
		      player.trigger('canplay');
		    }, 1000);
		
		    player.one('canplay', function(){
		      clearTimeout(timeoutId);
		    });
	    }

	    /**
	     * Determine whether the player needs to be restored to its state
	     * before ad playback began. With a custom ad display or burned-in
	     * ads, the content player state hasn't been modified and so no
	     * restoration is required
	     */
	    /*function hasSrcChanged(player, snapshot) {
	      if (player.src()) {
	        return player.src() !== snapshot.src;
	      }
	      // the player was configured through source element children
	      return player.currentSrc() !== snapshot.src;
	    }*/

	    function restoreTracks() {
	        var suppressedTracks = snapshot.suppressedTracks;
	        suppressedTracks.forEach(function (trackSnapshot) {
	          trackSnapshot.track.mode = trackSnapshot.mode;
	        });
	      }
	    
	    /**
	     * Determine if the video element has loaded enough of the snapshot source
	     * to be ready to apply the rest of the state
	     */
	    function tryToResume() {

	      // if some period of the video is seekable, resume playback
	      // otherwise delay a bit and then check again unless we're out of attempts

		    // safari 11 requiress a call to `play` to make seek available
	        player.play();
	        
	      if (!isReadyToResume(player) && attempts--) {
	        setTimeout(tryToResume, 100);
	      } else {
	        try {
	          if(player.currentTime() !== snapshot.currentTime) {
	            /*if (snapshot.playing) { // if needed restore playing status after seek completes
	              player.one('seeked', function() {
	                player.play();
	              });
	            }*/
	            player.one('seeked', function() {
	                _logger.log(_prefix, 'Break seeked event. player time = ', player.currentTime());
	            	if (snapshot.playing) {
	                    player.play();
	            	}
	            	else {
	            		if (!snapshot.ended) {
	                        player.pause();
	            		}
	            	}
								player.trigger('tryToResumeDone');
	            });
	            _logger.log(_prefix, 'Break snapshot.currentTime = ', snapshot.currentTime);
	            if (snapshot.postrollOnIOS) {
	            	// VIDLA-2522 - make sure video will stop at the end for post-roll on iOS devices
	            	snapshot.currentTime = player.duration() - 1;
	            	snapshot.playing = true;
	            }
							player.currentTime(snapshot.currentTime);

	          } else if (snapshot.playing) {
	            // if needed and no seek has been performed, restore playing status immediately
	            player.play();
							player.trigger('tryToResumeDone');
	          }

	        } catch (e) {
						player.trigger('tryToResumeDone');
	        	_logger.log(_prefix, 'Failed to resume the content after an advertisement', e);
	        }
	      }
	    }
	    
	    function isReadyToResume(player) {

	    	  if (player.readyState() > 1) {
	    	    // some browsers and media aren't "seekable".
	    	    // readyState greater than 1 allows for seeking without exceptions
	    	    return true;
	    	  }
	    	  
	    	  if (player.seekable() === undefined) {
	    	    // if the player doesn't expose the seekable time ranges, try to
	    	    // resume playback immediately
	    	    return true;
	    	  }

	    	  if (player.seekable().length > 0) {
	    	    // if some period of the video is seekable, resume playback
	    	    return true;
	    	  }

	    	  return false;
	    }
	}

	module.exports = {
		convertSecsToString: convertSecsToString,
		getUUID: getUUID,
		trackUrls: trackUrls,
		showNextOverlay: showNextOverlay,
		convertStringToSeconds: convertStringToSeconds,
		convertStringToMseconds: convertStringToMseconds,
		getPlayerSnapshot: getPlayerSnapshot,
		restorePlayerSnapshot: restorePlayerSnapshot
	};


/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

	var _logger = __webpack_require__(3);
	var _loader = __webpack_require__(11);
	var _vastParser = __webpack_require__(5);
	var _xmlParserHelper = __webpack_require__(18);
	var _utils = __webpack_require__(16);
	var _prefix = 'apnVmapVast->impbusCommunicator';

	var impbusCommunicator = function () {
		var _player;
		var _callback;
		var _options;
		var _defaultImpbusTimeout = 700;
		var _timeout;
		var _mediaInfo;
		var _helper = new _xmlParserHelper();
		
		function modifyAndReturnVastXml(vastObj) {
			if (_options && _options.skippable) {
				if (_options.skippable.enabled) {
					if (_options.skippable.videoThreshold) {
						if (vastObj.durationMsecs < _options.skippable.videoThreshold * 1000) {
							if (vastObj.skipOffset) {
								delete vastObj.skipOffset;
							}
						}
					}
					if (_options.skippable.videoOffset) {
						var strOffset = _utils.convertSecsToString(_options.skippable.videoOffset);
						vastObj.skipOffset = strOffset;
					}
				}
				else {
					if (vastObj.skipOffset) {
						delete vastObj.skipOffset;
					}
				}
			}
			if (vastObj.vastXml && _options && _options.skippable) {
				// update skipOffset in vastXml
				var xmlDoc = (new DOMParser()).parseFromString(vastObj.vastXml, 'text/xml');
				var linear = _helper.getSubNode(xmlDoc, 'Linear', 0);
				if (linear) {
					// remove skippOffset attribute
					linear.removeAttribute('skipoffset');
					if (vastObj.skipOffset) {
						// add new skipoffset attribute if needed 
	                    var attr = xmlDoc.createAttribute('skipoffset');
	                    attr.value = vastObj.skipOffset;
	                    linear.setAttributeNode(attr);
					}
					vastObj.vastXml = (new XMLSerializer()).serializeToString(xmlDoc);
				}
			}
			var additionalTrackers = {};
			if (_options && _options.trackers && _options.trackers.length > 0) {
				var impressions = _options.trackers[0].impression_urls;
				var errors = _options.trackers[0].error_urls;
				if (impressions) {
					additionalTrackers.impressions = impressions;
				}
				if (errors) {
					additionalTrackers.errors = errors;
				}
				var videoClicks = _options.trackers[0].video_click_urls;
				if (videoClicks && videoClicks.length > 0) {
					if (vastObj.clickTrackingUrl) {
						vastObj.clickTrackingUrl = vastObj.clickTrackingUrl.concat(videoClicks);
					}
					else {
						vastObj.clickTrackingUrl = videoClicks;
					}
				}
				var videoEvents = _options.trackers[0].video_events;
				if (videoEvents) {
					for (var event in videoEvents) {
						if (vastObj.trackingUrls.hasOwnProperty(event)) {
							vastObj.trackingUrls[event] = vastObj.trackingUrls[event].concat(videoEvents[event]);
						}
						else {
							vastObj.trackingUrls[event] = videoEvents[event];
						}
					}
				}
			}
			// prepare unwrapped VAST xml
			var vastXml = _vastParser.getUnwrappedVastTag(vastObj, null, null, null, null, null, additionalTrackers);
			if (vastXml) {
				_callback(vastXml);
			}
			else {
				_callback(null, '900', 'Failed to generate unwrapped VAST xml');
			}
		}
		
		// PTV functions
	 	var processPtvResponse = function(xml, errCode, errMessage) {
			if (errCode) {
				_callback(null, errCode, errMessage);
			}
			else {
				_vastParser.parse(xml, function(succ, id, vast, errorUrls) {
					if (!succ) {
						var code = '100';
						if (vast.indexOf('vast') === 0) {
							code = vast.substr(4, vast.length - 4);
						}
						if (errorUrls && errorUrls.length > 0) {
							_utils.trackUrls(errorUrls);
						}
						_callback(null, code, 'failed to parse VAST xml from impbus');
					}
					else {
						modifyAndReturnVastXml(vast);
					}
				}, null, 1000, null, null, _options);
			}
		};
		
		function makePtvRequest (impbusUrl, timeout) {
			_loader.load(impbusUrl, function(errorStatus, responseText, xhrObject) {
				if (errorStatus) {
					if (errorStatus === 'Timeout') {
						processPtvResponse(null, '408', errorStatus);
					}
					else {
						processPtvResponse(null, errorStatus, xhrObject.statusText);
					}
				}
				else {
					processPtvResponse(responseText);
				}
			}, timeout);
		}
		
		// UT functions
		var getVastObjFromUtResponse = function(utRespData, callback, timeout) {
			if (utRespData && utRespData.tags && utRespData.tags.length > 0) {
				var tag = utRespData.tags[0];
				_options.noAdUrl = tag.no_ad_url;
				if (tag.ads && tag.ads.length > 0) {
					var ad = null;
					var i;
					// try to find rtb
					for (i = 0; i < tag.ads.length; i++) {
						if (tag.ads[i].content_source === 'rtb' && tag.ads[i].ad_type === 'video') {
							ad = tag.ads[i];
							break;
						}
					}
					if (!ad) {
						// try to find video ad
						for (i = 0; i < tag.ads.length; i++) {
							if (tag.ads[i].ad_type === 'video') {
								ad = tag.ads[i];
								break;
							}
						}
					}
					if (ad) {
						_options.notifyUrl = ad.notify_url;
						_options.usersyncUrl = ad.usersync_url;
						_options.viewability = ad.viewability;
						_options.requestUrl = ad[ad.content_source].request_url;
						_options.responseUrl = ad[ad.content_source].respondse_url;
						_options.trackers = ad[ad.content_source].trackers;
						var xml = null;
						if (ad[ad.content_source].video && ad[ad.content_source].video.content) {
							xml = ad[ad.content_source].video.content;
						}
						else if (ad[ad.content_source].video && ad[ad.content_source].video.content_b64) {
							var Base64 = __webpack_require__(19).Base64;
							xml = Base64.decode(ad[ad.content_source].video.content_b64);	
						}
						else if (ad[ad.content_source].handler && ad[ad.content_source].handler.length > 0 &&
								ad[ad.content_source].handler[0].url) {
							_loader.load(ad[ad.content_source].handler[0].url, function(errorStatus, responseText, xhrObject) {
								if (errorStatus) {
									if (errorStatus === 'Timeout') {
										callback(null, '408', errorStatus);
									}
									else {
										callback(null, errorStatus, xhrObject.statusText);
									}
								}
								else {
									xml = responseText;
									_vastParser.parse(xml, function(succ, id, vast, errorUrls) {
										if (!succ) {
											var code = '100';
											if (vast.indexOf('vast') === 0) {
												code = vast.substr(4, vast.length - 4);
											}
											if (errorUrls && errorUrls.length > 0) {
												_utils.trackUrls(errorUrls);
											}
											callback(null, code, 'failed to parse VAST xml from impbus');
										}
										else {
											callback(vast);
										}
									}, null, 1000, null, null, _options);
								}
							}, timeout);
						}
						else {
							callback(null, '900', 'Failed to get xml from ad in impbus response');
						}
						if (xml) {
							_vastParser.parse(xml, function(succ, id, vast, errorUrls) {
								if (!succ) {
									var code = '100';
									if (vast.indexOf('vast') === 0) {
										code = vast.substr(4, vast.length - 4);
									}
									if (errorUrls && errorUrls.length > 0) {
										_utils.trackUrls(errorUrls);
									}
									callback(null, code, 'failed to parse VAST xml from impbus');
								}
								else {
									callback(vast);
								}
							}, null, 1000, null, null, _options);
						}
					}
					else {
						callback(null, '900', 'No available ad had been found in impbus response');
					}
				}
				else {
					callback(null, '900', 'No ads in first tag in impbus response');
				}
			}
			else {
				callback(null, '900', 'No tags in impbus response');
			}
		};
		
	 	var processUtResponse = function(utRespData, errCode, errMessage) {
	 		if (errCode) {
	 			_callback(null, errCode, errMessage);
	 			return;
	 		}
	 		getVastObjFromUtResponse(utRespData, function(vastObj, errCode, errMessage) {
	 	 		if (errCode) {
	 	 			_callback(null, errCode, errMessage);
	 	 			return;
	 	 		}
	 	 		modifyAndReturnVastXml(vastObj);
	 		}, _timeout);
	 	};

	 	function makeUtRequest (impbusUrl, reqData, timeout) {
	       	reqData.uuid = _utils.getUUID();
	       	if (reqData.tags && reqData.tags.length > 0) {
	       		for (var i = 0; i < reqData.tags.length; i++) {
	               	reqData.tags[i].uuid = _utils.getUUID();
	       		}
	       	}
	       	var strReqData = JSON.stringify(reqData);
	       	_loader.loadPost(impbusUrl, strReqData, function(errorStatus, responseText, xhrObject) {
	            if (!errorStatus) {
	                //if we have loaded succesfully
	                if (xhrObject && xhrObject.responseType === 'json') {
	                	processUtResponse(xhrObject.response);
	                } else {
	                    try {
	                        if (xhrObject.responseText) {
	                            var parsedJsonObject = JSON.parse(xhrObject.responseText);
	                            processUtResponse(parsedJsonObject);
	                        } else {
	                        	processUtResponse(null, '900', 'load failure: empty impbus response');
	                        }
	                    } catch (e) {
	                    	processUtResponse(this, '100', 'failed to parse UT impbus response');
	                    }
	                }
	            } else {
	                //if we have failed to load
	            	_logger.warn(_prefix, "Unable to load from ib:" + errorStatus);
	                switch (errorStatus) {
	                    case "Timeout":
	                    	processUtResponse(null, '408', errorStatus);
	                        break;
	                    default:
	                    	processUtResponse(null, errorStatus, xhrObject.statusText);
	                        break;
	                }
	            }
			}, timeout);
		}
		
	 	// VMAP functions
		function makeVmapRequest (impbusUrl, timeout, callback) {
			_loader.load(impbusUrl, function(errorStatus, responseText, xhrObject) {
				if (errorStatus) {
					if (errorStatus === 'Timeout') {
						callback(impbusUrl, null, '408', errorStatus);
					}
					else {
						callback(impbusUrl, null, errorStatus, xhrObject.statusText);
					}
				}
				else {
					callback(impbusUrl, responseText);
				}
			}, timeout);
		}

		// request preparation function
		function resolveStaticMacros(sourceUrl) {
			var url = sourceUrl;
			if (_mediaInfo) {
				var macros = {
					'{player.id}': _player.bcinfo.playerId,	// _player.el_getAttribute('data-player'),
					'{mediainfo.id}': _mediaInfo.id,
					'{mediainfo.name}': _mediaInfo.name,
					'{mediainfo.description}': _mediaInfo.description ? _mediaInfo.description : '',
					'{mediainfo.tags}': _mediaInfo.tags,
					'{mediainfo.referenceID}': _mediaInfo.referenceId ? _mediaInfo.referenceId : '',
					'{mediainfo.duration}': _mediaInfo.duration,
					'{mediainfo.ad_keys}': _mediaInfo.adKeys ? _mediaInfo.adKeys : '',
					'{player.duration}': _player.duration(),
					'{document.referrer}': document.referrer,
					'{window.location.href}': window.location.href,
					'{player.url}': _player.bcinfo.scriptUrl,
					'{timestamp}': Date.now(),
					'{random}': parseInt(Math.random() * 1000000000000)
				};
				for (var i in macros) {
					url = url.split(i).join(encodeURIComponent(macros[i]));
				}
			}
			return url;
		}

		function resolveDynamicMacros(sourceUrl) {
			var url = sourceUrl;
			if (_mediaInfo && _mediaInfo.customFields) {
				for (var i in _mediaInfo.customFields) {
					url = url.split('{mediainfo.customFields.' + i + '}').join(encodeURIComponent(_mediaInfo.customFields[i]));
				}
			}
			return url;
		}

		function resolveKeywordsAndMacros(sourceUrl) {
			var url = sourceUrl;
			if (_options.tagKeywords) {
				for (var key in _options.tagKeywords) {
					var param = '&kw_' + key + '=' + _options.tagKeywords[key];
					url += param;
				}
			}
			url = resolveStaticMacros(url);
			url = resolveDynamicMacros(url);
			return url;
		}
		
	    this.getXML = function (options, player, callback) {
	    	_callback = callback;
			_options = options;
			_player = player;
			if (_player.mediainfo && _player.mediainfo.name) {
				_mediaInfo = _player.mediainfo;
			}
	    	
	    	var impbusUrl;
	        if (_options && _options.endpointUrl) {
	           impbusUrl = _options.endpointUrl;
	        } else {
	           impbusUrl = '//';
	        }
	        
			_timeout = _options && _options.timeouts && _options.timeouts.adCallTimeout ? _options.timeouts.adCallTimeout : _defaultImpbusTimeout;
	    	if (_options.vmapEnabled) {
	    		// prepare vmap request links
	    		var arrVmapRequestData = [];
	    		var i;
	    		if (Array.isArray(_options.apnTagParams)) {
	    			for (i = 0; i < _options.apnTagParams.length; i++) {
	    				arrVmapRequestData.push(impbusUrl + _options.apnTagParams[i]);
	    			}
	    		}
	    		else {
	    			arrVmapRequestData.push(impbusUrl + _options.apnTagParams);
	    		}
	    		
				var vmapXmls = [];
	    		var requestCount = 0;
	    		var vmapRequestCallback = function(url, xml, errorCode, errorMessage) {
					if (errorCode || errorMessage) {
						_logger.warn(_prefix, "VMAP request url: " + arrVmapRequestData[i]);
						_logger.warn(_prefix, "Unable to get VMAP xml from ib. Error code: " + errorCode + ", message: " + errorMessage);
					}
					else if (xml && xml.length > 0) {
						vmapXmls.push({url: url, xml: xml});
					}
					requestCount++;
					if (requestCount === arrVmapRequestData.length) {
						if (vmapXmls.length > 0) {
							callback(vmapXmls);
						}
						else {
							callback(null);
						}
					}
				};
				
				var prepareVmapRequestData = function() {
					for (i = 0; i < arrVmapRequestData.length; i++) {
						var vmapUrl = resolveKeywordsAndMacros(arrVmapRequestData[i]);
						makeVmapRequest(vmapUrl, _timeout, vmapRequestCallback);
				 	}
				};

				if (_mediaInfo) {
					prepareVmapRequestData();
				}
				else {
					_player.one('loadstart',function(){
						_mediaInfo = _player.mediainfo;
						prepareVmapRequestData();
					});		
				}
	    	}
	    	else {
	    		if (typeof _options.apnTagParams === 'string') {
	    			// ptv call for single ad
	    			if (_options && !_options.skippable) {
	    				// check skippability in query params
	    				if (_options.apnTagParams.indexOf('vskippable=0') >= 0) {
	    					_options.skippable = {enabled : false};
	    				}
	    			}
					// ptv call for single ad
					var ptvUrl = impbusUrl + _options.apnTagParams;
					var preparePtvRequestData = function() {
						var tempUrl = resolveKeywordsAndMacros(ptvUrl);
						makePtvRequest(tempUrl, _timeout);
					};
					if (_mediaInfo) {
						preparePtvRequestData();
					}
					else {
						_player.one('loadstart',function(){
							_mediaInfo = _player.mediainfo;
							if (!isNaN(_player.duration()) && _player.duration() > 0) {
								preparePtvRequestData();
							}
							else {
								_player.one('loadedmetadata', preparePtvRequestData);
							}
						});		
					}
	     		}
	    		else {
					// ut call for single ad
					var prepareUtRequestData = function() {
						var temp = JSON.stringify(_options.apnTagParams);
						var resolvedUtRequest = resolveStaticMacros(temp);
						resolvedUtRequest = resolveDynamicMacros(resolvedUtRequest);
						var apnTagParams = JSON.parse(resolvedUtRequest);
						makeUtRequest(impbusUrl + '/ut/v3', apnTagParams, _timeout);
					};
					if (_mediaInfo) {
						prepareUtRequestData();
					}
					else {
						_player.one('loadstart',function(){
							_mediaInfo = _player.mediainfo;
							if (!isNaN(_player.duration()) && _player.duration() > 0) {
								prepareUtRequestData();
							}
							else {
								_player.one('loadedmetadata', prepareUtRequestData);
							}
						});		
					}
	    		}
	    	}
	    };

	};

	module.exports = impbusCommunicator;


/***/ }),
/* 18 */
/***/ (function(module, exports) {

	var XMLParserHelper = function () {
	    this.getSubNodes = function (node, subNodeName) {
	        var nodes = node.getElementsByTagName(subNodeName);
	        if (nodes.length > 0) {
	            return nodes;
	        }
	        return null;
	    };

	    this.getSubNode = function (node, subNodeName, index) {
	        if (!index) {
	            index = 0;
	        }
	        var nodes = node.getElementsByTagName(subNodeName);
	        if (nodes.length > index) {
	            return nodes[index];
	        }
	        return null;
	    };

	    this.getNodeValue = function (node) {
	        if (node.childNodes.length === 0) {
	            return '';
	        }
	        var val = node.childNodes[0].nodeValue;
	        if (val) {
	            return val.trim();
	        }
	        return '';
	    };

	    this.getNodeValues = function (node) {
	        if (node.childNodes.length === 0) {
	            return '';
	        }
	        var wholeVal = '';
	        for (var i = 0; i < node.childNodes.length; i++) {
	            var val = node.childNodes[i].nodeValue;
	            if (val) {
	            	wholeVal += val;
	            }
	        }
	        return wholeVal.trim();
	    };

	    this.getNodeAttributeValue = function (node, attributeName) {
	        var val = node.getAttribute(attributeName);
	        if (val === null) {
	            val = '';
	        }
	        return val;
	    };

	    this.getNodeAttributeNumberValue = function (node, attributeName, defaultValue) {
	        if (!defaultValue) {
	            defaultValue = 0;
	        }
	        var answer = defaultValue;
	        var val = this.getNodeAttributeValue(node, attributeName);

	        if (val.length > 0) {
	            if (val.indexOf('.') >= 0) {
	                answer = parseFloat(val);
	            }
	            else {
	                answer = parseInt(val);
	            }
	        }

	        return answer;
	    };

	    this.getNodeAttributeBooleanValue = function (node, attributeName, defaultValue) {
	        if (!defaultValue) {
	            defaultValue = false;
	        }
	        var answer = defaultValue;
	        var val = this.getNodeAttributeValue(node, attributeName);

	        if (val.length > 0) {
	            var char = val.toLowerCase().charAt(0);
	            answer = (char === 't');
	        }

	        return answer;
	    };

	    this.getSubNodeValue = function (parentNode, subNodeName, defaultValue) {
	        defaultValue = (typeof defaultValue === 'undefined') ? '' : defaultValue;
	        var subnode = this.getSubNode(parentNode, subNodeName);
	        if (subnode !== null) {
	            return this.getNodeValue(subnode);
	        }
	        return defaultValue;
	    };

	    this.getSubNodeWholeValue = function (parentNode, subNodeName, defaultValue) {
	        defaultValue = (typeof defaultValue === 'undefined') ? '' : defaultValue;
	        var subnode = this.getSubNode(parentNode, subNodeName);
	        if (subnode !== null) {
	            return this.getNodeValues(subnode);
	        }
	        return defaultValue;
	    };

	    this.getSubNodeBooleanValue = function (parentNode, subNodeName, defaultValue) {
	        defaultValue = (typeof defaultValue === 'undefined') ? 'false' : defaultValue;

	        var value = this.getSubNodeValue(parentNode, subNodeName);
	        if (value.length > 0 && value.toLowerCase().charAt(0) === 't') {
	            return true;
	        }
	        if (value.length > 0 && value.toLowerCase().charAt(0) === 'f') {
	            return false;
	        }
	        return defaultValue;
	    };
	};

	module.exports = XMLParserHelper;


/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(global) {/*
	 *  base64.js
	 *
	 *  Licensed under the BSD 3-Clause License.
	 *    http://opensource.org/licenses/BSD-3-Clause
	 *
	 *  References:
	 *    http://en.wikipedia.org/wiki/Base64
	 */
	;(function (global, factory) {
	     true
	        ? module.exports = factory(global)
	        : typeof define === 'function' && define.amd
	        ? define(factory) : factory(global)
	}((
	    typeof self !== 'undefined' ? self
	        : typeof window !== 'undefined' ? window
	        : typeof global !== 'undefined' ? global
	: this
	), function(global) {
	    'use strict';
	    // existing version for noConflict()
	    var _Base64 = global.Base64;
	    var version = "2.4.8";
	    // if node.js and NOT React Native, we use Buffer
	    var buffer;
	    if (typeof module !== 'undefined' && module.exports) {
	        if (typeof navigator != 'undefined' && navigator.product == 'ReactNative') {
	        } else {
	            try {
	                buffer = __webpack_require__(20).Buffer;
	            } catch (err) {}
	        }
	    }
	    // constants
	    var b64chars
	        = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
	    var b64tab = function(bin) {
	        var t = {};
	        for (var i = 0, l = bin.length; i < l; i++) t[bin.charAt(i)] = i;
	        return t;
	    }(b64chars);
	    var fromCharCode = String.fromCharCode;
	    // encoder stuff
	    var cb_utob = function(c) {
	        if (c.length < 2) {
	            var cc = c.charCodeAt(0);
	            return cc < 0x80 ? c
	                : cc < 0x800 ? (fromCharCode(0xc0 | (cc >>> 6))
	                                + fromCharCode(0x80 | (cc & 0x3f)))
	                : (fromCharCode(0xe0 | ((cc >>> 12) & 0x0f))
	                   + fromCharCode(0x80 | ((cc >>>  6) & 0x3f))
	                   + fromCharCode(0x80 | ( cc         & 0x3f)));
	        } else {
	            var cc = 0x10000
	                + (c.charCodeAt(0) - 0xD800) * 0x400
	                + (c.charCodeAt(1) - 0xDC00);
	            return (fromCharCode(0xf0 | ((cc >>> 18) & 0x07))
	                    + fromCharCode(0x80 | ((cc >>> 12) & 0x3f))
	                    + fromCharCode(0x80 | ((cc >>>  6) & 0x3f))
	                    + fromCharCode(0x80 | ( cc         & 0x3f)));
	        }
	    };
	    var re_utob = /[\uD800-\uDBFF][\uDC00-\uDFFFF]|[^\x00-\x7F]/g;
	    var utob = function(u) {
	        return u.replace(re_utob, cb_utob);
	    };
	    var cb_encode = function(ccc) {
	        var padlen = [0, 2, 1][ccc.length % 3],
	        ord = ccc.charCodeAt(0) << 16
	            | ((ccc.length > 1 ? ccc.charCodeAt(1) : 0) << 8)
	            | ((ccc.length > 2 ? ccc.charCodeAt(2) : 0)),
	        chars = [
	            b64chars.charAt( ord >>> 18),
	            b64chars.charAt((ord >>> 12) & 63),
	            padlen >= 2 ? '=' : b64chars.charAt((ord >>> 6) & 63),
	            padlen >= 1 ? '=' : b64chars.charAt(ord & 63)
	        ];
	        return chars.join('');
	    };
	    var btoa = global.btoa ? function(b) {
	        return global.btoa(b);
	    } : function(b) {
	        return b.replace(/[\s\S]{1,3}/g, cb_encode);
	    };
	    var _encode = buffer ?
	        buffer.from && Uint8Array && buffer.from !== Uint8Array.from
	        ? function (u) {
	            return (u.constructor === buffer.constructor ? u : buffer.from(u))
	                .toString('base64')
	        }
	        :  function (u) {
	            return (u.constructor === buffer.constructor ? u : new  buffer(u))
	                .toString('base64')
	        }
	        : function (u) { return btoa(utob(u)) }
	    ;
	    var encode = function(u, urisafe) {
	        return !urisafe
	            ? _encode(String(u))
	            : _encode(String(u)).replace(/[+\/]/g, function(m0) {
	                return m0 == '+' ? '-' : '_';
	            }).replace(/=/g, '');
	    };
	    var encodeURI = function(u) { return encode(u, true) };
	    // decoder stuff
	    var re_btou = new RegExp([
	        '[\xC0-\xDF][\x80-\xBF]',
	        '[\xE0-\xEF][\x80-\xBF]{2}',
	        '[\xF0-\xF7][\x80-\xBF]{3}'
	    ].join('|'), 'g');
	    var cb_btou = function(cccc) {
	        switch(cccc.length) {
	        case 4:
	            var cp = ((0x07 & cccc.charCodeAt(0)) << 18)
	                |    ((0x3f & cccc.charCodeAt(1)) << 12)
	                |    ((0x3f & cccc.charCodeAt(2)) <<  6)
	                |     (0x3f & cccc.charCodeAt(3)),
	            offset = cp - 0x10000;
	            return (fromCharCode((offset  >>> 10) + 0xD800)
	                    + fromCharCode((offset & 0x3FF) + 0xDC00));
	        case 3:
	            return fromCharCode(
	                ((0x0f & cccc.charCodeAt(0)) << 12)
	                    | ((0x3f & cccc.charCodeAt(1)) << 6)
	                    |  (0x3f & cccc.charCodeAt(2))
	            );
	        default:
	            return  fromCharCode(
	                ((0x1f & cccc.charCodeAt(0)) << 6)
	                    |  (0x3f & cccc.charCodeAt(1))
	            );
	        }
	    };
	    var btou = function(b) {
	        return b.replace(re_btou, cb_btou);
	    };
	    var cb_decode = function(cccc) {
	        var len = cccc.length,
	        padlen = len % 4,
	        n = (len > 0 ? b64tab[cccc.charAt(0)] << 18 : 0)
	            | (len > 1 ? b64tab[cccc.charAt(1)] << 12 : 0)
	            | (len > 2 ? b64tab[cccc.charAt(2)] <<  6 : 0)
	            | (len > 3 ? b64tab[cccc.charAt(3)]       : 0),
	        chars = [
	            fromCharCode( n >>> 16),
	            fromCharCode((n >>>  8) & 0xff),
	            fromCharCode( n         & 0xff)
	        ];
	        chars.length -= [0, 0, 2, 1][padlen];
	        return chars.join('');
	    };
	    var atob = global.atob ? function(a) {
	        return global.atob(a);
	    } : function(a){
	        return a.replace(/[\s\S]{1,4}/g, cb_decode);
	    };
	    var _decode = buffer ?
	        buffer.from && Uint8Array && buffer.from !== Uint8Array.from
	        ? function(a) {
	            return (a.constructor === buffer.constructor
	                    ? a : buffer.from(a, 'base64')).toString();
	        }
	        : function(a) {
	            return (a.constructor === buffer.constructor
	                    ? a : new buffer(a, 'base64')).toString();
	        }
	        : function(a) { return btou(atob(a)) };
	    var decode = function(a){
	        return _decode(
	            String(a).replace(/[-_]/g, function(m0) { return m0 == '-' ? '+' : '/' })
	                .replace(/[^A-Za-z0-9\+\/]/g, '')
	        );
	    };
	    var noConflict = function() {
	        var Base64 = global.Base64;
	        global.Base64 = _Base64;
	        return Base64;
	    };
	    // export Base64
	    global.Base64 = {
	        VERSION: version,
	        atob: atob,
	        btoa: btoa,
	        fromBase64: decode,
	        toBase64: encode,
	        utob: utob,
	        encode: encode,
	        encodeURI: encodeURI,
	        btou: btou,
	        decode: decode,
	        noConflict: noConflict
	    };
	    // if ES5 is available, make Base64.extendString() available
	    if (typeof Object.defineProperty === 'function') {
	        var noEnum = function(v){
	            return {value:v,enumerable:false,writable:true,configurable:true};
	        };
	        global.Base64.extendString = function () {
	            Object.defineProperty(
	                String.prototype, 'fromBase64', noEnum(function () {
	                    return decode(this)
	                }));
	            Object.defineProperty(
	                String.prototype, 'toBase64', noEnum(function (urisafe) {
	                    return encode(this, urisafe)
	                }));
	            Object.defineProperty(
	                String.prototype, 'toBase64URI', noEnum(function () {
	                    return encode(this, true)
	                }));
	        };
	    }
	    //
	    // export Base64 to the namespace
	    //
	    if (global['Meteor']) { // Meteor.js
	        Base64 = global.Base64;
	    }
	    // module.exports and AMD are mutually exclusive.
	    // module.exports has precedence.
	    if (typeof module !== 'undefined' && module.exports) {
	        module.exports.Base64 = global.Base64;
	    }
	    else if (true) {
	        // AMD. Register as an anonymous module.
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function(){ return global.Base64 }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    }
	    // that's it!
	    return {Base64: global.Base64}
	}));

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {/*!
	 * The buffer module from node.js, for the browser.
	 *
	 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
	 * @license  MIT
	 */
	/* eslint-disable no-proto */

	'use strict'

	var base64 = __webpack_require__(21)
	var ieee754 = __webpack_require__(22)
	var isArray = __webpack_require__(23)

	exports.Buffer = Buffer
	exports.SlowBuffer = SlowBuffer
	exports.INSPECT_MAX_BYTES = 50

	/**
	 * If `Buffer.TYPED_ARRAY_SUPPORT`:
	 *   === true    Use Uint8Array implementation (fastest)
	 *   === false   Use Object implementation (most compatible, even IE6)
	 *
	 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
	 * Opera 11.6+, iOS 4.2+.
	 *
	 * Due to various browser bugs, sometimes the Object implementation will be used even
	 * when the browser supports typed arrays.
	 *
	 * Note:
	 *
	 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
	 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
	 *
	 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
	 *
	 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
	 *     incorrect length in some situations.

	 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
	 * get the Object implementation, which is slower but behaves correctly.
	 */
	Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
	  ? global.TYPED_ARRAY_SUPPORT
	  : typedArraySupport()

	/*
	 * Export kMaxLength after typed array support is determined.
	 */
	exports.kMaxLength = kMaxLength()

	function typedArraySupport () {
	  try {
	    var arr = new Uint8Array(1)
	    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
	    return arr.foo() === 42 && // typed array instances can be augmented
	        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
	        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
	  } catch (e) {
	    return false
	  }
	}

	function kMaxLength () {
	  return Buffer.TYPED_ARRAY_SUPPORT
	    ? 0x7fffffff
	    : 0x3fffffff
	}

	function createBuffer (that, length) {
	  if (kMaxLength() < length) {
	    throw new RangeError('Invalid typed array length')
	  }
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    that = new Uint8Array(length)
	    that.__proto__ = Buffer.prototype
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    if (that === null) {
	      that = new Buffer(length)
	    }
	    that.length = length
	  }

	  return that
	}

	/**
	 * The Buffer constructor returns instances of `Uint8Array` that have their
	 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
	 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
	 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
	 * returns a single octet.
	 *
	 * The `Uint8Array` prototype remains unmodified.
	 */

	function Buffer (arg, encodingOrOffset, length) {
	  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
	    return new Buffer(arg, encodingOrOffset, length)
	  }

	  // Common case.
	  if (typeof arg === 'number') {
	    if (typeof encodingOrOffset === 'string') {
	      throw new Error(
	        'If encoding is specified then the first argument must be a string'
	      )
	    }
	    return allocUnsafe(this, arg)
	  }
	  return from(this, arg, encodingOrOffset, length)
	}

	Buffer.poolSize = 8192 // not used by this implementation

	// TODO: Legacy, not needed anymore. Remove in next major version.
	Buffer._augment = function (arr) {
	  arr.__proto__ = Buffer.prototype
	  return arr
	}

	function from (that, value, encodingOrOffset, length) {
	  if (typeof value === 'number') {
	    throw new TypeError('"value" argument must not be a number')
	  }

	  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
	    return fromArrayBuffer(that, value, encodingOrOffset, length)
	  }

	  if (typeof value === 'string') {
	    return fromString(that, value, encodingOrOffset)
	  }

	  return fromObject(that, value)
	}

	/**
	 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
	 * if value is a number.
	 * Buffer.from(str[, encoding])
	 * Buffer.from(array)
	 * Buffer.from(buffer)
	 * Buffer.from(arrayBuffer[, byteOffset[, length]])
	 **/
	Buffer.from = function (value, encodingOrOffset, length) {
	  return from(null, value, encodingOrOffset, length)
	}

	if (Buffer.TYPED_ARRAY_SUPPORT) {
	  Buffer.prototype.__proto__ = Uint8Array.prototype
	  Buffer.__proto__ = Uint8Array
	  if (typeof Symbol !== 'undefined' && Symbol.species &&
	      Buffer[Symbol.species] === Buffer) {
	    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
	    Object.defineProperty(Buffer, Symbol.species, {
	      value: null,
	      configurable: true
	    })
	  }
	}

	function assertSize (size) {
	  if (typeof size !== 'number') {
	    throw new TypeError('"size" argument must be a number')
	  } else if (size < 0) {
	    throw new RangeError('"size" argument must not be negative')
	  }
	}

	function alloc (that, size, fill, encoding) {
	  assertSize(size)
	  if (size <= 0) {
	    return createBuffer(that, size)
	  }
	  if (fill !== undefined) {
	    // Only pay attention to encoding if it's a string. This
	    // prevents accidentally sending in a number that would
	    // be interpretted as a start offset.
	    return typeof encoding === 'string'
	      ? createBuffer(that, size).fill(fill, encoding)
	      : createBuffer(that, size).fill(fill)
	  }
	  return createBuffer(that, size)
	}

	/**
	 * Creates a new filled Buffer instance.
	 * alloc(size[, fill[, encoding]])
	 **/
	Buffer.alloc = function (size, fill, encoding) {
	  return alloc(null, size, fill, encoding)
	}

	function allocUnsafe (that, size) {
	  assertSize(size)
	  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) {
	    for (var i = 0; i < size; ++i) {
	      that[i] = 0
	    }
	  }
	  return that
	}

	/**
	 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
	 * */
	Buffer.allocUnsafe = function (size) {
	  return allocUnsafe(null, size)
	}
	/**
	 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
	 */
	Buffer.allocUnsafeSlow = function (size) {
	  return allocUnsafe(null, size)
	}

	function fromString (that, string, encoding) {
	  if (typeof encoding !== 'string' || encoding === '') {
	    encoding = 'utf8'
	  }

	  if (!Buffer.isEncoding(encoding)) {
	    throw new TypeError('"encoding" must be a valid string encoding')
	  }

	  var length = byteLength(string, encoding) | 0
	  that = createBuffer(that, length)

	  var actual = that.write(string, encoding)

	  if (actual !== length) {
	    // Writing a hex string, for example, that contains invalid characters will
	    // cause everything after the first invalid character to be ignored. (e.g.
	    // 'abxxcd' will be treated as 'ab')
	    that = that.slice(0, actual)
	  }

	  return that
	}

	function fromArrayLike (that, array) {
	  var length = array.length < 0 ? 0 : checked(array.length) | 0
	  that = createBuffer(that, length)
	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255
	  }
	  return that
	}

	function fromArrayBuffer (that, array, byteOffset, length) {
	  array.byteLength // this throws if `array` is not a valid ArrayBuffer

	  if (byteOffset < 0 || array.byteLength < byteOffset) {
	    throw new RangeError('\'offset\' is out of bounds')
	  }

	  if (array.byteLength < byteOffset + (length || 0)) {
	    throw new RangeError('\'length\' is out of bounds')
	  }

	  if (byteOffset === undefined && length === undefined) {
	    array = new Uint8Array(array)
	  } else if (length === undefined) {
	    array = new Uint8Array(array, byteOffset)
	  } else {
	    array = new Uint8Array(array, byteOffset, length)
	  }

	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    that = array
	    that.__proto__ = Buffer.prototype
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    that = fromArrayLike(that, array)
	  }
	  return that
	}

	function fromObject (that, obj) {
	  if (Buffer.isBuffer(obj)) {
	    var len = checked(obj.length) | 0
	    that = createBuffer(that, len)

	    if (that.length === 0) {
	      return that
	    }

	    obj.copy(that, 0, 0, len)
	    return that
	  }

	  if (obj) {
	    if ((typeof ArrayBuffer !== 'undefined' &&
	        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
	      if (typeof obj.length !== 'number' || isnan(obj.length)) {
	        return createBuffer(that, 0)
	      }
	      return fromArrayLike(that, obj)
	    }

	    if (obj.type === 'Buffer' && isArray(obj.data)) {
	      return fromArrayLike(that, obj.data)
	    }
	  }

	  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
	}

	function checked (length) {
	  // Note: cannot use `length < kMaxLength()` here because that fails when
	  // length is NaN (which is otherwise coerced to zero.)
	  if (length >= kMaxLength()) {
	    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
	                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
	  }
	  return length | 0
	}

	function SlowBuffer (length) {
	  if (+length != length) { // eslint-disable-line eqeqeq
	    length = 0
	  }
	  return Buffer.alloc(+length)
	}

	Buffer.isBuffer = function isBuffer (b) {
	  return !!(b != null && b._isBuffer)
	}

	Buffer.compare = function compare (a, b) {
	  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
	    throw new TypeError('Arguments must be Buffers')
	  }

	  if (a === b) return 0

	  var x = a.length
	  var y = b.length

	  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
	    if (a[i] !== b[i]) {
	      x = a[i]
	      y = b[i]
	      break
	    }
	  }

	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	}

	Buffer.isEncoding = function isEncoding (encoding) {
	  switch (String(encoding).toLowerCase()) {
	    case 'hex':
	    case 'utf8':
	    case 'utf-8':
	    case 'ascii':
	    case 'latin1':
	    case 'binary':
	    case 'base64':
	    case 'ucs2':
	    case 'ucs-2':
	    case 'utf16le':
	    case 'utf-16le':
	      return true
	    default:
	      return false
	  }
	}

	Buffer.concat = function concat (list, length) {
	  if (!isArray(list)) {
	    throw new TypeError('"list" argument must be an Array of Buffers')
	  }

	  if (list.length === 0) {
	    return Buffer.alloc(0)
	  }

	  var i
	  if (length === undefined) {
	    length = 0
	    for (i = 0; i < list.length; ++i) {
	      length += list[i].length
	    }
	  }

	  var buffer = Buffer.allocUnsafe(length)
	  var pos = 0
	  for (i = 0; i < list.length; ++i) {
	    var buf = list[i]
	    if (!Buffer.isBuffer(buf)) {
	      throw new TypeError('"list" argument must be an Array of Buffers')
	    }
	    buf.copy(buffer, pos)
	    pos += buf.length
	  }
	  return buffer
	}

	function byteLength (string, encoding) {
	  if (Buffer.isBuffer(string)) {
	    return string.length
	  }
	  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
	      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
	    return string.byteLength
	  }
	  if (typeof string !== 'string') {
	    string = '' + string
	  }

	  var len = string.length
	  if (len === 0) return 0

	  // Use a for loop to avoid recursion
	  var loweredCase = false
	  for (;;) {
	    switch (encoding) {
	      case 'ascii':
	      case 'latin1':
	      case 'binary':
	        return len
	      case 'utf8':
	      case 'utf-8':
	      case undefined:
	        return utf8ToBytes(string).length
	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return len * 2
	      case 'hex':
	        return len >>> 1
	      case 'base64':
	        return base64ToBytes(string).length
	      default:
	        if (loweredCase) return utf8ToBytes(string).length // assume utf8
	        encoding = ('' + encoding).toLowerCase()
	        loweredCase = true
	    }
	  }
	}
	Buffer.byteLength = byteLength

	function slowToString (encoding, start, end) {
	  var loweredCase = false

	  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
	  // property of a typed array.

	  // This behaves neither like String nor Uint8Array in that we set start/end
	  // to their upper/lower bounds if the value passed is out of range.
	  // undefined is handled specially as per ECMA-262 6th Edition,
	  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
	  if (start === undefined || start < 0) {
	    start = 0
	  }
	  // Return early if start > this.length. Done here to prevent potential uint32
	  // coercion fail below.
	  if (start > this.length) {
	    return ''
	  }

	  if (end === undefined || end > this.length) {
	    end = this.length
	  }

	  if (end <= 0) {
	    return ''
	  }

	  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
	  end >>>= 0
	  start >>>= 0

	  if (end <= start) {
	    return ''
	  }

	  if (!encoding) encoding = 'utf8'

	  while (true) {
	    switch (encoding) {
	      case 'hex':
	        return hexSlice(this, start, end)

	      case 'utf8':
	      case 'utf-8':
	        return utf8Slice(this, start, end)

	      case 'ascii':
	        return asciiSlice(this, start, end)

	      case 'latin1':
	      case 'binary':
	        return latin1Slice(this, start, end)

	      case 'base64':
	        return base64Slice(this, start, end)

	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return utf16leSlice(this, start, end)

	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = (encoding + '').toLowerCase()
	        loweredCase = true
	    }
	  }
	}

	// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
	// Buffer instances.
	Buffer.prototype._isBuffer = true

	function swap (b, n, m) {
	  var i = b[n]
	  b[n] = b[m]
	  b[m] = i
	}

	Buffer.prototype.swap16 = function swap16 () {
	  var len = this.length
	  if (len % 2 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 16-bits')
	  }
	  for (var i = 0; i < len; i += 2) {
	    swap(this, i, i + 1)
	  }
	  return this
	}

	Buffer.prototype.swap32 = function swap32 () {
	  var len = this.length
	  if (len % 4 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 32-bits')
	  }
	  for (var i = 0; i < len; i += 4) {
	    swap(this, i, i + 3)
	    swap(this, i + 1, i + 2)
	  }
	  return this
	}

	Buffer.prototype.swap64 = function swap64 () {
	  var len = this.length
	  if (len % 8 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 64-bits')
	  }
	  for (var i = 0; i < len; i += 8) {
	    swap(this, i, i + 7)
	    swap(this, i + 1, i + 6)
	    swap(this, i + 2, i + 5)
	    swap(this, i + 3, i + 4)
	  }
	  return this
	}

	Buffer.prototype.toString = function toString () {
	  var length = this.length | 0
	  if (length === 0) return ''
	  if (arguments.length === 0) return utf8Slice(this, 0, length)
	  return slowToString.apply(this, arguments)
	}

	Buffer.prototype.equals = function equals (b) {
	  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
	  if (this === b) return true
	  return Buffer.compare(this, b) === 0
	}

	Buffer.prototype.inspect = function inspect () {
	  var str = ''
	  var max = exports.INSPECT_MAX_BYTES
	  if (this.length > 0) {
	    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
	    if (this.length > max) str += ' ... '
	  }
	  return '<Buffer ' + str + '>'
	}

	Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
	  if (!Buffer.isBuffer(target)) {
	    throw new TypeError('Argument must be a Buffer')
	  }

	  if (start === undefined) {
	    start = 0
	  }
	  if (end === undefined) {
	    end = target ? target.length : 0
	  }
	  if (thisStart === undefined) {
	    thisStart = 0
	  }
	  if (thisEnd === undefined) {
	    thisEnd = this.length
	  }

	  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
	    throw new RangeError('out of range index')
	  }

	  if (thisStart >= thisEnd && start >= end) {
	    return 0
	  }
	  if (thisStart >= thisEnd) {
	    return -1
	  }
	  if (start >= end) {
	    return 1
	  }

	  start >>>= 0
	  end >>>= 0
	  thisStart >>>= 0
	  thisEnd >>>= 0

	  if (this === target) return 0

	  var x = thisEnd - thisStart
	  var y = end - start
	  var len = Math.min(x, y)

	  var thisCopy = this.slice(thisStart, thisEnd)
	  var targetCopy = target.slice(start, end)

	  for (var i = 0; i < len; ++i) {
	    if (thisCopy[i] !== targetCopy[i]) {
	      x = thisCopy[i]
	      y = targetCopy[i]
	      break
	    }
	  }

	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	}

	// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
	// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
	//
	// Arguments:
	// - buffer - a Buffer to search
	// - val - a string, Buffer, or number
	// - byteOffset - an index into `buffer`; will be clamped to an int32
	// - encoding - an optional encoding, relevant is val is a string
	// - dir - true for indexOf, false for lastIndexOf
	function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
	  // Empty buffer means no match
	  if (buffer.length === 0) return -1

	  // Normalize byteOffset
	  if (typeof byteOffset === 'string') {
	    encoding = byteOffset
	    byteOffset = 0
	  } else if (byteOffset > 0x7fffffff) {
	    byteOffset = 0x7fffffff
	  } else if (byteOffset < -0x80000000) {
	    byteOffset = -0x80000000
	  }
	  byteOffset = +byteOffset  // Coerce to Number.
	  if (isNaN(byteOffset)) {
	    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
	    byteOffset = dir ? 0 : (buffer.length - 1)
	  }

	  // Normalize byteOffset: negative offsets start from the end of the buffer
	  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
	  if (byteOffset >= buffer.length) {
	    if (dir) return -1
	    else byteOffset = buffer.length - 1
	  } else if (byteOffset < 0) {
	    if (dir) byteOffset = 0
	    else return -1
	  }

	  // Normalize val
	  if (typeof val === 'string') {
	    val = Buffer.from(val, encoding)
	  }

	  // Finally, search either indexOf (if dir is true) or lastIndexOf
	  if (Buffer.isBuffer(val)) {
	    // Special case: looking for empty string/buffer always fails
	    if (val.length === 0) {
	      return -1
	    }
	    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
	  } else if (typeof val === 'number') {
	    val = val & 0xFF // Search for a byte value [0-255]
	    if (Buffer.TYPED_ARRAY_SUPPORT &&
	        typeof Uint8Array.prototype.indexOf === 'function') {
	      if (dir) {
	        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
	      } else {
	        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
	      }
	    }
	    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
	  }

	  throw new TypeError('val must be string, number or Buffer')
	}

	function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
	  var indexSize = 1
	  var arrLength = arr.length
	  var valLength = val.length

	  if (encoding !== undefined) {
	    encoding = String(encoding).toLowerCase()
	    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
	        encoding === 'utf16le' || encoding === 'utf-16le') {
	      if (arr.length < 2 || val.length < 2) {
	        return -1
	      }
	      indexSize = 2
	      arrLength /= 2
	      valLength /= 2
	      byteOffset /= 2
	    }
	  }

	  function read (buf, i) {
	    if (indexSize === 1) {
	      return buf[i]
	    } else {
	      return buf.readUInt16BE(i * indexSize)
	    }
	  }

	  var i
	  if (dir) {
	    var foundIndex = -1
	    for (i = byteOffset; i < arrLength; i++) {
	      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
	        if (foundIndex === -1) foundIndex = i
	        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
	      } else {
	        if (foundIndex !== -1) i -= i - foundIndex
	        foundIndex = -1
	      }
	    }
	  } else {
	    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
	    for (i = byteOffset; i >= 0; i--) {
	      var found = true
	      for (var j = 0; j < valLength; j++) {
	        if (read(arr, i + j) !== read(val, j)) {
	          found = false
	          break
	        }
	      }
	      if (found) return i
	    }
	  }

	  return -1
	}

	Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
	  return this.indexOf(val, byteOffset, encoding) !== -1
	}

	Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
	  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
	}

	Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
	  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
	}

	function hexWrite (buf, string, offset, length) {
	  offset = Number(offset) || 0
	  var remaining = buf.length - offset
	  if (!length) {
	    length = remaining
	  } else {
	    length = Number(length)
	    if (length > remaining) {
	      length = remaining
	    }
	  }

	  // must be an even number of digits
	  var strLen = string.length
	  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

	  if (length > strLen / 2) {
	    length = strLen / 2
	  }
	  for (var i = 0; i < length; ++i) {
	    var parsed = parseInt(string.substr(i * 2, 2), 16)
	    if (isNaN(parsed)) return i
	    buf[offset + i] = parsed
	  }
	  return i
	}

	function utf8Write (buf, string, offset, length) {
	  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
	}

	function asciiWrite (buf, string, offset, length) {
	  return blitBuffer(asciiToBytes(string), buf, offset, length)
	}

	function latin1Write (buf, string, offset, length) {
	  return asciiWrite(buf, string, offset, length)
	}

	function base64Write (buf, string, offset, length) {
	  return blitBuffer(base64ToBytes(string), buf, offset, length)
	}

	function ucs2Write (buf, string, offset, length) {
	  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
	}

	Buffer.prototype.write = function write (string, offset, length, encoding) {
	  // Buffer#write(string)
	  if (offset === undefined) {
	    encoding = 'utf8'
	    length = this.length
	    offset = 0
	  // Buffer#write(string, encoding)
	  } else if (length === undefined && typeof offset === 'string') {
	    encoding = offset
	    length = this.length
	    offset = 0
	  // Buffer#write(string, offset[, length][, encoding])
	  } else if (isFinite(offset)) {
	    offset = offset | 0
	    if (isFinite(length)) {
	      length = length | 0
	      if (encoding === undefined) encoding = 'utf8'
	    } else {
	      encoding = length
	      length = undefined
	    }
	  // legacy write(string, encoding, offset, length) - remove in v0.13
	  } else {
	    throw new Error(
	      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
	    )
	  }

	  var remaining = this.length - offset
	  if (length === undefined || length > remaining) length = remaining

	  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
	    throw new RangeError('Attempt to write outside buffer bounds')
	  }

	  if (!encoding) encoding = 'utf8'

	  var loweredCase = false
	  for (;;) {
	    switch (encoding) {
	      case 'hex':
	        return hexWrite(this, string, offset, length)

	      case 'utf8':
	      case 'utf-8':
	        return utf8Write(this, string, offset, length)

	      case 'ascii':
	        return asciiWrite(this, string, offset, length)

	      case 'latin1':
	      case 'binary':
	        return latin1Write(this, string, offset, length)

	      case 'base64':
	        // Warning: maxLength not taken into account in base64Write
	        return base64Write(this, string, offset, length)

	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return ucs2Write(this, string, offset, length)

	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = ('' + encoding).toLowerCase()
	        loweredCase = true
	    }
	  }
	}

	Buffer.prototype.toJSON = function toJSON () {
	  return {
	    type: 'Buffer',
	    data: Array.prototype.slice.call(this._arr || this, 0)
	  }
	}

	function base64Slice (buf, start, end) {
	  if (start === 0 && end === buf.length) {
	    return base64.fromByteArray(buf)
	  } else {
	    return base64.fromByteArray(buf.slice(start, end))
	  }
	}

	function utf8Slice (buf, start, end) {
	  end = Math.min(buf.length, end)
	  var res = []

	  var i = start
	  while (i < end) {
	    var firstByte = buf[i]
	    var codePoint = null
	    var bytesPerSequence = (firstByte > 0xEF) ? 4
	      : (firstByte > 0xDF) ? 3
	      : (firstByte > 0xBF) ? 2
	      : 1

	    if (i + bytesPerSequence <= end) {
	      var secondByte, thirdByte, fourthByte, tempCodePoint

	      switch (bytesPerSequence) {
	        case 1:
	          if (firstByte < 0x80) {
	            codePoint = firstByte
	          }
	          break
	        case 2:
	          secondByte = buf[i + 1]
	          if ((secondByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
	            if (tempCodePoint > 0x7F) {
	              codePoint = tempCodePoint
	            }
	          }
	          break
	        case 3:
	          secondByte = buf[i + 1]
	          thirdByte = buf[i + 2]
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
	            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
	              codePoint = tempCodePoint
	            }
	          }
	          break
	        case 4:
	          secondByte = buf[i + 1]
	          thirdByte = buf[i + 2]
	          fourthByte = buf[i + 3]
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
	            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
	              codePoint = tempCodePoint
	            }
	          }
	      }
	    }

	    if (codePoint === null) {
	      // we did not generate a valid codePoint so insert a
	      // replacement char (U+FFFD) and advance only 1 byte
	      codePoint = 0xFFFD
	      bytesPerSequence = 1
	    } else if (codePoint > 0xFFFF) {
	      // encode to utf16 (surrogate pair dance)
	      codePoint -= 0x10000
	      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
	      codePoint = 0xDC00 | codePoint & 0x3FF
	    }

	    res.push(codePoint)
	    i += bytesPerSequence
	  }

	  return decodeCodePointsArray(res)
	}

	// Based on http://stackoverflow.com/a/22747272/680742, the browser with
	// the lowest limit is Chrome, with 0x10000 args.
	// We go 1 magnitude less, for safety
	var MAX_ARGUMENTS_LENGTH = 0x1000

	function decodeCodePointsArray (codePoints) {
	  var len = codePoints.length
	  if (len <= MAX_ARGUMENTS_LENGTH) {
	    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
	  }

	  // Decode in chunks to avoid "call stack size exceeded".
	  var res = ''
	  var i = 0
	  while (i < len) {
	    res += String.fromCharCode.apply(
	      String,
	      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
	    )
	  }
	  return res
	}

	function asciiSlice (buf, start, end) {
	  var ret = ''
	  end = Math.min(buf.length, end)

	  for (var i = start; i < end; ++i) {
	    ret += String.fromCharCode(buf[i] & 0x7F)
	  }
	  return ret
	}

	function latin1Slice (buf, start, end) {
	  var ret = ''
	  end = Math.min(buf.length, end)

	  for (var i = start; i < end; ++i) {
	    ret += String.fromCharCode(buf[i])
	  }
	  return ret
	}

	function hexSlice (buf, start, end) {
	  var len = buf.length

	  if (!start || start < 0) start = 0
	  if (!end || end < 0 || end > len) end = len

	  var out = ''
	  for (var i = start; i < end; ++i) {
	    out += toHex(buf[i])
	  }
	  return out
	}

	function utf16leSlice (buf, start, end) {
	  var bytes = buf.slice(start, end)
	  var res = ''
	  for (var i = 0; i < bytes.length; i += 2) {
	    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
	  }
	  return res
	}

	Buffer.prototype.slice = function slice (start, end) {
	  var len = this.length
	  start = ~~start
	  end = end === undefined ? len : ~~end

	  if (start < 0) {
	    start += len
	    if (start < 0) start = 0
	  } else if (start > len) {
	    start = len
	  }

	  if (end < 0) {
	    end += len
	    if (end < 0) end = 0
	  } else if (end > len) {
	    end = len
	  }

	  if (end < start) end = start

	  var newBuf
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    newBuf = this.subarray(start, end)
	    newBuf.__proto__ = Buffer.prototype
	  } else {
	    var sliceLen = end - start
	    newBuf = new Buffer(sliceLen, undefined)
	    for (var i = 0; i < sliceLen; ++i) {
	      newBuf[i] = this[i + start]
	    }
	  }

	  return newBuf
	}

	/*
	 * Need to make sure that buffer isn't trying to write out of bounds.
	 */
	function checkOffset (offset, ext, length) {
	  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
	  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
	}

	Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)

	  var val = this[offset]
	  var mul = 1
	  var i = 0
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul
	  }

	  return val
	}

	Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) {
	    checkOffset(offset, byteLength, this.length)
	  }

	  var val = this[offset + --byteLength]
	  var mul = 1
	  while (byteLength > 0 && (mul *= 0x100)) {
	    val += this[offset + --byteLength] * mul
	  }

	  return val
	}

	Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length)
	  return this[offset]
	}

	Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  return this[offset] | (this[offset + 1] << 8)
	}

	Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  return (this[offset] << 8) | this[offset + 1]
	}

	Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return ((this[offset]) |
	      (this[offset + 1] << 8) |
	      (this[offset + 2] << 16)) +
	      (this[offset + 3] * 0x1000000)
	}

	Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return (this[offset] * 0x1000000) +
	    ((this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    this[offset + 3])
	}

	Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)

	  var val = this[offset]
	  var mul = 1
	  var i = 0
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul
	  }
	  mul *= 0x80

	  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

	  return val
	}

	Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)

	  var i = byteLength
	  var mul = 1
	  var val = this[offset + --i]
	  while (i > 0 && (mul *= 0x100)) {
	    val += this[offset + --i] * mul
	  }
	  mul *= 0x80

	  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

	  return val
	}

	Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length)
	  if (!(this[offset] & 0x80)) return (this[offset])
	  return ((0xff - this[offset] + 1) * -1)
	}

	Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  var val = this[offset] | (this[offset + 1] << 8)
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	}

	Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  var val = this[offset + 1] | (this[offset] << 8)
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	}

	Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return (this[offset]) |
	    (this[offset + 1] << 8) |
	    (this[offset + 2] << 16) |
	    (this[offset + 3] << 24)
	}

	Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return (this[offset] << 24) |
	    (this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    (this[offset + 3])
	}

	Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	  return ieee754.read(this, offset, true, 23, 4)
	}

	Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	  return ieee754.read(this, offset, false, 23, 4)
	}

	Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length)
	  return ieee754.read(this, offset, true, 52, 8)
	}

	Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length)
	  return ieee754.read(this, offset, false, 52, 8)
	}

	function checkInt (buf, value, offset, ext, max, min) {
	  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
	  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
	  if (offset + ext > buf.length) throw new RangeError('Index out of range')
	}

	Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) {
	    var maxBytes = Math.pow(2, 8 * byteLength) - 1
	    checkInt(this, value, offset, byteLength, maxBytes, 0)
	  }

	  var mul = 1
	  var i = 0
	  this[offset] = value & 0xFF
	  while (++i < byteLength && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) {
	    var maxBytes = Math.pow(2, 8 * byteLength) - 1
	    checkInt(this, value, offset, byteLength, maxBytes, 0)
	  }

	  var i = byteLength - 1
	  var mul = 1
	  this[offset + i] = value & 0xFF
	  while (--i >= 0 && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
	  this[offset] = (value & 0xff)
	  return offset + 1
	}

	function objectWriteUInt16 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffff + value + 1
	  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
	    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
	      (littleEndian ? i : 1 - i) * 8
	  }
	}

	Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	  } else {
	    objectWriteUInt16(this, value, offset, true)
	  }
	  return offset + 2
	}

	Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8)
	    this[offset + 1] = (value & 0xff)
	  } else {
	    objectWriteUInt16(this, value, offset, false)
	  }
	  return offset + 2
	}

	function objectWriteUInt32 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffffffff + value + 1
	  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
	    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
	  }
	}

	Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset + 3] = (value >>> 24)
	    this[offset + 2] = (value >>> 16)
	    this[offset + 1] = (value >>> 8)
	    this[offset] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, true)
	  }
	  return offset + 4
	}

	Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24)
	    this[offset + 1] = (value >>> 16)
	    this[offset + 2] = (value >>> 8)
	    this[offset + 3] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, false)
	  }
	  return offset + 4
	}

	Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1)

	    checkInt(this, value, offset, byteLength, limit - 1, -limit)
	  }

	  var i = 0
	  var mul = 1
	  var sub = 0
	  this[offset] = value & 0xFF
	  while (++i < byteLength && (mul *= 0x100)) {
	    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
	      sub = 1
	    }
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1)

	    checkInt(this, value, offset, byteLength, limit - 1, -limit)
	  }

	  var i = byteLength - 1
	  var mul = 1
	  var sub = 0
	  this[offset + i] = value & 0xFF
	  while (--i >= 0 && (mul *= 0x100)) {
	    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
	      sub = 1
	    }
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
	  if (value < 0) value = 0xff + value + 1
	  this[offset] = (value & 0xff)
	  return offset + 1
	}

	Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	  } else {
	    objectWriteUInt16(this, value, offset, true)
	  }
	  return offset + 2
	}

	Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8)
	    this[offset + 1] = (value & 0xff)
	  } else {
	    objectWriteUInt16(this, value, offset, false)
	  }
	  return offset + 2
	}

	Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	    this[offset + 2] = (value >>> 16)
	    this[offset + 3] = (value >>> 24)
	  } else {
	    objectWriteUInt32(this, value, offset, true)
	  }
	  return offset + 4
	}

	Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
	  if (value < 0) value = 0xffffffff + value + 1
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24)
	    this[offset + 1] = (value >>> 16)
	    this[offset + 2] = (value >>> 8)
	    this[offset + 3] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, false)
	  }
	  return offset + 4
	}

	function checkIEEE754 (buf, value, offset, ext, max, min) {
	  if (offset + ext > buf.length) throw new RangeError('Index out of range')
	  if (offset < 0) throw new RangeError('Index out of range')
	}

	function writeFloat (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
	  }
	  ieee754.write(buf, value, offset, littleEndian, 23, 4)
	  return offset + 4
	}

	Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, true, noAssert)
	}

	Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, false, noAssert)
	}

	function writeDouble (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
	  }
	  ieee754.write(buf, value, offset, littleEndian, 52, 8)
	  return offset + 8
	}

	Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, true, noAssert)
	}

	Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, false, noAssert)
	}

	// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
	Buffer.prototype.copy = function copy (target, targetStart, start, end) {
	  if (!start) start = 0
	  if (!end && end !== 0) end = this.length
	  if (targetStart >= target.length) targetStart = target.length
	  if (!targetStart) targetStart = 0
	  if (end > 0 && end < start) end = start

	  // Copy 0 bytes; we're done
	  if (end === start) return 0
	  if (target.length === 0 || this.length === 0) return 0

	  // Fatal error conditions
	  if (targetStart < 0) {
	    throw new RangeError('targetStart out of bounds')
	  }
	  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
	  if (end < 0) throw new RangeError('sourceEnd out of bounds')

	  // Are we oob?
	  if (end > this.length) end = this.length
	  if (target.length - targetStart < end - start) {
	    end = target.length - targetStart + start
	  }

	  var len = end - start
	  var i

	  if (this === target && start < targetStart && targetStart < end) {
	    // descending copy from end
	    for (i = len - 1; i >= 0; --i) {
	      target[i + targetStart] = this[i + start]
	    }
	  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
	    // ascending copy from start
	    for (i = 0; i < len; ++i) {
	      target[i + targetStart] = this[i + start]
	    }
	  } else {
	    Uint8Array.prototype.set.call(
	      target,
	      this.subarray(start, start + len),
	      targetStart
	    )
	  }

	  return len
	}

	// Usage:
	//    buffer.fill(number[, offset[, end]])
	//    buffer.fill(buffer[, offset[, end]])
	//    buffer.fill(string[, offset[, end]][, encoding])
	Buffer.prototype.fill = function fill (val, start, end, encoding) {
	  // Handle string cases:
	  if (typeof val === 'string') {
	    if (typeof start === 'string') {
	      encoding = start
	      start = 0
	      end = this.length
	    } else if (typeof end === 'string') {
	      encoding = end
	      end = this.length
	    }
	    if (val.length === 1) {
	      var code = val.charCodeAt(0)
	      if (code < 256) {
	        val = code
	      }
	    }
	    if (encoding !== undefined && typeof encoding !== 'string') {
	      throw new TypeError('encoding must be a string')
	    }
	    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
	      throw new TypeError('Unknown encoding: ' + encoding)
	    }
	  } else if (typeof val === 'number') {
	    val = val & 255
	  }

	  // Invalid ranges are not set to a default, so can range check early.
	  if (start < 0 || this.length < start || this.length < end) {
	    throw new RangeError('Out of range index')
	  }

	  if (end <= start) {
	    return this
	  }

	  start = start >>> 0
	  end = end === undefined ? this.length : end >>> 0

	  if (!val) val = 0

	  var i
	  if (typeof val === 'number') {
	    for (i = start; i < end; ++i) {
	      this[i] = val
	    }
	  } else {
	    var bytes = Buffer.isBuffer(val)
	      ? val
	      : utf8ToBytes(new Buffer(val, encoding).toString())
	    var len = bytes.length
	    for (i = 0; i < end - start; ++i) {
	      this[i + start] = bytes[i % len]
	    }
	  }

	  return this
	}

	// HELPER FUNCTIONS
	// ================

	var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

	function base64clean (str) {
	  // Node strips out invalid characters like \n and \t from the string, base64-js does not
	  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
	  // Node converts strings with length < 2 to ''
	  if (str.length < 2) return ''
	  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
	  while (str.length % 4 !== 0) {
	    str = str + '='
	  }
	  return str
	}

	function stringtrim (str) {
	  if (str.trim) return str.trim()
	  return str.replace(/^\s+|\s+$/g, '')
	}

	function toHex (n) {
	  if (n < 16) return '0' + n.toString(16)
	  return n.toString(16)
	}

	function utf8ToBytes (string, units) {
	  units = units || Infinity
	  var codePoint
	  var length = string.length
	  var leadSurrogate = null
	  var bytes = []

	  for (var i = 0; i < length; ++i) {
	    codePoint = string.charCodeAt(i)

	    // is surrogate component
	    if (codePoint > 0xD7FF && codePoint < 0xE000) {
	      // last char was a lead
	      if (!leadSurrogate) {
	        // no lead yet
	        if (codePoint > 0xDBFF) {
	          // unexpected trail
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	          continue
	        } else if (i + 1 === length) {
	          // unpaired lead
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	          continue
	        }

	        // valid lead
	        leadSurrogate = codePoint

	        continue
	      }

	      // 2 leads in a row
	      if (codePoint < 0xDC00) {
	        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	        leadSurrogate = codePoint
	        continue
	      }

	      // valid surrogate pair
	      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
	    } else if (leadSurrogate) {
	      // valid bmp char, but last char was a lead
	      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	    }

	    leadSurrogate = null

	    // encode utf8
	    if (codePoint < 0x80) {
	      if ((units -= 1) < 0) break
	      bytes.push(codePoint)
	    } else if (codePoint < 0x800) {
	      if ((units -= 2) < 0) break
	      bytes.push(
	        codePoint >> 0x6 | 0xC0,
	        codePoint & 0x3F | 0x80
	      )
	    } else if (codePoint < 0x10000) {
	      if ((units -= 3) < 0) break
	      bytes.push(
	        codePoint >> 0xC | 0xE0,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      )
	    } else if (codePoint < 0x110000) {
	      if ((units -= 4) < 0) break
	      bytes.push(
	        codePoint >> 0x12 | 0xF0,
	        codePoint >> 0xC & 0x3F | 0x80,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      )
	    } else {
	      throw new Error('Invalid code point')
	    }
	  }

	  return bytes
	}

	function asciiToBytes (str) {
	  var byteArray = []
	  for (var i = 0; i < str.length; ++i) {
	    // Node's code seems to be doing this and not & 0x7F..
	    byteArray.push(str.charCodeAt(i) & 0xFF)
	  }
	  return byteArray
	}

	function utf16leToBytes (str, units) {
	  var c, hi, lo
	  var byteArray = []
	  for (var i = 0; i < str.length; ++i) {
	    if ((units -= 2) < 0) break

	    c = str.charCodeAt(i)
	    hi = c >> 8
	    lo = c % 256
	    byteArray.push(lo)
	    byteArray.push(hi)
	  }

	  return byteArray
	}

	function base64ToBytes (str) {
	  return base64.toByteArray(base64clean(str))
	}

	function blitBuffer (src, dst, offset, length) {
	  for (var i = 0; i < length; ++i) {
	    if ((i + offset >= dst.length) || (i >= src.length)) break
	    dst[i + offset] = src[i]
	  }
	  return i
	}

	function isnan (val) {
	  return val !== val // eslint-disable-line no-self-compare
	}

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }),
/* 21 */
/***/ (function(module, exports) {

	'use strict'

	exports.byteLength = byteLength
	exports.toByteArray = toByteArray
	exports.fromByteArray = fromByteArray

	var lookup = []
	var revLookup = []
	var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

	var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
	for (var i = 0, len = code.length; i < len; ++i) {
	  lookup[i] = code[i]
	  revLookup[code.charCodeAt(i)] = i
	}

	// Support decoding URL-safe base64 strings, as Node.js does.
	// See: https://en.wikipedia.org/wiki/Base64#URL_applications
	revLookup['-'.charCodeAt(0)] = 62
	revLookup['_'.charCodeAt(0)] = 63

	function getLens (b64) {
	  var len = b64.length

	  if (len % 4 > 0) {
	    throw new Error('Invalid string. Length must be a multiple of 4')
	  }

	  // Trim off extra bytes after placeholder bytes are found
	  // See: https://github.com/beatgammit/base64-js/issues/42
	  var validLen = b64.indexOf('=')
	  if (validLen === -1) validLen = len

	  var placeHoldersLen = validLen === len
	    ? 0
	    : 4 - (validLen % 4)

	  return [validLen, placeHoldersLen]
	}

	// base64 is 4/3 + up to two characters of the original data
	function byteLength (b64) {
	  var lens = getLens(b64)
	  var validLen = lens[0]
	  var placeHoldersLen = lens[1]
	  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
	}

	function _byteLength (b64, validLen, placeHoldersLen) {
	  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
	}

	function toByteArray (b64) {
	  var tmp
	  var lens = getLens(b64)
	  var validLen = lens[0]
	  var placeHoldersLen = lens[1]

	  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

	  var curByte = 0

	  // if there are placeholders, only get up to the last complete 4 chars
	  var len = placeHoldersLen > 0
	    ? validLen - 4
	    : validLen

	  for (var i = 0; i < len; i += 4) {
	    tmp =
	      (revLookup[b64.charCodeAt(i)] << 18) |
	      (revLookup[b64.charCodeAt(i + 1)] << 12) |
	      (revLookup[b64.charCodeAt(i + 2)] << 6) |
	      revLookup[b64.charCodeAt(i + 3)]
	    arr[curByte++] = (tmp >> 16) & 0xFF
	    arr[curByte++] = (tmp >> 8) & 0xFF
	    arr[curByte++] = tmp & 0xFF
	  }

	  if (placeHoldersLen === 2) {
	    tmp =
	      (revLookup[b64.charCodeAt(i)] << 2) |
	      (revLookup[b64.charCodeAt(i + 1)] >> 4)
	    arr[curByte++] = tmp & 0xFF
	  }

	  if (placeHoldersLen === 1) {
	    tmp =
	      (revLookup[b64.charCodeAt(i)] << 10) |
	      (revLookup[b64.charCodeAt(i + 1)] << 4) |
	      (revLookup[b64.charCodeAt(i + 2)] >> 2)
	    arr[curByte++] = (tmp >> 8) & 0xFF
	    arr[curByte++] = tmp & 0xFF
	  }

	  return arr
	}

	function tripletToBase64 (num) {
	  return lookup[num >> 18 & 0x3F] +
	    lookup[num >> 12 & 0x3F] +
	    lookup[num >> 6 & 0x3F] +
	    lookup[num & 0x3F]
	}

	function encodeChunk (uint8, start, end) {
	  var tmp
	  var output = []
	  for (var i = start; i < end; i += 3) {
	    tmp =
	      ((uint8[i] << 16) & 0xFF0000) +
	      ((uint8[i + 1] << 8) & 0xFF00) +
	      (uint8[i + 2] & 0xFF)
	    output.push(tripletToBase64(tmp))
	  }
	  return output.join('')
	}

	function fromByteArray (uint8) {
	  var tmp
	  var len = uint8.length
	  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
	  var parts = []
	  var maxChunkLength = 16383 // must be multiple of 3

	  // go through the array every three bytes, we'll deal with trailing stuff later
	  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
	    parts.push(encodeChunk(
	      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)
	    ))
	  }

	  // pad the end with zeros, but make sure to not forget the extra bytes
	  if (extraBytes === 1) {
	    tmp = uint8[len - 1]
	    parts.push(
	      lookup[tmp >> 2] +
	      lookup[(tmp << 4) & 0x3F] +
	      '=='
	    )
	  } else if (extraBytes === 2) {
	    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
	    parts.push(
	      lookup[tmp >> 10] +
	      lookup[(tmp >> 4) & 0x3F] +
	      lookup[(tmp << 2) & 0x3F] +
	      '='
	    )
	  }

	  return parts.join('')
	}


/***/ }),
/* 22 */
/***/ (function(module, exports) {

	exports.read = function (buffer, offset, isLE, mLen, nBytes) {
	  var e, m
	  var eLen = (nBytes * 8) - mLen - 1
	  var eMax = (1 << eLen) - 1
	  var eBias = eMax >> 1
	  var nBits = -7
	  var i = isLE ? (nBytes - 1) : 0
	  var d = isLE ? -1 : 1
	  var s = buffer[offset + i]

	  i += d

	  e = s & ((1 << (-nBits)) - 1)
	  s >>= (-nBits)
	  nBits += eLen
	  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

	  m = e & ((1 << (-nBits)) - 1)
	  e >>= (-nBits)
	  nBits += mLen
	  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

	  if (e === 0) {
	    e = 1 - eBias
	  } else if (e === eMax) {
	    return m ? NaN : ((s ? -1 : 1) * Infinity)
	  } else {
	    m = m + Math.pow(2, mLen)
	    e = e - eBias
	  }
	  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
	}

	exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
	  var e, m, c
	  var eLen = (nBytes * 8) - mLen - 1
	  var eMax = (1 << eLen) - 1
	  var eBias = eMax >> 1
	  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
	  var i = isLE ? 0 : (nBytes - 1)
	  var d = isLE ? 1 : -1
	  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

	  value = Math.abs(value)

	  if (isNaN(value) || value === Infinity) {
	    m = isNaN(value) ? 1 : 0
	    e = eMax
	  } else {
	    e = Math.floor(Math.log(value) / Math.LN2)
	    if (value * (c = Math.pow(2, -e)) < 1) {
	      e--
	      c *= 2
	    }
	    if (e + eBias >= 1) {
	      value += rt / c
	    } else {
	      value += rt * Math.pow(2, 1 - eBias)
	    }
	    if (value * c >= 2) {
	      e++
	      c /= 2
	    }

	    if (e + eBias >= eMax) {
	      m = 0
	      e = eMax
	    } else if (e + eBias >= 1) {
	      m = ((value * c) - 1) * Math.pow(2, mLen)
	      e = e + eBias
	    } else {
	      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
	      e = 0
	    }
	  }

	  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

	  e = (e << mLen) | m
	  eLen += mLen
	  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

	  buffer[offset + i - d] |= s * 128
	}


/***/ }),
/* 23 */
/***/ (function(module, exports) {

	var toString = {}.toString;

	module.exports = Array.isArray || function (arr) {
	  return toString.call(arr) == '[object Array]';
	};


/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * VMAP Parser module.
	 * @module VmapParser
	 */

	var VmapXMLParserHelper = __webpack_require__(25);

	var VmapParser = function (nMsecTimeout, options) {

	    var _logger = __webpack_require__(3);
	    var _prefix = 'VMAP Parser:';
	    var _uaParser = __webpack_require__(9);
	    var _ua = _uaParser();

	    var _callback = null;
	    var _options = options || {};
	    var _nTimeOut = nMsecTimeout && nMsecTimeout > 0 ? nMsecTimeout : 1000;	// 1 second default
	    var _nStopTime = Date.now() + _nTimeOut;

	    var _helper = new VmapXMLParserHelper();
	    var _vmapVersion = '';
	    
	    var _vmapObj = {};
	    
	    var _arrErrorUrls = [];

	    _logger.always(_prefix, 'Version 1.0.5');
	    
	    _options.vmap = true;
	    
	    function getInnerHTML(node) {
	        var browser = _ua.browser.name.toLowerCase();
			var value;
			if (browser === 'ie') {
				value = (new XMLSerializer()).serializeToString(node);
				value = value.replace(/&lt;/g, '<');
				value = value.replace(/&gt;/g, '>');
				var nPos = value.indexOf('>');
				if (nPos > 0) {
					value = value.substr(nPos + 1);
				}
				nPos = value.lastIndexOf('</');
				if (nPos > 0) {
					value = value.substr(0, nPos);
				}
			}
			else {
				value = node.innerHTML;
			}
			return value;
	    }

	    function getVMAPVersion(vmapNode) {
	        var version = 'unknown';
	        if (vmapNode) {
	            version = _helper.getNodeAttributeValue(vmapNode, 'version');
	            version = version.trim();
	            if (version.length > 3) {
	                version = version.substr(0, 3);
	            }
	        }
	        return version;
	    }

	    function substituteErrorCode(arrErrorUrls, errorCode) {
	        if (arrErrorUrls && arrErrorUrls.length > 0) {
	            for (var i = 0; i < arrErrorUrls.length; i++) {
	                arrErrorUrls[i] = arrErrorUrls[i].replace('[ERROR_CODE]', errorCode);
	            }
	        }
	    }

	    function isInArray(arr, value) {
	        for (var i = 0; i < arr.length; i++) {
	            if (arr[i] === value) {
	                return true;
	            }
	        }
	        return false;
	    }
	    
	    function addTrackings(parentNode, arrTrackings) {
	        var nodes = _helper.getSubNodes(parentNode, 'vmap:Tracking');
	        if (nodes) {
	            for (var i = 0; i < nodes.length; i++) {
	                var node = nodes[i];
	                var url = _helper.getNodeValues(node);
	                if (url) {
	                    var event = _helper.getNodeAttributeValue(node, 'event');
	                    if (event) {
	                    	var arr = null;
	                    	for (var j = 0; j < arrTrackings.length; j++) {
	                    		if (arrTrackings[j].event === event) {
	                    			arr = arrTrackings[j].uris;
	                    			break;
	                    		}
	                    	}
	                    	if (!arr) {
	                    		arr = [];
	                    		arrTrackings.push({event: event, uris: arr});
	                    	}
	                        if (arr.length > 0) {
	                            if (!isInArray(arr, url)) {
	                                arr.push(url);
	                            }
	                        }
	                        else {
	                            arr.push(url);
	                        }
	                    }
	                }
	            }
	        }
	    }

	    function addExtensions(obj, parentNode) {
	        if (parentNode) {
	            var extensions = _helper.getSubNode(parentNode, 'vmap:Extensions');
	            if (extensions) {
	            	obj.extensions = [];
	            	var extensionNodes = _helper.getSubNodes(extensions, 'vmap:Extension');
	            	if (extensionNodes) {
	            		for (var i = 0; i < extensionNodes.length; i++) {
	            			var value = getInnerHTML(extensionNodes[i]);
	            			if (value) {
	            				value = trimXml(value);
	            				if (value.length > 0) {
	                                var type = _helper.getNodeAttributeValue(extensionNodes[i], 'type');
	                                if (type) {
	                                	obj.extensions.push({type: type, xmlData: value});
	                                }
	            				}
	            			}
	            		}
	            	}
	            }
	        }
	    }

	    function trimXml(strVmapXml) {
	        var nPos = strVmapXml.indexOf('<');
	        var strXml = strVmapXml.substr(nPos === -1 ? 0 : nPos);
	        nPos = strXml.lastIndexOf('>');
	        if (nPos !== -1) {
	            strXml = strXml.substr(0, nPos + 1);
	        }
	        return strXml.trim();
	    }

	    function isValidVmapVersion(vmapVersion) {
	        return vmapVersion === '1.0';
	    }

	    function reportError(errCode, message, trackings, continueProcess) {
	        if (trackings && trackings.length > 0) {
	        	for (var i = 0; i < trackings.length; i++) {
	        		if (trackings[i].event === 'error') {
	        	        substituteErrorCode(trackings[i].uris, errCode);
	        	        _logger.error(_prefix, 'Error ' + errCode + ' - ' + message);
	        			_arrErrorUrls = _arrErrorUrls.concat(trackings[i].uris);
	        			break;
	        		}
	        	}
	        }
	        if (!continueProcess && _callback) {
	        	_callback(false, null, _arrErrorUrls);
	        	_callback = null;
	        }
			if (_callback && allBreaksParsed()) {
				finishParsing();
			}
	    }

	    function parseXML(strVmapXml) {
	        var strXml = trimXml(strVmapXml);
	        if (strXml.length === 0) {
	            reportError('1000', 'Empty VMAP xml');
	            return;
	        }
	        var xmlDoc = null;
	        if (typeof window.DOMParser !== 'undefined') {
	            xmlDoc = (new DOMParser()).parseFromString(strXml, 'text/xml');
	            if (xmlDoc.documentElement.nodeName === 'parsererror') {
	                try {
	                    _logger.error(_prefix, 'Error reason = ' + xmlDoc.documentElement.childNodes[0].nodeValue);
	                }
	                catch (e) {
	                }
	                reportError('1002', 'VMAP XML parsing error');
	                return;
	            }
	        }
	        else if (typeof window.ActiveXObject !== 'undefined') {
	            try {
	                xmlDoc = new window.ActiveXObject('Microsoft.XMLDOM');
	                xmlDoc.loadXML(strXml);
	                if (xmlDoc.parseError.errorCode !== 0) {
	                    _logger.error(_prefix, xmlDoc.parseError);
	                    reportError('1002', xmlDoc.parseError.errorCode + ', Error reason = ' + xmlDoc.parseError.reason);
	                    return;
	                }
	            }
	            catch (ex) {
	                _logger.error(_prefix, 'Failed to parse vmap xml by window.ActiveXObject(Microsoft.XMLDOM)', ex);
	                reportError('1002', 'Failed to parse vmap xml by window.ActiveXObject(Microsoft.XMLDOM)');
	                return;
	            }
	        }
	        else {
	            _logger.error(_prefix, 'Failed to parse vmap xml by window.ActiveXObject(Microsoft.XMLDOM)');
	            reportError('1002', 'Failed to get vmap xml');
	            return;
	        }
	        if (!xmlDoc) {
	            reportError('1002', 'VMAP XML parsing error');
	            return;
	        }
	        var vmapNode = _helper.getSubNode(xmlDoc, 'vmap:VMAP');
	        if (!vmapNode || !vmapNode.firstChild) {
	            reportError('1000', 'VMAP node does not exist');
	            return;
	        }

	        var vmapVersion = getVMAPVersion(vmapNode);
	        if (isValidVmapVersion(vmapVersion)) {
	        	_vmapVersion = vmapVersion;
	            _vmapObj.version = vmapVersion;

	            var breaks = _helper.getSubNodes(vmapNode, 'vmap:AdBreak');
	            if (!breaks || breaks.length === 0) {
	            	reportError('900', 'no AdBreak available');
	                return;
	            }
	            
	            var i;
	            _vmapObj.adBreaks = [];
	            for (i = 0; i < breaks.length; i++) {
	            	// make sure each break has id
	            	var id = _helper.getNodeAttributeValue(breaks[i], 'breakId');
	            	if (!id) {
	                    var attr = xmlDoc.createAttribute('breakId');
	                    id = 'apn_vmap_' + i;
	                    attr.value = id;
	                    breaks[i].setAttributeNode(attr);
					}
					else {
						// make break id unique
						id = (id + '_' + i);
					}
	                var breakObj = {breakId: id, startTime: Date.now()};
	                _vmapObj.adBreaks.push(breakObj);
	            }
	            
	            for (i = 0; i < _vmapObj.adBreaks.length; i++) {
	            	processBreak(breaks[i], _vmapObj.adBreaks[i]);
	            }
	        }
	        else {
	            reportError('1001', 'VMAP version not supported');
	        }
	        addExtensions(_vmapObj, vmapNode);
	    }
	    
	    function getBreakById(id) {
	    	for (var i = 0; i < _vmapObj.adBreaks.length; i++) {
	    		if (_vmapObj.adBreaks[i].breakId === id) {
	    			return _vmapObj.adBreaks[i];
	    		}
	    	}
	    	return null;
	    }

	    function allBreaksParsed() {
	    	for (var i = 0; i < _vmapObj.adBreaks.length; i++) {
	    		if (!_vmapObj.adBreaks[i].endTime) {
	    			return false;
	    		}
	    	}
	    	return true;
	    }
	    
	    function merge2breaks(break1, break2) {
	    	// merge adSources
	    	if (break1.adSource) {
	    		if (break2.adSource) {
	    			if (!break1.adSource.customAdData && break2.adSource.customAdData) {
	    				break1.adSource.customAdData = break2.adSource.customAdData;
	    			}
	    			if (!break1.adSource.vastData && break2.adSource.vastData) {
	    				break1.adSource.vastData = break2.adSource.vastData;
	    			}
	    			else if (break1.adSource.vastData && break2.adSource.vastData) {
	    				for (var sequence in break2.adSource.vastData) {
	    					if (break1.adSource.vastData[sequence]) {
	    						break1.adSource.vastData[sequence] = break1.adSource.vastData[sequence].concat(break2.adSource.vastData[sequence]);
	    					}
	    					else {
	    						break1.adSource.vastData[sequence] = break2.adSource.vastData[sequence];
	    					}
	    				}
	    			}
	    		}
	    	}
	    	else if (break2.adSource) {
	    		break1.adSource = break2.adSource;
	    	}
	    	
	    	// merge extensions
	    	if (break1.extensions && break2.extensions) {
	    		break1.extensions = break1.extensions.concat(break2.extensions);
	    	}
	    	else if (!break1.extensions && break2.extensions) {
	    		break1.extensions = break2.extensions;
	    	}
	    	
	    	// merge trackings
	    	if (break2.trackings) {
	    		if (!break1.trackings) {
	    			break1.trackings = [];
	    		}
	    		for (var i = 0; i < break2.trackings.length; i++) {
	    			var found = false;
	    			for (var j = 0; j < break1.trackings.length; j++) {
	    				if (break2.trackings[i].event === break1.trackings[j].event) {
	    					found = true;
	    					break1.trackings[j].uris = break1.trackings[j].uris.concat(break2.trackings[i].uris);
	    					break;
	    				}
	    			}
	    			if (!found) {
	    				break1.trackings.push(break2.trackings[i]);
	    			}
	    		}
	    	}
	    }
	    
	    function mergeBreaks() {
	    	for (var i = 0; i < _vmapObj.adBreaks.length; i++) {
	    		var breakObj = _vmapObj.adBreaks[i];
	    		if (i < _vmapObj.adBreaks.length - 1) {
	    			for (var j = i + 1; j < _vmapObj.adBreaks.length;) {
	    				if (breakObj.timeOffset === _vmapObj.adBreaks[j].timeOffset) {
	    					merge2breaks(breakObj, _vmapObj.adBreaks[j]);
	    	    			_vmapObj.adBreaks.splice(j, 1);
	    				}
	    				else {
	    					j++;
	    				}
	    			}
	    		}
	    	}
	     }

	    function finishParsing() {
	    	for (var i = 0; i < _vmapObj.adBreaks.length;) {
	    		var breakObj = _vmapObj.adBreaks[i];
	    		if (!breakObj.timeOffset) {
	    			_vmapObj.adBreaks.splice(i, 1);
		            _logger.error(_prefix, 'AdBreak does not have timeOffset. Remove break object from response object.');
		            continue;
	    		}
	    		if (!breakObj.breakType) {
	    			_vmapObj.adBreaks.splice(i, 1);
		            _logger.error(_prefix, 'AdBreak does not have breakType. Remove break object from response object.');
		            continue;
	    		}
	    		var validSource = false;
	    		var validTrackings = false;
	    		if (breakObj.adSource) {
	    			validSource = true;
	    			if (!breakObj.adSource.vastData && !breakObj.adSource.customAdData) {
	    				validSource = false;
	        			delete breakObj.adSource;
			            _logger.error(_prefix, 'AdBreak does not have valid AdSource. Remove adSource object from break object.');
	    			}
	    		}
	    		if (breakObj.trackings) {
	    			validTrackings = true;
	    			if (breakObj.trackings.length === 0) {
	    				validTrackings = false;
	    				delete breakObj.trackings;
			            _logger.error(_prefix, 'AdBreak does not have valid tracking event. Remove trackings object from break object.');
	    			}
	    		}
	    		if (!validSource && !validTrackings) {
	    			_vmapObj.adBreaks.splice(i, 1);
		            _logger.error(_prefix, 'AdBreak does not have valid AdSource and tracking event. Remove break object from response object.');
	    		}
	    		else {
	    			i++;
	    		}
	    	}
	    	if (_vmapObj.adBreaks.length === 0) {
	        	reportError('900', 'No AdBreaks have been resolved');
	    	}
	    	else {
	    		mergeBreaks();
	        	_callback(true, _vmapObj, _arrErrorUrls);
	        	_callback = null;
	    	}
	    }
	    
	    function addVastDataBySequence(sequence, obj, data) {
	    	if (obj[sequence]) {
	    		obj[sequence].push(data);
	    	}
	    	else {
	    		obj[sequence] = [data];
	    	}
	    }

		function processValue(succ, id, selectedData, errorUrls) {
			var breakObj = getBreakById(id);
			if (!breakObj) {
	        	reportError('900', 'failed to found AdBreak after VAST parsing');
	        	return;
			}
	    	breakObj.endTime = Date.now();
			if (succ) {
				if (breakObj.adSource.templateType !== 'proprietary') {
					if (Array.isArray(selectedData)) {
						var i;
						for (i = 0; i < selectedData.length;) {
							if (selectedData[i].vastVersion.substr(0, 1) !== breakObj.adSource.templateType.substr(4, 1)) {
					            _logger.error(_prefix, 'VAST version ' + selectedData[i].vastVersion + ' does not match template type ' + breakObj.adSource.templateType);
					        	selectedData.splice(i, 1);
							}
							else {
								i++;
							}
						}
						if (selectedData.length > 0) {
							breakObj.adSource.vastData = {};
							for (i = 0; i < selectedData.length; i++) {
								var sequence = parseInt(selectedData[i].sequence);
								addVastDataBySequence(sequence, breakObj.adSource.vastData, selectedData[i]);
							}
						}
					}
					else {
						if (selectedData.vastVersion.substr(0, 1) !== breakObj.adSource.templateType.substr(4, 1)) {
				        	reportError('1005', 'invalid AdSource template type', breakObj.trackings, true);
						}
						else {
							breakObj.adSource.vastData = selectedData;
						}
					}
				}
				else {
					breakObj.adSource.vastData = selectedData;
				}
			}
			else {
				if (errorUrls && errorUrls.length > 0) {
					_arrErrorUrls = _arrErrorUrls.concat(errorUrls);
				}
				if (selectedData.substr(0,4) === 'vast') {
					selectedData = selectedData.substr(4);
		        	reportError(selectedData, 'VAST parsing error', breakObj.trackings, true);
				}
				else if (selectedData === 'Timeout') {
		        	reportError('1007', 'VAST parsing timeout', breakObj.trackings, true);
				}
				else {
		        	reportError('900', 'VAST parsing error', breakObj.trackings, true);
				}
			}
			
			if (_callback && allBreaksParsed()) {
				finishParsing();
			}
		}
		
	    function processBreak(breakNode, breakObj) {
	        addExtensions(breakObj, breakNode);
	        
	        var trackings = _helper.getSubNode(breakNode, 'vmap:TrackingEvents');
	    	if (trackings) {
	    		breakObj.trackings = [];
	    		addTrackings(trackings, breakObj.trackings);
	    	}
	 
	        var attr = _helper.getNodeAttributeValue(breakNode, 'timeOffset');
	        if (!attr) {
	        	breakObj.endTime = Date.now();
	        	reportError('900', 'missing timeOffset attribute in AdBreak node', breakObj.trackings, true);
	            return;
	        }
	        breakObj.timeOffset = attr;
	        
	        attr = _helper.getNodeAttributeValue(breakNode, 'breakType');
	        if (!attr) {
	        	breakObj.endTime = Date.now();
	        	reportError('1003', 'AdBreak not supported', breakObj.trackings, true);
	            return;
	        }
	        breakObj.breakType = attr;
	        
	        attr = _helper.getNodeAttributeValue(breakNode, 'repeatAfter');
	        if (attr) {
	        	breakObj.repeatAfter = attr;
	        }

	        var adSourceNode = _helper.getSubNode(breakNode, 'vmap:AdSource');
	        if (adSourceNode) {
	            var adSource = {};
	            breakObj.adSource = adSource;
	 
	            attr = _helper.getNodeAttributeValue(adSourceNode, 'id');
	            if (attr) {
	            	adSource.id = attr;
	            }
	            attr = _helper.getNodeAttributeBooleanValue(adSourceNode, 'allowMultipleAds', true);
	            if (attr) {
	            	adSource.allowMultipleAds = attr;
	            }
	            attr = _helper.getNodeAttributeValue(adSourceNode, 'followRedirects');
	            if (attr) {
	            	adSource.followRedirects = (attr === 'true');
	            }
	            
				var VastParser = __webpack_require__(26);
				var timeout = _nStopTime - Date.now();
	            var value;
	            var sourceNode = _helper.getSubNode(adSourceNode, 'vmap:VASTAdData');
	            if (sourceNode) {
	    			value = getInnerHTML(sourceNode);
	            	if (!value) {
	                	breakObj.endTime = Date.now();
	                	reportError('1004', 'empty VASTAdData for AdBreak', breakObj.trackings, true);
	                    return;
	            	}
	            	adSource.templateType = 'vast3';
	    		    VastParser.parse(value, processValue, breakObj.breakId, timeout, null, null, _options);
	            }
	            else {
	                sourceNode = _helper.getSubNode(adSourceNode, 'vmap:CustomAdData');
	                if (sourceNode) {
	                	breakObj.endTime = Date.now();
	                	value = _helper.getNodeValues(sourceNode);
	                	if (!value) {
	                    	reportError('1004', 'empty CustomAdData for AdBreak', breakObj.trackings, true);
	                        return;
	                	}
	                    attr = _helper.getNodeAttributeValue(sourceNode, 'templateType');
	                    if (!attr) {
	                    	reportError('1005', 'missing templateType attribute in CustomAdData node', breakObj.trackings, true);
	                        return;
	                    }
	                	adSource.templateType = attr;
	                	adSource.customAdData = value;
	            		if (_callback && allBreaksParsed()) {
	            			finishParsing();
	            		}
	                }
	                else {
	                    sourceNode = _helper.getSubNode(adSourceNode, 'vmap:AdTagURI');
	                    if (sourceNode) {
	                    	value = _helper.getNodeValues(sourceNode);
	                    	if (!value) {
	                        	breakObj.endTime = Date.now();
	                        	reportError('1004', 'empty AdTagURI for AdBreak', breakObj.trackings, true);
	                            return;
	                    	}
	                        attr = _helper.getNodeAttributeValue(sourceNode, 'templateType');
	                        if (!attr) {
	                        	breakObj.endTime = Date.now();
	                        	reportError('1005', 'missing templateType attribute in AdTagURI node', breakObj.trackings, true);
	                            return;
	                        }
	                    	adSource.templateType = attr;
	        			    var UrlLoader = __webpack_require__(11);
	        			    UrlLoader.load(value,
	        			        function(error, responseText) {
	        			    		if (error) {
	        			    			processValue(false, breakObj.breakId, error === 'Timeout' ? 'vast1007' : 'vast1008');
	        			    		}
	        			    		else {
	        			    			timeout = _nStopTime - Date.now();
	    				    		    VastParser.parse(responseText, processValue, breakObj.breakId, timeout, null, null, _options);
	         			    		}
	        			       }, timeout);
	                    }
	                }
	            }
	        }
	    }

	    this.parse = function (strVmapXml, callback) {
	        _callback = callback;
	        parseXML(strVmapXml);
	    };
	};

	function findBreakByTime(adBreaks, timeOffset) {
		for (var i = 0; i < adBreaks.length; i++) {
			if (adBreaks[i].timeOffset === timeOffset) {
				return adBreaks[i];
			}
		}
		return null;
	}

	function findEventObjByEventName(trackings, eventName) {
		for (var i = 0; i < trackings.length; i++) {
			if (trackings[i].event === eventName) {
				return trackings[i];
			}
		}
		return null;
	}

	function mergeVmapData(vmapData1, vmapData2) {
		if (!vmapData1) {
			return vmapData2;
		}
		if (!vmapData2) {
			return vmapData1;
		}
		
		// merge extensions
		if (vmapData2.extensions && vmapData2.extensions.length > 0) {
			if (!vmapData1.extensions) {
				vmapData1.extensions = [];
			}
			vmapData1.extensions = vmapData1.extensions.concat(vmapData2.extensions);
		}
		
		// merge breaks
		if (vmapData2.adBreaks && vmapData2.adBreaks.length > 0) {
			if (!vmapData1.adBreaks) {
				vmapData1.adBreaks = [];
				vmapData1.adBreaks = vmapData1.adBreaks.concat(vmapData2.adBreaks);
			}
			else {
				for (var i = 0; i < vmapData2.adBreaks.length; i++) {
					var adBreak1 = findBreakByTime(vmapData1.adBreaks,  vmapData2.adBreaks[i].timeOffset);
					if (!adBreak1) {
						vmapData1.adBreaks.push(vmapData2.adBreaks[i]);
					}
					else {
						// merge break extensions
						if (vmapData2.adBreaks[i].extensions && vmapData2.adBreaks[i].extensions.length > 0) {
							if (!adBreak1.extensions) {
								adBreak1.extensions = [];
							}
							adBreak1.extensions = adBreak1.extensions.concat(vmapData2.adBreaks[i].extensions);
						}
						// merge break trackings
						if (vmapData2.adBreaks[i].trackings && vmapData2.adBreaks[i].trackings.length > 0) {
							if (!adBreak1.trackings) {
								adBreak1.trackings = [];
								adBreak1.trackings = adBreak1.trackings.concat(vmapData2.adBreaks[i].trackings);
							}
							else {
								for (var j = 0; j < vmapData2.adBreaks[i].trackings.length; j++) {
									var eventData = findEventObjByEventName(adBreak1.trackings, vmapData2.adBreaks[i].trackings[j].event);
									if (!eventData) {
										adBreak1.trackings.push(vmapData2.adBreaks[i].trackings[j]);
									}
									else {
										eventData.uris = eventData.uris.concat(vmapData2.adBreaks[i].trackings[j].uris);
									}
								}
							}
						}
						// merge break ad sources
						if (vmapData2.adBreaks[i].adSource) {
							if (!adBreak1.adSource) {
								adBreak1.adSource = vmapData2.adBreaks[i].adSource;
							}
							else {
								if (vmapData2.adBreaks[i].adSource.vastData) {
									if (!adBreak1.adSource.vastData) {
										adBreak1.adSource.vastData = vmapData2.adBreaks[i].adSource.vastData;
									}
									else {
										for (var sequence in vmapData2.adBreaks[i].adSource.vastData) {
											if (adBreak1.adSource.vastData[sequence]) {
												adBreak1.adSource.vastData[sequence] = 
													adBreak1.adSource.vastData[sequence].concat(vmapData2.adBreaks[i].adSource.vastData[sequence]);
											}
											else {
												adBreak1.adSource.vastData[sequence] = vmapData2.adBreaks[i].adSource.vastData[sequence];
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
		return vmapData1;
	}

	module.exports = {
	    /** Describe Parser Main Entry Point Here.
	     * @param {string} strVmapXml - VMAP xml.
	     * @param {function} fnCallback - Callback function.
	     *        Callback parameters:
	     *            succ: true if success, false otherwise
	     *            data: object if success, error code otherwise
	     *            arrErrorUrl: null if success, list of error tracking url parsed from vmap xml untill parsing has failed
	     * @param {number} nMsecTimeout - VMAP processing time out in miliseconds.
	     * @param {object} options - publisher options. 
	     * 		  If adServerTimeout is present in options, VAST parser uses adServerTimeout value for loading wrapper xml and ignores nMsecTimeout.
	     */
	    parse: function (strVmapXml, fnCallback, nMsecTimeout, options) {
	        var parserObj = new VmapParser(nMsecTimeout, options);
	        parserObj.parse(strVmapXml,
	            function (succ, data, arrErrorUrls) {
	                if (fnCallback) {
	                    fnCallback(succ, data, arrErrorUrls);
	                }
	                parserObj = null;
	            });
	        return parserObj;
	    },

		/** The mergeVmapData Entry Point merges breaks data from second VMAP internal object
		 * into first VMAP internal object. This entry point used in a case when each
		 * break VMAP xml had been received by separate impbus VMAP call.
		 * @param {object} vmapData1 - first VMAP intenal object.
		 * @param {object} vmapData2 - second VMAP intenal object.
		 * @return {object} merged VMAP internal object. Usually the return value is modified vmapData1. 
		 * 					Only in a case when vmapData1 is null, the return value will be vmapData2. 
		 */
		mergeVmapData: function (vmapData1, vmapData2) {
		    return mergeVmapData(vmapData1, vmapData2);
		}

	};


/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

	var uaParser = __webpack_require__(9);
	var ua = uaParser();

	var XMLParserHelper = function () {
		function adjustNodeName(nodeName) {
			var newNodeName = nodeName;
			var browser = ua.browser.name.toLowerCase();
			if (browser === 'edge') {
				if (nodeName.indexOf('vmap:') === 0) {
					newNodeName = newNodeName.substr(5, nodeName.length - 5);
				}
			}
			return newNodeName;
		}

	    this.getSubNodes = function (node, subNodeName) {
	        var nodes = node.getElementsByTagName(adjustNodeName(subNodeName));
	        if (nodes.length > 0) {
	            return nodes;
	        }
	        return null;
	    };

	    this.getSubNode = function (node, subNodeName, index) {
	    	var setIndex = false;
	        if (!index) {
	        	setIndex = true;
	            index = 0;
	        }
	        var nodes = node.getElementsByTagName(adjustNodeName(subNodeName));
	        if (nodes.length > index) {
	        	if (!setIndex) {
	        		return nodes[index];
	        	}
	        	for (var i = 0; i < nodes.length; i++) {
	        		if (nodes[i].parentNode === node) {
	        			return nodes[i];
	        		}
	        	}
	            return nodes[0];
	        }
	        return null;
	    };

	    this.getNodeValue = function (node) {
	        if (node.childNodes.length === 0) {
	            return '';
	        }
	        var val = node.childNodes[0].nodeValue;
	        if (val) {
	            return val.trim();
	        }
	        return '';
	    };

	    this.getNodeValues = function (node) {
	        if (node.childNodes.length === 0) {
	            return '';
	        }
	        var wholeVal = '';
	        for (var i = 0; i < node.childNodes.length; i++) {
	            var val = node.childNodes[i].nodeValue;
	            if (val) {
	            	wholeVal += val;
	            }
	        }
	        return wholeVal.trim();
	    };

	    this.getNodeAttributeValue = function (node, attributeName) {
	        var val = node.getAttribute(attributeName);
	        if (val === null) {
	            val = '';
	        }
	        return val;
	    };

	    this.getNodeAttributeNumberValue = function (node, attributeName, defaultValue) {
	        if (!defaultValue) {
	            defaultValue = 0;
	        }
	        var answer = defaultValue;
	        var val = this.getNodeAttributeValue(node, attributeName);

	        if (val.length > 0) {
	            if (val.indexOf('.') >= 0) {
	                answer = parseFloat(val);
	            }
	            else {
	                answer = parseInt(val);
	            }
	        }

	        return answer;
	    };

	    this.getNodeAttributeBooleanValue = function (node, attributeName, defaultValue) {
	        if (!defaultValue) {
	            defaultValue = false;
	        }
	        var answer = defaultValue;
	        var val = this.getNodeAttributeValue(node, attributeName);

	        if (val.length > 0) {
	            var char = val.toLowerCase().charAt(0);
	            answer = (char === 't');
	        }

	        return answer;
	    };

	    this.getSubNodeValue = function (parentNode, subNodeName, defaultValue) {
	        defaultValue = (typeof defaultValue === 'undefined') ? '' : defaultValue;
	        var subnode = this.getSubNode(parentNode, subNodeName);
	        if (subnode !== null) {
	            return this.getNodeValue(subnode);
	        }
	        return defaultValue;
	    };

	    this.getSubNodeWholeValue = function (parentNode, subNodeName, defaultValue) {
	        defaultValue = (typeof defaultValue === 'undefined') ? '' : defaultValue;
	        var subnode = this.getSubNode(parentNode, subNodeName);
	        if (subnode !== null) {
	            return this.getNodeValues(subnode);
	        }
	        return defaultValue;
	    };

	    this.getSubNodeBooleanValue = function (parentNode, subNodeName, defaultValue) {
	        defaultValue = (typeof defaultValue === 'undefined') ? 'false' : defaultValue;

	        var value = this.getSubNodeValue(parentNode, subNodeName);
	        if (value.length > 0 && value.toLowerCase().charAt(0) === 't') {
	            return true;
	        }
	        if (value.length > 0 && value.toLowerCase().charAt(0) === 'f') {
	            return false;
	        }
	        return defaultValue;
	    };
	};

	module.exports = XMLParserHelper;


/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * VAST Parser module.
	 * @module VastParser
	 */

	var VastXMLParserHelper = __webpack_require__(27);

	var APN_CompanionAds = __webpack_require__(28);
	var APN_Icons = __webpack_require__(29);

	var uaParser = __webpack_require__(9);
	var ua = uaParser();

	var VastParser = function (id, nMsecTimeout, options) {

	    var _logger = __webpack_require__(3);
	    var _prefix = 'VAST Parser';

	    var _callback = null;
	    var _options = options;
	    var _wrapperLimit = _options && _options.wrapperLimit && _options.wrapperLimit > 0 ? _options.wrapperLimit : 5;
	    var _curWrapperLevel = 0;
	    var _sourceVastXml = null;
	    var _id = id;
	    var _nTimeOut = nMsecTimeout && nMsecTimeout > 0 ? nMsecTimeout : 1000;	// 1 second default
	    var _arrMediaFiles = [],
	    	_mezzanine = null,
	    	_arrInteractiveCreatives = [],
	        _arrTrackings = {},
	        _arrImpressions = [],
	        _arrClickUrls = [],
	        _arrClickTrackings = [],
	        _arrErrorUrls = [],
	        _arrInternalErrorUrls = [],
	        _sExtensions = '',
	        _adParameters = '',
	        _nMsecDuration = 0,
	        _strSkipOffset = '';
	    
	    var _errors303 = null;
	    var _arrError303Urls = [];

	    var _arrTrackingsMerge = {},
	        _arrImpressionsMerge = [],
	        _arrClickUrlsMerge = [],
	        _arrClickTrackingsMerge = [],
	        _arrErrorUrlsMerge = [],
	    	_arrViewableImpressionsMerge = {viewable: [], notViewable: [], undetermined: []};

	    var _helper = new VastXMLParserHelper();
	    var _startTime = null;
	    var _withWrapper = false;
	    var _vastVersion = '';
	    var _conditionalAd = false;
	    var _fallbackOnNoAd;

	    var _adTree = [];
	    var _currTreeIdx = -1;

	    var _terminated = false;

	    var _capabilityDetection = __webpack_require__(10);

	    var _waterfall = false;
	    var _vastObjects = [];
	    var _topLevel = false;
	    var _notifyurls = {};
	    var _curNotifyUrl = '';
	    var _buyerMemberIds = {};
	    var _curBuyerMemberId = '';
	    var _viewabilityConfigs = {};
	    var _curViewabilityConfig = '';
	    var _creativeIds = {};
	    var _curCreativeId = '';

	    var _csmCount = 0;
	    var _rtbCount = 0;
	    
	    var _vmap = options.vmap;

	    var _finalVastUri = '';//VIDLA-2240 to keep final VAST URI

	    _logger.always(_prefix, 'Version 3.1.17');

	    function getVASTVersion(vastNode) {
	        var version = 'unknown';
	        if (vastNode) {
	            version = _helper.getNodeAttributeValue(vastNode, 'version');
	            version = version.trim();
	            if (version.length > 3) {
	                version = version.substr(0, 3);
	            }
	        }
	        return version;
	    }

	    function substituteErrorCode(arrErrorUrls, errorCode) {
	        if (arrErrorUrls && arrErrorUrls.length > 0) {
	            for (var i = 0; i < arrErrorUrls.length; i++) {
	                arrErrorUrls[i] = arrErrorUrls[i].replace('[ERRORCODE]', errorCode);
	            }
	        }
	    }

	    function traceTreePath(idx, message) {
	        var curIdx = idx;
	        var text = 'AD DETECTED=' + (message.substr(0, 7) === 'SUCCESS' ? 'SUCCESS' : 'NONE') + ' :: Reason=' + message +
	            ', playerTechnology=' + (_options.hasOwnProperty('playerTechnology') ? JSON.stringify(_options.playerTechnology) : 'unknown') +
	            ', platform=' + _capabilityDetection.getPlatformType() + ', Ad tree path=';
	        var tree = '';
	        while (curIdx !== -1) {
	            var ad = _adTree[curIdx].children[0];
	            if (ad) {
	                var val = _helper.getNodeAttributeValue(ad, 'id');
	                if (tree.length > 0) {
	                    tree = ' -> ' + tree;
	                }
	                tree = val + tree;
	            }
	            curIdx = _adTree[curIdx].parentIdx;
	        }
	        _logger.info(_prefix, text + tree);
	    }

	    function processWrapper(parentNode) {
	        var node = _helper.getSubNode(parentNode, 'VASTAdTagURI');
	        if (!node) {
	            traceTreePath(_currTreeIdx, 'INVALID WRAPPER NODE');
	            if (_adTree.length === 0) {
	                reportError('300', 'invalid wrapper node');
	            }
	            else {
	                processNextAd();
	            }
	            return;
	        }
	        var url = _helper.getNodeValues(node);
	        if (!url || url.length === 0) {
	            traceTreePath(_currTreeIdx, 'EMPTY VASTAdTagURI');
	            if (_adTree.length === 0) {
	                reportError('300', 'Invalid VASTAdTagURI node value');
	            }
	            else {
	                processNextAd();
	            }
	            return;
	        }

	        if (_terminated) {
	            traceTreePath(_currTreeIdx, 'terminated');
	            _callback(false, _id, 'terminated', null, _curNotifyUrl);		// terminated
	            return;
	        }

	        _withWrapper = true;
	        
	        if (_vastVersion >= '4.0') {
	        	var val = _helper.getNodeAttributeBooleanValue(parentNode, 'followAdditionalWrappers', true);
	        	_adTree[_currTreeIdx].state.followAdditionalWrappers = val;
	        	
	        	val = _helper.getNodeAttributeBooleanValue(parentNode, 'allowMultipleAds', false);
	        	_adTree[_currTreeIdx].state.allowMultipleAds = val;
	        	
	        	val = _helper.getNodeAttributeValue(parentNode, 'fallbackOnNoAd');
	        	if (val !== '') {
	        		_fallbackOnNoAd = _helper.getNodeAttributeBooleanValue(parentNode, 'fallbackOnNoAd');
	        	}
	        }

	        //keep final URI for VIDLA-2240
	        _finalVastUri = url;

	        var UrlLoader = __webpack_require__(11);
	        UrlLoader.load(url,
	            function (error, responseText) {
	                if (_terminated) {
	                    traceTreePath(_currTreeIdx, 'terminated');
	                    _callback(false, _id, 'terminated', null, _curNotifyUrl);		// terminated
	                    return;
	                }
	                if (error || responseText.length === 0) {
	                    traceTreePath(_currTreeIdx, 'VASTAdTagURI TIMED OUT: ' + url);
	                    if (_adTree.length === 0) {
	                        reportError('301', 'Timeout of VAST URI provided in wrapper element');
	                    }
	                    else {
	                        processNextAd();
	                    }
	                }
	                else {
	                    _topLevel = false;
	                    parseXML(responseText);
	                }
	            }, _options.adServerTimeout ? _options.adServerTimeout : _nTimeOut);
	    }

	    function isInArray(arr, value) {
	        for (var i = 0; i < arr.length; i++) {
	            if (arr[i] === value) {
	                return true;
	            }
	        }
	        return false;
	    }

	    function addErrorUrls(parentNode, arrErrorUrls) {
	        if (parentNode) {
	            var nodes = _helper.getSubNodes(parentNode, 'Error');
	            if (nodes) {
	                for (var i = 0; i < nodes.length; i++) {
	                    var node = nodes[i];
	                    var url = _helper.getNodeValues(node);
	                    if (url && !isInArray(arrErrorUrls, url)) {
	                        arrErrorUrls.push(url);
	                    }
	                }
	            }
	        }
	    }

	    function addImpressions(parentNode, arrImpressions) {
	        if (parentNode) {
	            var nodes = _helper.getSubNodes(parentNode, 'Impression');
	            if (nodes) {
	                for (var i = 0; i < nodes.length; i++) {
	                    var node = nodes[i];
	                    var url = _helper.getNodeValues(node);
	                    if (url && !isInArray(arrImpressions, url)) {
	                        arrImpressions.push(url);
	                    }
	                }
	            }
	        }
	    }

	    function addTrackings(parentNode, arrTrackings) {
	        //var _nMsecDuration;
	        if (parentNode) {
	            var linear = _helper.getSubNode(parentNode, 'Linear', 0);
	            if (linear) {

	                //comment out by VIDLA-163
	                //var duration_node = _helper.getSubNode(linear, 'Duration');
	                //if (duration_node) {
	                //var str = _helper.getNodeValue(duration_node);
	                //_nMsecDuration = getMsecTime(str, -1);
	                //}


	                var node = _helper.getSubNode(linear, 'TrackingEvents');
	                if (node) {
	                    var nodes = _helper.getSubNodes(node, 'Tracking');
	                    if (nodes) {
	                        for (var i = 0; i < nodes.length; i++) {
	                            node = nodes[i];
	                            var url = _helper.getNodeValues(node);
	                            if (url) {


	                                var event = _helper.getNodeAttributeValue(node, 'event');

	                                //VIDLA-422 progress event also can be multiple in wrapper case
	                                if (event === 'progress') {
	                                    var offset = _helper.getNodeAttributeValue(node, 'offset');
	                                    if (offset) {
	                                        //event = 'progress_' + getMsecTime(offset,_nMsecDuration);
	                                        event = 'progress_' + offset;
	                                    } else {
	                                        event = '';
	                                    }
	                                }
	                                if (event) {
	                                    if (arrTrackings.hasOwnProperty(event)) {
	                                        if (!isInArray(arrTrackings[event], url)) {
	                                            arrTrackings[event].push(url);
	                                        }
	                                    }
	                                    else {
	                                        arrTrackings[event] = [];
	                                        arrTrackings[event].push(url);
	                                    }
	                                }
	                            }
	                        }
	                    }
	                }
	            }
	        }
	    }

	    function addExtensions(parentNode, treeIdx) {
	        if (parentNode) {
	            var node = _helper.getSubNode(parentNode, 'Extensions');
	            if (node && node.innerHTML && node.innerHTML.length > 0) {
	                _adTree[treeIdx].state.sExtensions = _adTree[treeIdx].state.sExtensions + node.innerHTML.toString();
	            }
	            else if (node && node.textContent && node.textContent.length > 0) {
	                _adTree[treeIdx].state.sExtensions = _adTree[treeIdx].state.sExtensions + node.textContent.toString();
	            }
	        }
	    }

	    function addCompanions(parentNode, treeIdx) {
	        if (parentNode) {
	            var node = _helper.getSubNode(parentNode, 'CompanionAds');
	            if (node &&
	                ((node.innerHTML && node.innerHTML.length > 0) ||
	                (node.textContent && node.textContent.length > 0))) {
	                APN_CompanionAds.parse(_adTree[treeIdx].state.companions, node, _helper);
	            }
	        }
	    }

	    function addIcons(parentNode, treeIdx) {
	        if (parentNode) {
	            var node = _helper.getSubNode(parentNode, 'Icons');
	            if (node &&
	                ((node.innerHTML && node.innerHTML.length > 0) ||
	                (node.textContent && node.textContent.length > 0))) {
	                APN_Icons.parse(_adTree[treeIdx].state.icons, node, _helper);
	            }
	        }
	    }

	    function addClickUrls(parentNode, arrClickUrls, arrClickTrackings) {
	        if (parentNode) {
	            var linear = _helper.getSubNode(parentNode, 'Linear', 0);
	            if (linear) {
	                var url = null;
	                var parentNode2 = _helper.getSubNode(linear, 'VideoClicks');
	                if (parentNode2) {
	                    var node = _helper.getSubNode(parentNode2, 'ClickThrough');
	                    if (node) {
	                        url = _helper.getNodeValues(node);
	                        if (url && !isInArray(arrClickUrls, url)) {
	                            arrClickUrls.push(url);
	                        }
	                    }
	                    var nodes = _helper.getSubNodes(parentNode2, 'ClickTracking');
	                    if (nodes) {
	                        for (var i = 0; i < nodes.length; i++) {
	                            node = nodes[i];
	                            url = _helper.getNodeValues(node);
	                            if (url && !isInArray(arrClickTrackings, url)) {
	                                arrClickTrackings.push(url);
	                            }
	                        }
	                    }
	                }
	            }
	        }
	    }

	    function addViewableImpression(parentNode, arrViewableImpression) {
	        if (parentNode) {
	            var viewImps = _helper.getSubNode(parentNode, 'ViewableImpression', 0);
	            if (viewImps) {
	                var url = null;
	                var node = null;
	                var i;
	                var subNodes = _helper.getSubNodes(viewImps, 'Viewable');
	                if (subNodes && subNodes.length > 0) {
	                    for (i = 0; i < subNodes.length; i++) {
	                        node = subNodes[i];
	                        url = _helper.getNodeValues(node);
	                        if (url && !isInArray(arrViewableImpression.viewable, url)) {
	                        	arrViewableImpression.viewable.push(url);
	                        }
	                    }
	                }
	                subNodes = _helper.getSubNodes(viewImps, 'NotViewable');
	                if (subNodes && subNodes.length > 0) {
	                    for (i = 0; i < subNodes.length; i++) {
	                        node = subNodes[i];
	                        url = _helper.getNodeValues(node);
	                        if (url && !isInArray(arrViewableImpression.notViewable, url)) {
	                        	arrViewableImpression.notViewable.push(url);
	                        }
	                    }
	                }
	                subNodes = _helper.getSubNodes(viewImps, 'ViewUndetermined');
	                if (subNodes && subNodes.length > 0) {
	                    for (i = 0; i < subNodes.length; i++) {
	                        node = subNodes[i];
	                        url = _helper.getNodeValues(node);
	                        if (url && !isInArray(arrViewableImpression.undetermined, url)) {
	                        	arrViewableImpression.undetermined.push(url);
	                        }
	                    }
	                }
	            }
	        }
	    }

	    function getMsecTime(strTime, duration) {
	        var nPos = strTime.indexOf('%');
	        if (nPos > 0) {
	            if (duration && duration > 0) {
	                return Number(strTime.substring(0, nPos));
	            }
	            else {
	                return 0;
	            }
	        } else {
	            nPos = strTime.indexOf('.');
	            var msecs = nPos > 0 ? Number(strTime.substring(nPos + 1)) : 0;
	            if (nPos > 0) {
	                strTime = strTime.substring(0, nPos);
	            }
	            var arr = strTime.split(':');
	            if (arr.length === 3) {
	                return (Number(arr[0]) * 3600 + Number(arr[1]) * 60 + Number(arr[2])) * 1000 + msecs;
	            }
	            else {
	                return 0;
	            }
	        }
	    }

	    function isCapable(type, codec) {
	        return _capabilityDetection.canPlay(type, codec);
	    }

	    function isFlashOnlyType(type) {
	        return type === 'video/x-flv' || type === 'video/x-f4v' || type === 'video/f4v' ||
	            type === 'application/x-shockwave-flash';
	    }

	    function isHtml5OnlyType(type) {
	        return type === 'video/webm' || type === 'video/ogg' || type === 'application/javascript' ||
	            type === 'application/x-javascript';
	    }

	    function isVpaidType(type) {
	        return type === 'application/x-shockwave-flash' || type === 'application/javascript' ||
	            type === 'application/x-javascript';
	    }

	    function isOptionsValidated(type) {
	        if (_options.playerTechnology && Array.isArray(_options.playerTechnology) && _options.playerTechnology.length > 0) {
	            var supported = false;
	            for (var i = 0; i < _options.playerTechnology.length; i++) {
	                var tech = _options.playerTechnology[i].toLowerCase();
	                if (!isFlashOnlyType(type.toLowerCase()) && !isHtml5OnlyType(type.toLowerCase())) {
	                    supported = true;
	                    break;
	                }
	                if (tech === 'flash' && !isHtml5OnlyType(type.toLowerCase())) {
	                    supported = true;
	                    break;
	                }
	                if (tech === 'html5' && !isFlashOnlyType(type.toLowerCase())) {
	                    supported = true;
	                    break;
	                }
	            }
	            if (!supported) {
	                return false;
	            }
	        }
	        if (_options.hasOwnProperty('supportVpaid') && !_options.supportVpaid) {
	            if (isVpaidType(type.toLowerCase())) {
	                return false;
	            }
	        }
	        return true;
	    }

	    function configureMediaRendition(node, url, num, mediaTypes) {
	        var rendition = null;
	        if (node) {
	            rendition = {};
	            rendition.type = _helper.getNodeAttributeValue(node, 'type');
	            if (mediaTypes.indexOf(rendition.type) === -1) {
	                mediaTypes.push(rendition.type);
	            }
	            // check capability
	            if (!rendition.type || rendition.type.length === 0) {
	                return null;
	            }
	            var codec = _helper.getNodeAttributeValue(node, 'codec');
	            if (codec && codec.length > 0) {
	            	codec = codec.trim();
	            	codec = codec.length > 2 ? codec : '';	// protection against bad data such as '0'
	            	if (codec.length > 0) {
	                    rendition.codec = codec;
	            	}
	            }
	            if (!isCapable(rendition.type, codec)) {
	                return null;
	            }
	            if (_options) {
	                if (!isOptionsValidated(rendition.type)) {
	                    return null;
	                }
	            }
	            rendition.url = url;
	            rendition.variation = 'Media#' + num;
	            rendition.delivery = _helper.getNodeAttributeValue(node, 'delivery');
	            var bitrate = _helper.getNodeAttributeNumberValue(node, 'bitrate', -1);
	            if (bitrate !== -1) {
	                rendition.bitrate = bitrate;
	            }
	            rendition.width = _helper.getNodeAttributeNumberValue(node, 'width');
	            rendition.height = _helper.getNodeAttributeNumberValue(node, 'height');
	            var valNode = _helper.getNodeAttributeValue(node, 'scalable');
	            if (valNode.length > 0) {
	                rendition.scalable = _helper.getNodeAttributeBooleanValue(node, 'scalable', true);
	            }
	            valNode = _helper.getNodeAttributeValue(node, 'maintainAspectRatio');
	            if (valNode.length > 0) {
	                rendition.maintainAspectRatio = _helper.getNodeAttributeBooleanValue(node, 'maintainAspectRatio', true);
	            }
	            var apiFramework = _helper.getNodeAttributeValue(node, 'apiFramework');
	            if (apiFramework && apiFramework.length > 0) {
	                rendition.apiFramework = apiFramework.toUpperCase();
	            }
	        }

	        return rendition;
	    }

	    function addMediaFilesAndDuration(parentNode) {
	        _nMsecDuration = 0;
	        _strSkipOffset = '';
	        _adParameters = '';
	        _arrMediaFiles = [];
	    	_mezzanine = null;
	    	_arrInteractiveCreatives = [];
	        var message = '';
	        var mediaTypes = [];
	        if (parentNode) {
	            var linear = _helper.getSubNode(parentNode, 'Linear', 0);
	            if (linear) {
	                var node = _helper.getSubNode(linear, 'Duration');
	                if (node) {
	                    var str = _helper.getNodeValue(node);
	                    _nMsecDuration = getMsecTime(str, -1);
	                }
	                var strSkipOffset = _helper.getNodeAttributeValue(linear, 'skipoffset');

	                //comment out by VIDLA-163
	                //if (strSkipOffset && strSkipOffset.length > 0) {
	                //    _nSkipOffset = getMsecTime(strSkipOffset, _nMsecDuration);
	                //}
	                _strSkipOffset = strSkipOffset;

	                //_adParameters = _helper.getSubNodeValue(linear, 'AdParameters', '');
	                _adParameters = _helper.getSubNodeWholeValue(linear, 'AdParameters', '');

	                node = _helper.getSubNode(linear, 'MediaFiles');
	                if (node) {
	                	var url;
	                    var nodes = _helper.getSubNodes(node, 'MediaFile');
	                    if (nodes) {
	                        for (var i = 0; i < nodes.length; i++) {
	                            node = nodes[i];
	                            url = _helper.getNodeValues(node);

	                            if (url.length > 0) {
	                                var rendition = configureMediaRendition(node, url, i, mediaTypes);

	                                if (rendition) {
	                                    _arrMediaFiles.push(rendition);
	                                }
	                            }
	                        }
	                        if (_arrMediaFiles.length === 0) {
	                            message = 'INCOMPATIBLE MEDIA TYPE, Available = ' + JSON.stringify(mediaTypes);
	                        }
	                        else {
	                        	// for VAST 4
	                            node = _helper.getSubNode(linear, 'MediaFiles');
	                        	_mezzanine = _helper.getSubNodeWholeValue(node, 'Mezzanine', '');
	                        	var interactiveNodes = _helper.getSubNodes(node, 'InteractiveCreativeFile');
	                        	if (interactiveNodes && interactiveNodes.length > 0) {
	                        		for (var j = 0; j < interactiveNodes.length; j++) {
	                        			var interactiveCreative = interactiveNodes[j];
	                        			url = _helper.getNodeValues(interactiveCreative);
	                        			if (url) {
	                        				var type = _helper.getNodeAttributeValue(interactiveCreative, 'type');
	                        				var framework = _helper.getNodeAttributeValue(interactiveCreative, 'apiFramework');
	                        				_arrInteractiveCreatives.push({url: url, type: type, apiFramework: framework});
	                        			}
	                        		}
	                        	}
	                        }
	                    }
	                    else {
	                        message = 'MISSING MEDIA FILES';
	                    }
	                }
	                else {
	                    message = 'MISSING MEDIA FILES';
	                }
	            }
	            else {
	                message = 'INVALID VAST STRUCTURE';
	            }
	        }
	        return message;
	    }

	    function trimXml(strVastXml) {
	        var nPos = strVastXml.indexOf('<');
	        var strXml = strVastXml.substr(nPos === -1 ? 0 : nPos);
	        nPos = strXml.lastIndexOf('>');
	        if (nPos !== -1) {
	            strXml = strXml.substr(0, nPos + 1);
	        }
	        return strXml.trim();
	    }

	    function isValidVastVersion(vastVersion) {
	        return vastVersion === '2.0' || vastVersion === '3.0' || vastVersion === '4.0' || vastVersion === '4.1';
	    }

	    function reportError(errCode, message) {
	        var arrErrorForInternalAndExternal = _arrErrorUrls.concat(_arrInternalErrorUrls);//merge with internal error and external error
	        substituteErrorCode(arrErrorForInternalAndExternal, errCode);
	        if (_arrError303Urls && _arrError303Urls.length > 0) {
	        	substituteErrorCode(_arrError303Urls, '303');
	        	arrErrorForInternalAndExternal = arrErrorForInternalAndExternal.concat(_arrError303Urls);
	        }
	        _logger.error(_prefix, 'Error ' + errCode + ' - ' + message);
	        _callback(false, _id, 'vast' + errCode, arrErrorForInternalAndExternal, _curNotifyUrl);
	    }

	    function processNextAd() {

	        //push error urls to global variable _arrInternalErrorUrls which has empty array as an default, it will be used for reportError() to return array of error urls to _callback
	        //the _arrInternalErrorUrls will be emptied by processAd() when exit out of siblings and if there's no internal parsing error
	        var arrStateOfNode = _adTree[_currTreeIdx].state;
	        if (arrStateOfNode && Array.isArray(arrStateOfNode.arrErrorUrls)) {
	            arrStateOfNode.arrErrorUrls.forEach(function (element) {
	                _arrInternalErrorUrls.push(element);
	            });
	        }

	        if (_currTreeIdx >= 0) {
	            _adTree[_currTreeIdx].children[0] = null;
	            _adTree[_currTreeIdx].children.splice(0, 1);
	            if (_adTree[_currTreeIdx].children.length === 0) {
	                var parentIdx = _adTree[_currTreeIdx].parentIdx;
	                _adTree.splice(_currTreeIdx, 1);
	                _currTreeIdx = parentIdx;
	                if (_currTreeIdx === -1) {
	                    if (_waterfall && _vastObjects.length > 0) {
	                        _logger.info(_prefix, 'Waterfall: Vast XML node count detected: # csm nodes: ' + _csmCount + ', # rtb nodes: ' + _rtbCount);
	                        _callback(true, _id, _vastObjects, null);
	                    }
	                    else if (_vmap && _vastObjects.length > 0) {
	                        _logger.info(_prefix, 'VMAP: Ad XML node count detected: ' + _vastObjects.length);
	                        _callback(true, _id, _vastObjects, null);
	                    }
	                    else {
	                        reportError('900', 'no Ad available');
	                    }
	                    return;
	                }
	                else {
	                    processNextAd();
	                    return;
	                }
	            }
	            _curWrapperLevel = _currTreeIdx;
	            _adTree[_currTreeIdx].state = preapareAdStateData();
	            processAd(_adTree[_currTreeIdx].children[0]);
	        }
	    }

	    function preapareAdStateData() {
	        var state = {
	            arrTrackings: {},
	            arrImpressions: [],
	            arrClickUrls: [],
	            arrClickTrackings: [],
	            arrErrorUrls: [],
	            sExtensions: '',
	            sequence: _vmap ? 0 : 1,
	            companions: {required: 'unknown', companions: []},
	            icons: [],
	            arrViewableImpressions: {viewable: [], notViewable: [], undetermined: []}
	        };
	        return state;
	    }

	    function saveNotificationUrl(adNode) {
	        var id = _helper.getNodeAttributeValue(adNode, 'id');
	        if (id.length > 0) {
	            var url = _helper.getNodeAttributeValue(adNode, 'notifyurl');
	            if (url && url.length > 0) {
	                _notifyurls[id] = url;
	            }
	        }
	    }

	    function saveCreativeId(adNode) {
	        var id = _helper.getNodeAttributeValue(adNode, 'id');
	        if (id.length > 0) {
	            var crId = _helper.getNodeAttributeValue(adNode, 'creativeId');
	            if (crId && crId.length > 0) {
	                _creativeIds[id] = crId;
	            }
	        }
	    }

	    function saveBuyerMemberId(adNode) {
	        var id = _helper.getNodeAttributeValue(adNode, 'id');
	        if (id.length > 0) {
	            var buyerId = _helper.getNodeAttributeValue(adNode, 'buyerMemberId');
	            if (buyerId && buyerId.length > 0) {
	                _buyerMemberIds[id] = buyerId;
	            }
	        }
	    }

	    function saveViewabilityConfig(adNode) {
	        var id = _helper.getNodeAttributeValue(adNode, 'id');
	        if (id.length > 0) {
	            var config = _helper.getNodeAttributeValue(adNode, 'viewabilityConfig');
	            if (config && config.length > 0) {
	                _viewabilityConfigs[id] = config;
	            }
	        }
	    }
	    
	    function saveNoAdsErrors() {
	    	if (_errors303 && _errors303.length > 0) {
	    		for (var i = 0; i < _errors303.length; i++) {
	                var node = _errors303[i];
	                var url = _helper.getNodeValues(node);
	                if (url && !isInArray(_arrError303Urls, url)) {
	                	_arrError303Urls.push(url);
	                }
	    		}
	    	}
	    }

	    function parseXML(strVastXml) {
	        _startTime = (new Date()).getTime();
	    	_arrError303Urls = [];	// make sure we keep error url for last vast

	        _sourceVastXml = strVastXml;
	        var strXml = trimXml(strVastXml);
	        if (strXml.length === 0) {
	            traceTreePath(_currTreeIdx, 'EMPTY VAST');
	            if (_adTree.length === 0) {
	                reportError('110', 'no bid response for mediation');
	            }
	            else {
	                processNextAd();
	            }
	            return;
	        }
	        var xmlDoc = null;
	        if (typeof window.DOMParser !== 'undefined') {
	            xmlDoc = (new DOMParser()).parseFromString(strXml, 'text/xml');
	            if (xmlDoc.documentElement.nodeName === 'parsererror') {
	                try {
	                    _logger.error(_prefix, 'Error reason = ' + xmlDoc.documentElement.childNodes[0].nodeValue);
	                }
	                catch (e) {
	                }
	                traceTreePath(_currTreeIdx, 'INVALID VAST STRUCTURE');
	                if (_adTree.length === 0) {
	                    reportError('100', 'VAST XML parsing error');
	                }
	                else {
	                    processNextAd();
	                }
	                return;
	            }
	        }
	        else if (typeof window.ActiveXObject !== 'undefined') {
	            try {
	                xmlDoc = new window.ActiveXObject('Microsoft.XMLDOM');
	                xmlDoc.loadXML(strXml);
	                if (xmlDoc.parseError.errorCode !== 0) {
	                    _logger.error(_prefix, xmlDoc.parseError);
	                    traceTreePath(_currTreeIdx, 'INVALID VAST STRUCTURE');
	                    if (_adTree.length === 0) {
	                        reportError('100', xmlDoc.parseError.errorCode + ', Error reason = ' + xmlDoc.parseError.reason);
	                    }
	                    else {
	                        processNextAd();
	                    }
	                    return;
	                }
	            }
	            catch (ex) {
	                _logger.error(_prefix, 'Failed to parse vast xml by window.ActiveXObject(Microsoft.XMLDOM)', ex);
	                traceTreePath(_currTreeIdx, 'INVALID VAST STRUCTURE');
	                if (_adTree.length === 0) {
	                    reportError('100', 'Failed to parse vast xml by window.ActiveXObject(Microsoft.XMLDOM)');
	                }
	                else {
	                    processNextAd();
	                }
	                return;
	            }
	        }
	        else {
	            _logger.error(_prefix, 'Failed to parse vast xml by window.ActiveXObject(Microsoft.XMLDOM)');
	            traceTreePath(_currTreeIdx, 'INVALID VAST STRUCTURE');
	            if (_adTree.length === 0) {
	                reportError('100', 'Failed to get vast xml');
	            }
	            else {
	                processNextAd();
	            }
	            return;
	        }
	        if (!xmlDoc) {
	            traceTreePath(_currTreeIdx, 'INVALID VAST STRUCTURE');
	            if (_adTree.length === 0) {
	                reportError('102', 'VAST XML parsing error');
	            }
	            else {
	                processNextAd();
	            }
	            return;
	        }
	        var vastNode = _helper.getSubNode(xmlDoc, 'VAST');
	        if (!vastNode || !vastNode.firstChild) {
	            traceTreePath(_currTreeIdx, 'EMPTY VAST');
	            if (_adTree.length === 0) {
	                reportError('110', 'no bid response for mediation');
	            }
	            else {
	                processNextAd();
	            }
	            return;
	        }
	        
	    	_errors303 = _helper.getSubNodes(vastNode, 'Error');
	 
	        var vastVersion = getVASTVersion(vastNode);
	        if (isValidVastVersion(vastVersion)) {
	            if (_topLevel) {
	                _waterfall = _helper.getNodeAttributeBooleanValue(vastNode, 'apn_waterfall');
	                if (_waterfall) {
	                    _options.waterfall = true;
	                }
	            }
	            var ads = _helper.getSubNodes(vastNode, 'Ad');
	            if (!ads || ads.length === 0) {
	            	saveNoAdsErrors();
	                traceTreePath(_currTreeIdx, 'NO AD NODE');
	                if (_adTree.length === 0) {
	                    reportError('900', 'no Ad available');
	                }
	                else {
	                    processNextAd();
	                }
	                return;
	            }
	            var children = [];
	            for (var i = 0; i < ads.length; i++) {
	            	if (_topLevel) {
	                	// make unique Ad id attribute
	            		var adIdTop = _helper.getNodeAttributeValue(ads[i], 'id');
	            		if (adIdTop) {
	            			adIdTop += ('_suffix' + i);
	            			ads[i].id = adIdTop;
	            		}
	            	}
	            	
	            	if (_vastVersion >= '4.0' && _currTreeIdx > 0) {
	            		if (!_adTree[_currTreeIdx].state.allowMultiAds) {
	            			var sequence = _helper.getNodeAttributeValue(ads[i], 'sequence');
	            			if (sequence) {
	            				continue;
	            			}
	            			if (children.length > 0) {
	            				break;
	            			}
	            		}
	            	}
	                children.push(ads[i]);
	                if (_waterfall && _topLevel) {
	                    saveNotificationUrl(ads[i]);
	                }
	                if (_topLevel) {
	                    saveBuyerMemberId(ads[i]);
	                    saveCreativeId(ads[i]);
	                    saveViewabilityConfig(ads[i]);
	                }
	            }
	            if (children.length === 0) {
	            	saveNoAdsErrors();
	                traceTreePath(_currTreeIdx, 'NO VALID AD NODES');
	                if (_adTree.length === 0) {
	                    reportError('900', 'no Ad available');
	                }
	                else {
	                    processNextAd();
	                }
	            	return;
	            }
	            var treeElem = {parentIdx: _currTreeIdx, currentIdx: 0, children: children, state: preapareAdStateData()};
	            _adTree.push(treeElem);
	            treeElem.currentIdx = _adTree.length - 1;
	            _currTreeIdx = treeElem.currentIdx;
	            processAd(_adTree[_currTreeIdx].children[0], vastVersion);
	        }
	        else {
	            traceTreePath(_currTreeIdx, 'INVALID VAST VERSION: ' + vastVersion);
	            if (_adTree.length === 0) {
	                reportError('102', 'VAST version not supported');
	            }
	            else {
	                processNextAd();
	            }
	        }
	    }

	    function mergeTrackings(idx) {
	        for (var event in _adTree[idx].state.arrTrackings) {
	            for (var i = 0; i < _adTree[idx].state.arrTrackings[event].length; i++) {
	                if (_arrTrackingsMerge.hasOwnProperty(event)) {
	                    if (!isInArray(_arrTrackingsMerge[event], _adTree[idx].state.arrTrackings[event][i])) {
	                        _arrTrackingsMerge[event].push(_adTree[idx].state.arrTrackings[event][i]);
	                    }
	                }
	                else {
	                    _arrTrackingsMerge[event] = [];
	                    _arrTrackingsMerge[event].push(_adTree[idx].state.arrTrackings[event][i]);
	                }
	            }
	        }
	        return _arrTrackingsMerge;
	    }

	    function mergeTreeTrackings(treeIdx) {
	        var idx = treeIdx;
	        while (idx >= 0) {
	            mergeTrackings(idx);
	            idx = _adTree[idx].parentIdx;
	        }
	        return _arrTrackingsMerge;
	    }

	    function mergeImpressions(idx) {
	        for (var i = 0; i < _adTree[idx].state.arrImpressions.length; i++) {
	            if (!isInArray(_arrImpressionsMerge, _adTree[idx].state.arrImpressions[i])) {
	                _arrImpressionsMerge.push(_adTree[idx].state.arrImpressions[i]);
	            }
	        }
	        return _arrImpressionsMerge;
	    }

	    function mergeTreeImpressions(treeIdx) {
	        var idx = treeIdx;
	        while (idx >= 0) {
	            mergeImpressions(idx);
	            idx = _adTree[idx].parentIdx;
	        }
	        return _arrImpressionsMerge;
	    }

	    function mergeClickUrls(idx) {
	        for (var i = 0; i < _adTree[idx].state.arrClickUrls.length; i++) {
	            if (!isInArray(_arrClickUrlsMerge, _adTree[idx].state.arrClickUrls[i])) {
	                _arrClickUrlsMerge.push(_adTree[idx].state.arrClickUrls[i]);
	            }
	        }
	        return _arrClickUrlsMerge;
	    }

	    function mergeTreeClickUrls(treeIdx) {
	        var idx = treeIdx;
	        while (idx >= 0) {
	            mergeClickUrls(idx);
	            idx = _adTree[idx].parentIdx;
	        }
	        return _arrClickUrlsMerge;
	    }

	    function mergeClickTrackings(idx) {
	        for (var i = 0; i < _adTree[idx].state.arrClickTrackings.length; i++) {
	            if (!isInArray(_arrClickTrackingsMerge, _adTree[idx].state.arrClickTrackings[i])) {
	                _arrClickTrackingsMerge.push(_adTree[idx].state.arrClickTrackings[i]);
	            }
	        }
	        return _arrClickTrackingsMerge;
	    }

	    function mergeTreeClickTrackings(treeIdx) {
	        var idx = treeIdx;
	        while (idx >= 0) {
	            mergeClickTrackings(idx);
	            idx = _adTree[idx].parentIdx;
	        }
	        return _arrClickTrackingsMerge;
	    }

	    function mergeErrorUrls(idx) {
	        for (var i = 0; i < _adTree[idx].state.arrErrorUrls.length; i++) {
	            if (!isInArray(_arrErrorUrlsMerge, _adTree[idx].state.arrErrorUrls[i])) {
	                _arrErrorUrlsMerge.push(_adTree[idx].state.arrErrorUrls[i]);
	            }
	        }
	        return _arrErrorUrlsMerge;
	    }

	    function mergeTreeErrorUrls(treeIdx) {
	        var idx = treeIdx;
	        while (idx >= 0) {
	            mergeErrorUrls(idx);
	            idx = _adTree[idx].parentIdx;
	        }
	        return _arrErrorUrlsMerge;
	    }

	    function mergeExtensions(idx) {
	        if (_adTree[idx].state.sExtensions.length > 0) {
	            _sExtensions = _sExtensions + _adTree[idx].state.sExtensions;
	        }
	        return _sExtensions;
	    }

	    function mergeTreeExtensions(treeIdx) {
	        var idx = treeIdx;
	        while (idx >= 0) {
	            mergeExtensions(idx);
	            idx = _adTree[idx].parentIdx;
	        }
	        return _sExtensions;
	    }

	    function mergeCompanions(treeIdx) {
	        var idx = treeIdx;
	        while (idx > 0) {
	            var parentIdx = _adTree[idx].parentIdx;
	            APN_CompanionAds.mergeCompanions(_adTree[parentIdx].state.companions, _adTree[idx].state.companions);
	            idx = parentIdx;
	        }
	        if (_adTree[idx].state.companions.required === 'unknown') {
	            delete _adTree[idx].state.companions.required;
	        }
	        return _adTree[idx].state.companions;
	    }

	    function mergeTreeCompanions(treeIdx) {
	        var arrCompanions = {required: 'unknown', companions: []};
	        var idx = treeIdx;
	        while (idx >= 0) {
	            APN_CompanionAds.mergeCompanions(arrCompanions, _adTree[idx].state.companions);
	            idx = _adTree[idx].parentIdx;
	        }
	        return arrCompanions;
	    }

	    function isProgramExist(arrIcons, program) {
	        for (var i = 0; i < arrIcons.length; i++) {
	            if (arrIcons[i].program.toLowerCase() === program.toLowerCase()) {
	                return true;
	            }
	        }
	        return false;
	    }

	    function removeProgram(arrIcons, program) {
	        for (var i = 0; i < arrIcons.length; i++) {
	            if (arrIcons[i].program.toLowerCase() === program.toLowerCase()) {
	                //arrIcons[i].splice(i, 1);
	                arrIcons.splice(i, 1);//one of arrIcons should be removed if it has same program for VIDLA-625
	                return;
	            }
	        }
	    }

	    function mergeIcons(treeIdx) {
	        var idx = treeIdx;
	        while (idx > 0) {
	            var parentIdx = _adTree[idx].parentIdx;
	            for (var i = 0; i < _adTree[idx].state.icons.length; i++) {
	                // avoid duplicate icons with same program (replace if exist)
	                if (isProgramExist(_adTree[parentIdx].state.icons, _adTree[idx].state.icons[i].program)) {
	                    removeProgram(_adTree[parentIdx].state.icons, _adTree[idx].state.icons[i].program);
	                }
	                _adTree[parentIdx].state.icons.push(_adTree[idx].state.icons[i]);
	            }
	            idx = parentIdx;
	        }
	        return _adTree[idx].state.icons;
	    }

	    function mergeTreeIcons(treeIdx) {
	        var arrIcons = [];
	        var idx = treeIdx;
	        while (idx >= 0) {
	            for (var i = 0; i < _adTree[idx].state.icons.length; i++) {
	                // avoid duplicate icons with same program
	                if (!isProgramExist(arrIcons, _adTree[idx].state.icons[i].program)) {
	                    arrIcons.push(_adTree[idx].state.icons[i]);
	                }
	            }
	            idx = _adTree[idx].parentIdx;
	        }
	        return arrIcons;
	    }

	    function aggregateCompanions(companionsObj) {
	        // get companions with resources and without resorces
	        var resCompanions = [];
	        var noresCompanions = [];
	        var companions = companionsObj.companions;
	        if (!companionsObj.companions) {
	            return companionsObj;
	        }
	        var companion;
	        var i, j;
	        for (i = companions.length - 1; i >= 0; i--) {
	            companion = companions[i];
	            if (companion.StaticResource || companion.IFrameResource || companion.HTMLResource) {
	                var sameSize = false;
	                for (j = 0; j < resCompanions.length; j++) {
	                    if (companion.width === resCompanions[j].width &&
	                        companion.height === resCompanions[j].height) {
	                        sameSize = true;
	                        break;
	                    }
	                }
	                if (!sameSize) {
	                    resCompanions.push(companion);
	                }
	            }
	            else {
	                noresCompanions.push(companion);
	            }
	        }

	        // aggregate companions without resorces into companions with resources
	        for (i = 0; i < noresCompanions.length; i++) {
	            for (j = 0; j < resCompanions.length; j++) {
	                if (noresCompanions[i].width === resCompanions[j].width && noresCompanions[i].height === resCompanions[j].height) {
	                    if ((noresCompanions[i].id && noresCompanions[i].id === resCompanions[j].id) || (!noresCompanions[i].id)) {
	                        // add click trackings
	                        if (noresCompanions[i].CompanionClickTracking) {
	                            if (!resCompanions[j].CompanionClickTracking) {
	                                resCompanions[j].CompanionClickTracking = [];
	                            }
	                            resCompanions[j].CompanionClickTracking = resCompanions[j].CompanionClickTracking.concat(noresCompanions[i].CompanionClickTracking);
	                        }
	                        // add view trackings
	                        if (noresCompanions[i].TrackingEvents) {
	                            if (!resCompanions[j].TrackingEvents) {
	                                resCompanions[j].TrackingEvents = [];
	                            }
	                            resCompanions[j].TrackingEvents = resCompanions[j].TrackingEvents.concat(noresCompanions[i].TrackingEvents);
	                        }
	                    }
	                }
	            }
	        }
	        var ret = {companions: resCompanions};
	        if (companionsObj.required) {
	            ret.required = companionsObj.required;
	        }
	        return ret;
	    }
	    
	    function getCategories(node) {
	    	var categories = [];
	    	var nodes = _helper.getSubNodes(node, 'Category');
	    	if (nodes && nodes.length > 0) {
	    		for (var i = 0; i < nodes.length; i++) {
	    			var val = _helper.getNodeValues(nodes[i]);
	    			if (val && val.length > 0) {
	    				// if category value is not present ignore this category node
	        			var authority = _helper.getNodeAttributeValue(nodes[i], 'authority');
	        			categories.push({category: val, authority: authority});
	    			}
	    		}
	    	}
	    	return categories.length > 0 ? categories : null;
	    }

	    function mergeViewableImpressions(idx) {
	    	var i;
	        for (i = 0; i < _adTree[idx].state.arrViewableImpressions.viewable.length; i++) {
	            if (!isInArray(_arrViewableImpressionsMerge.viewable, _adTree[idx].state.arrViewableImpressions.viewable[i])) {
	            	_arrViewableImpressionsMerge.viewable.push(_adTree[idx].state.arrViewableImpressions.viewable[i]);
	            }
	        }
	        for (i = 0; i < _adTree[idx].state.arrViewableImpressions.notViewable.length; i++) {
	            if (!isInArray(_arrViewableImpressionsMerge.notViewable, _adTree[idx].state.arrViewableImpressions.notViewable[i])) {
	            	_arrViewableImpressionsMerge.notViewable.push(_adTree[idx].state.arrViewableImpressions.notViewable[i]);
	            }
	        }
	        for (i = 0; i < _adTree[idx].state.arrViewableImpressions.undetermined.length; i++) {
	            if (!isInArray(_arrViewableImpressionsMerge.undetermined, _adTree[idx].state.arrViewableImpressions.undetermined[i])) {
	            	_arrViewableImpressionsMerge.undetermined.push(_adTree[idx].state.arrViewableImpressions.undetermined[i]);
	            }
	        }
	        return _arrViewableImpressionsMerge;
	    }

	    function mergeTreeViewableImpressions(treeIdx) {
	        var idx = treeIdx;
	        while (idx >= 0) {
	        	mergeViewableImpressions(idx);
	            idx = _adTree[idx].parentIdx;
	        }
	        return _arrViewableImpressionsMerge;
	    }
	    
	    function getUniversalAdId(node) {
	    	var creatieves = _helper.getSubNodes(node, 'Creative');
	    	if (creatieves && creatieves.length > 0) {
	    		for (var i = 0; i < creatieves.length; i++) {
	    			var linear = _helper.getSubNode(creatieves[i], 'Linear');
	    			if (linear) {
	        			var universalAdId = _helper.getSubNode(creatieves[i], 'UniversalAdId');
	        			return universalAdId;
	    			}
	    		}
	    	}
	    	return null;
	    }
	    
	    function getAdVerifications(node) {
	    	var verifications = [];
	    	var adVer = _helper.getSubNode(node, 'AdVerifications');
	    	if (adVer) {
	    		var nodes = _helper.getSubNodes(adVer, 'Verification');
	    		if (nodes && nodes.length > 0) {
	    			for (var i = 0; i < nodes.length; i++) {
	    				var verification = nodes[i];
	    				var vendor = _helper.getNodeAttributeValue(verification, 'vendor');
	    				var jsResources = [];
	    				var flashResources = [];
	    				var val;
	    				var attr;
	    				var j;
	    				var resources = _helper.getSubNodes(verification, 'JavaScriptResource');
	    				if (resources && resources.length > 0) {
	    					for (j = 0; j < resources.length; j++) {
	    						val = _helper.getNodeValues(resources[j]);
	    						var attrFr = _helper.getNodeAttributeValue(resources[j], 'apiFramework');
	    						var attrBr = _helper.getNodeAttributeBooleanValue(resources[j], 'browserOptional');
	    						jsResources.push({url: val, framework: attrFr, browserOptional: attrBr});
	    					}
	    				}
	    				resources = _helper.getSubNodes(verification, 'FlashResource');
	    				if (resources && resources.length > 0) {
	    					for (j = 0; j < resources.length; j++) {
	    						val = _helper.getNodeValues(resources[j]);
	    						attr = _helper.getNodeAttributeValue(resources[j], 'apiFramework');
	    						flashResources.push({url: val, framework: attr});
	    					}
	    				}
	                    var viewableImpression = _helper.getSubNodeWholeValue(verification, 'ViewableImpression');
	                    var trackingEvents = {};
	                    var hasTrackings = false;
	    				var trEvents = _helper.getSubNode(verification, 'TrackingEvents');
	    				if (trEvents) {
	                        var trackings = _helper.getSubNodes(trEvents, 'Tracking');
	                        if (trackings && trackings.length > 0) {
	                            for (j = 0; j < trackings.length; j++) {
	                                val = _helper.getNodeValues(trackings[j]);
	                                var event = _helper.getNodeAttributeValue(trackings[j], 'event');
	                                if (event && val) {
	                                    hasTrackings = true;
	                                    if (trackingEvents.hasOwnProperty(event)) {
	                                        trackingEvents[event].push(val);
	                                    }
	                                    else {
	                                        trackingEvents[event] = [val];
	                                    }
	                                }
	                            }                              
	                        }
	    				}
	                    var verificationParameters = _helper.getSubNodeWholeValue(verification, 'VerificationParameters');
	    				var verData = {};
	    				if (vendor) {
	    					verData.vendor = vendor;
	    				}
	    				if (jsResources.length > 0) {
	    					verData.jsResources = jsResources;
	    				}
	    				if (flashResources.length > 0) {
	    					verData.flashResources = flashResources;
	    				}
	    				if (viewableImpression) {
	    					verData.viewableImpression = viewableImpression;
	                    }
	                    if (hasTrackings) {
	                        verData.trackingEvents = trackingEvents;
	                    }
	                    if (verificationParameters) {
	                        verData.verificationParameters = verificationParameters;
	                    }
	    				verifications.push(verData);
	    			}
	    		}
	    	}
	    	
	    	return verifications.length > 0 ? verifications : null;
	    }
	    
	    function normalizeAdId(id) {
	    	var retId = id;
	    	var idx = retId.indexOf('_suffix');
	    	if (idx > 0) {
	    		retId = retId.substring(0, idx);
	    	}
	    	return retId;
	    }

	    function processAd(adNode, vastVersion) {
	        var inLineWrapperNode = _helper.getSubNode(adNode, 'Wrapper');
	        var isWrapper = inLineWrapperNode !== null;
	        if (!isWrapper) {
	            inLineWrapperNode = _helper.getSubNode(adNode, 'InLine');
	        }
	        
	        if (!inLineWrapperNode) {
	        	saveNoAdsErrors();
	            traceTreePath(_currTreeIdx, 'MISSING WRAPPER / INLINE NODE');
	            processNextAd();
	            return;
	        }

	        _curWrapperLevel++;
	        // wrapper limit is number of Wrapper nodes + InLine node
	        if (_curWrapperLevel > _wrapperLimit) {
	            traceTreePath(_currTreeIdx, 'Reach Wrapper limit');
	            processNextAd();
	            return;
	        }

	        if (vastVersion > _vastVersion) {
	            _vastVersion = vastVersion;
	        }

	        var id = _helper.getNodeAttributeValue(adNode, 'id');
	        if (_notifyurls.hasOwnProperty(id)) {
	            _curNotifyUrl = _notifyurls[id];
	        }
	        if (_creativeIds.hasOwnProperty(id)) {
	            _curCreativeId = _creativeIds[id];
	        }
	        if (_buyerMemberIds.hasOwnProperty(id)) {
	            _curBuyerMemberId = _buyerMemberIds[id];
	        }
	        if (_viewabilityConfigs.hasOwnProperty(id)) {
	            _curViewabilityConfig = _viewabilityConfigs[id];
	        }
	        // worried only about top level ad sequence attribute
	        if (_currTreeIdx === 0) {
	            var seq = _helper.getNodeAttributeValue(adNode, 'sequence');
	            if (seq) {
	                _adTree[_currTreeIdx].state.sequence = parseInt(seq);
	            }
	            var conditional = _helper.getNodeAttributeValue(adNode, 'conditionalAd');
	            if (conditional) {
	            	_conditionalAd = _helper.getNodeAttributeBooleanValue(adNode, 'conditionalAd');
	            }
	        }

	        addErrorUrls(inLineWrapperNode, _adTree[_currTreeIdx].state.arrErrorUrls);
	        addImpressions(inLineWrapperNode, _adTree[_currTreeIdx].state.arrImpressions);
	        addTrackings(inLineWrapperNode, _adTree[_currTreeIdx].state.arrTrackings);
	        addClickUrls(inLineWrapperNode, _adTree[_currTreeIdx].state.arrClickUrls, _adTree[_currTreeIdx].state.arrClickTrackings);
	        addExtensions(inLineWrapperNode, _currTreeIdx);
	        addCompanions(inLineWrapperNode, _currTreeIdx);
	        addIcons(inLineWrapperNode, _currTreeIdx);
	        addViewableImpression(inLineWrapperNode, _adTree[_currTreeIdx].state.arrViewableImpressions);

	        _arrInternalErrorUrls = [];//clear _arrInternalErrorUrls at this time, all same sibiling's error will be gathered by processNextAd()

	        if (isWrapper) {
	        	if (_vastVersion >= '4.0' && _currTreeIdx > 0) {
	        		if (!_adTree[_currTreeIdx - 1].state.followAdditionalWrappers) {
	                    traceTreePath(_currTreeIdx, 'Additional Wrappers are not allowed');
	                    processNextAd();
	                    return;
	        		}
	        	}
	            processWrapper(inLineWrapperNode);
	        }
	        else {
	            var message = addMediaFilesAndDuration(inLineWrapperNode);
	            if (_arrMediaFiles.length === 0 || message.length > 0) {
	                traceTreePath(_currTreeIdx, message);
	                processNextAd();
	                return;
	            }
	            _arrTrackingsMerge = JSON.parse(JSON.stringify(_arrTrackings));
	            _arrImpressionsMerge = _arrImpressions.slice(0);
	            _arrClickUrlsMerge = _arrClickUrls.slice(0);
	            _arrClickTrackingsMerge = _arrClickTrackings.slice(0);
	            _arrErrorUrlsMerge = _arrErrorUrls.slice(0);
	            _sExtensions = '';

	            var strTrackingUrls = JSON.stringify(mergeTreeTrackings(_adTree[_currTreeIdx].parentIdx));
	            var strImpressionUrls = JSON.stringify(mergeTreeImpressions(_adTree[_currTreeIdx].parentIdx));
	            var strClickUrls = JSON.stringify(mergeTreeClickUrls(_adTree[_currTreeIdx].parentIdx));
	            var strClickTrackingUrls = JSON.stringify(mergeTreeClickTrackings(_adTree[_currTreeIdx].parentIdx));
	            var strErrorUrls = JSON.stringify(mergeTreeErrorUrls(_adTree[_currTreeIdx].parentIdx));
	            var strExtensions = mergeTreeExtensions(_adTree[_currTreeIdx].parentIdx);
	            var strCompanions = JSON.stringify(mergeTreeCompanions(_adTree[_currTreeIdx].parentIdx));
	            var strIcons = JSON.stringify(mergeTreeIcons(_adTree[_currTreeIdx].parentIdx));
	            _sExtensions = '';
	            var companions = mergeCompanions(_currTreeIdx);
	            companions = aggregateCompanions(companions);
	            var vastObj = {
	                vastVersion: _vastVersion,
	                withWrapper: _withWrapper,
	                mediaFiles: _arrMediaFiles,
	                trackingUrls: mergeTrackings(_currTreeIdx),
	                impressionUrls: mergeImpressions(_currTreeIdx),
	                clickUrls: mergeClickUrls(_currTreeIdx),
	                clickTrackingUrls: mergeClickTrackings(_currTreeIdx),
	                errorUrls: mergeErrorUrls(_currTreeIdx),
	                durationMsecs: _nMsecDuration,
	                skipOffset: _strSkipOffset,
	                extensions: mergeExtensions(_currTreeIdx),
	                adParameters: _adParameters,
	                vastXml: _sourceVastXml,			// inline vast xml
	                extTrackingUrls: strTrackingUrls,
	                extImpressionUrls: strImpressionUrls,
	                extClickUrls: strClickUrls,
	                extClickTrackingUrls: strClickTrackingUrls,
	                extErrorUrls: strErrorUrls,
	                extExtensions: strExtensions,
	                adId: normalizeAdId(id),
	                sequence: _adTree[0].state.sequence,
	                companionAds: companions,
	                extCompanions: strCompanions,
	                icons: mergeIcons(_currTreeIdx),
	                extIcons: strIcons,
	                finalVastUri: _finalVastUri //VIDLA-2240
	            };
	            
	            // vast 4 data
	            if (_vastVersion.substr(0, 1) > '3') {
	        		var universalAdId = getUniversalAdId(inLineWrapperNode);
	        		if (universalAdId) {
	                    var idRegistry = _helper.getNodeAttributeValue(universalAdId, 'idRegistry');
	                    var idValue = _helper.getNodeAttributeValue(universalAdId, 'idValue');
	                    if (idRegistry.length === 0 || idValue.length === 0) {
	                        traceTreePath(_currTreeIdx, 'universalAdId is invalid');
	                        processNextAd();
	                        return;
	                    }
	                    vastObj.universalAdId = {idRegistry: idRegistry, idValue: idValue};
	                }
	        		
	            	vastObj.conditionalAd = _conditionalAd;
	            	var categories = getCategories(inLineWrapperNode);
	            	if (categories) {
	            		for (var j = 0; j < categories.length; j++) {
	            			if (!categories[j].category || !categories[j].authority) {
	                            traceTreePath(_currTreeIdx, 'invalid Category node');
	                            processNextAd();
	                            return;
	            			}
	            		}
	                	vastObj.categories = categories;
	            	}
	            	
	                var strViewableImpressions = JSON.stringify(mergeTreeViewableImpressions(_adTree[_currTreeIdx].parentIdx));
	            	var viewImpressions = mergeViewableImpressions(_currTreeIdx);
	            	// use only not empty (with not empty arrays) viewImpressions object
	            	if (viewImpressions && 
	            		(viewImpressions.viewable.length + viewImpressions.notViewable.length + viewImpressions.undetermined.length) > 0) {
	                	vastObj.extViewableImpression = strViewableImpressions;
	                	vastObj.viewableImpression = viewImpressions;
	            	}
	            	
	            	var adVerifications = getAdVerifications(inLineWrapperNode);
	        		if (adVerifications && adVerifications.length > 0) {
	                	vastObj.adVerifications = adVerifications;
	        		}
	        		
	        		if (_mezzanine) {
	        			vastObj.mezzanine = _mezzanine;
	        		}
	        		if (_arrInteractiveCreatives && _arrInteractiveCreatives.length > 0) {
	        			vastObj.interactiveCreativeFiles = _arrInteractiveCreatives;
	        		}
	        		
	        		if (_fallbackOnNoAd !== undefined) {
	        			vastObj.fallbackOnNoAd = _fallbackOnNoAd;
	        		}
	            }
	            
	            if (_waterfall && _curNotifyUrl.length > 0) {
	                vastObj.notifyurl = _curNotifyUrl;
	            }
	            if (_curCreativeId.length > 0) {
	                vastObj.creative_id = _curCreativeId;
	            }
	            if (_curBuyerMemberId.length > 0) {
	                vastObj.buyerMemberId = _curBuyerMemberId;
	            }
	            if (_curViewabilityConfig.length > 0) {
	                vastObj.viewabilityConfig = _curViewabilityConfig;
	            }
	            // becaurse waterfall xml always unwrapped, we can set rtb flag base on current ad node
	            var rtb = false;
	            if (_waterfall) {
	                var rtbAttr = _helper.getNodeAttributeValue(adNode, 'rtb');
	                if (rtbAttr && rtbAttr === 'true') {
	                    rtb = true;
	                    vastObj.rtb = true;
	                }
	            }
	            if (_terminated) {
	                traceTreePath(_currTreeIdx, 'terminated');
	                _callback(false, _id, 'terminated', null, _curNotifyUrl);		// terminated
	                return;
	            }
	            var mediaTypes = [];
	            for (var i = 0; i < _arrMediaFiles.length; i++) {
	                if (mediaTypes.indexOf(_arrMediaFiles[i].type) === -1) {
	                    mediaTypes.push(_arrMediaFiles[i].type);
	                }
	            }
	            traceTreePath(_currTreeIdx, 'SUCCESS, Available=' + JSON.stringify(mediaTypes));
	            if (_waterfall) {
	                _vastObjects.push(vastObj);
	                if (rtb) {
	                    _rtbCount++;
	                }
	                else {
	                    _csmCount++;
	                }
	                processNextAd();
	            }
	            else if (_vmap) {
	            	vastObj.vastXml = getXmlForSequence(vastObj.vastXml, vastObj.sequence);
	            	_vastObjects.push(vastObj);
	                processNextAd();
	            }
	            else {
	                _callback(true, _id, vastObj, null);
	            }
	        }
	    }
	    
	    function getXmlForSequence(xml, sequence) {
	        var xmlDoc = (new DOMParser()).parseFromString(xml, 'text/xml');
	        var vastNode = _helper.getSubNode(xmlDoc, 'VAST');
	        var adNodes = _helper.getSubNodes(vastNode, 'Ad');
	        for (var i = 0; i < adNodes.length;) {
	        	var adSequence = _helper.getNodeAttributeValue(adNodes[i], 'sequence');
	        	if (adSequence && parseInt(adSequence) !== sequence) {
	        		// delete ad with different sequence attribute
	        		vastNode.removeChild(adNodes[i]);
	        	}
	        	else {
	        		i++;
	        	}
	        }
	    	var browser = ua.browser.name.toLowerCase();    
	        var xmlOut;
	        if (browser === 'ie') {
	        	xmlOut = (new XMLSerializer()).serializeToString(xmlDoc.childNodes[0]);
	        }
	        else {
	            xmlOut = xmlDoc.childNodes[0].outerHTML; 
	        }
	        return xmlOut;
	    }

	    function prepareExternalTrackers(videoTrackers, impTracker) {

	        var url;
	        var i;
	        var arr;
	        var name;
	        if (impTracker) {
	            _arrImpressions.push(impTracker.trim());
	        }
	        if (videoTrackers) {
	            if (Array.isArray(videoTrackers) && videoTrackers.length === 1) {
	                // new format
	                var trackers = videoTrackers[0];
	                if (trackers.impression_urls) {
	                    for (i = 0; i < trackers.impression_urls.length; i++) {
	                        url = trackers.impression_urls[i].trim();
	                        _arrImpressions.push(url);
	                    }
	                }
	                if (trackers.error_urls) {
	                    for (i = 0; i < trackers.error_urls.length; i++) {
	                        url = trackers.error_urls[i].trim();
	                        _arrErrorUrls.push(url);
	                    }
	                }
	                if (trackers.video_click_urls) {
	                    for (i = 0; i < trackers.video_click_urls.length; i++) {
	                        url = trackers.video_click_urls[i].trim();
	                        _arrClickTrackings.push(url);
	                    }
	                }
	                for (name in trackers.video_events) {
	                    arr = trackers.video_events[name];
	                    for (i = 0; i < arr.length; i++) {
	                        url = arr[i].trim();
	                        if (_arrTrackings.hasOwnProperty(name)) {
	                            if (!isInArray(_arrTrackings[name], url)) {
	                                _arrTrackings[name].push(url);
	                            }
	                        }
	                        else {
	                            _arrTrackings[name] = [url];
	                        }
	                    }
	                }
	            }
	            else {
	                for (name in videoTrackers) {
	                    if (name === 'service') {	// ignore not vast related trackers
	                        continue;
	                    }
	                    if (Array.isArray(videoTrackers[name])) {
	                        arr = videoTrackers[name];
	                        for (i = 0; i < arr.length; i++) {
	                            url = arr[i].trim();
	                            if (name === 'click') {
	                                _arrClickTrackings.push(url);
	                            }
	                            else if (name === 'error') {
	                                _arrErrorUrls.push(url);
	                            }
	                            else if (name === 'impression') {
	                                _arrImpressions.push(url);
	                            }
	                            else {
	                                if (_arrTrackings.hasOwnProperty(name)) {
	                                    if (!isInArray(_arrTrackings[name], url)) {
	                                        _arrTrackings[name].push(url);
	                                    }
	                                }
	                                else {
	                                    _arrTrackings[name] = [url];
	                                }
	                            }
	                        }
	                    }
	                    else {
	                        url = videoTrackers[name].trim();
	                        if (name === 'click') {
	                            _arrClickTrackings.push(url);
	                        }
	                        else if (name === 'error') {
	                            _arrErrorUrls.push(url);
	                        }
	                        else if (name === 'impression') {
	                            _arrImpressions.push(url);
	                        }
	                        else {
	                            if (_arrTrackings.hasOwnProperty(name)) {
	                                if (!isInArray(_arrTrackings[name], url)) {
	                                    _arrTrackings[name].push(url);
	                                }
	                            }
	                            else {
	                                _arrTrackings[name] = [url];
	                            }
	                        }
	                    }
	                }
	            }
	        }
	    }

	    this.parse = function (strVastXml, videoTrackers, impTracker, callback) {
	        _callback = callback;
	        prepareExternalTrackers(videoTrackers, impTracker);
	        _topLevel = true;
	        parseXML(strVastXml);
	    };

	    this.terminate = function () {
	        _terminated = true;
	    };
	};

	var VastModifier = __webpack_require__(30);

	var VastMerger = __webpack_require__(31);

	module.exports = {
	    /** Describe Parser Main Entry Point Here.
	     * @param {string} strVastXml - VAST xml.
	     * @param {function} fnCallback - Callback function.
	     *        Callback parameters:
	     *            succ: true if success, false otherwise
	     *            sourceId: mediation element identificator
	     *            data: object is success, error code otherwise
	     *            arrErrorUrl: null if success, list of tracking url parsed from vast xml untill parsing has failed
	     * @param {object} id - mediation element identificator.
	     * @param {number} nMsecTimeout - time out in miliseconds for loading wrapper xml.
	     * @param {object} videoTrackers - video_trackings field from impbus request.
	     * @param {string} videoTrackers - imp_tracking_url field from impbus request.
	     * @param {object} options - publisher options.
	     * 		  If adServerTimeout is present in options, VAST parser uses adServerTimeout value for loading wrapper xml instead of nMsecTimeout.
	     */
	    parse: function (strVastXml, fnCallback, id, nMsecTimeout, videoTrackers, impTracker, options) {
	        var parserObj = new VastParser(id, nMsecTimeout, options);
	        parserObj.parse(strVastXml, videoTrackers, impTracker,
	            function (succ, sourceId, data, arrErrorUrls, notifUrl) {
	                if (fnCallback) {
	                    fnCallback(succ, sourceId, data, arrErrorUrls, notifUrl);
	                }
	                parserObj = null;
	            });
	        return parserObj;
	    },

	    /** Describe Vast Unwrapping Entry Point Here.
	     * @param {object} parserData - object returned after successful parsing.
	     * @param {string} adToken - optional ad identificator used for debug mode
	     * @return {string} - unwrapped VAST xml.
	     */
	    getUnwrappedVastTag: function (parserData, adToken, notifyUrl, contentSource, buyerMemberId, viewabilityConfig, additionalTrackers, creativeId) {
	        if (!parserData || !parserData.vastXml) {
	            return null;
	        }
	        var obj = new VastModifier(parserData, adToken, notifyUrl, contentSource, buyerMemberId, viewabilityConfig, additionalTrackers, creativeId);
	        var xml = obj.addTrackers();
	        obj = null;
	        return xml;
	    },

	    /** Describe Vast Merging VAST XMLs Entry Point Here.
	     * @param {object} xmlListData - object containes XMLs and additional data:
	     *                    xml: VAST XML
	     *                    notifyUrl: notification url from impbus response
	     *                    buyerMemberId: buyer member idenfificator from impbus response
	     * @return {string} - merged VAST xml.
	     */
	    getMergedVastTag: function (xmlList) {
	        if (!xmlList || xmlList.length === 0) {
	            return null;
	        }
	        var obj = new VastMerger(xmlList);
	        var xml = obj.getVastXml();
	        obj = null;
	        return xml;
	    }
	};


/***/ }),
/* 27 */
/***/ (function(module, exports) {

	var XMLParserHelper = function () {
	    this.getSubNodes = function (node, subNodeName) {
	        var nodes = node.getElementsByTagName(subNodeName);
	        if (nodes.length > 0) {
	            return nodes;
	        }
	        return null;
	    };

	    this.getSubNode = function (node, subNodeName, index) {
	        if (!index) {
	            index = 0;
	        }
	        var nodes = node.getElementsByTagName(subNodeName);
	        if (nodes.length > index) {
	            return nodes[index];
	        }
	        return null;
	    };

	    this.getNodeValue = function (node) {
	        if (node.childNodes.length === 0) {
	            return '';
	        }
	        var val = node.childNodes[0].nodeValue;
	        if (val) {
	            return val.trim();
	        }
	        return '';
	    };

	    this.getNodeValues = function (node) {
	        if (node.childNodes.length === 0) {
	            return '';
	        }
	        var wholeVal = '';
	        for (var i = 0; i < node.childNodes.length; i++) {
	            var val = node.childNodes[i].nodeValue;
	            if (val) {
	            	wholeVal += val;
	            }
	        }
	        return wholeVal.trim();
	    };

	    this.getNodeAttributeValue = function (node, attributeName) {
	        var val = node.getAttribute(attributeName);
	        if (val === null) {
	            val = '';
	        }
	        return val;
	    };

	    this.getNodeAttributeNumberValue = function (node, attributeName, defaultValue) {
	        if (!defaultValue) {
	            defaultValue = 0;
	        }
	        var answer = defaultValue;
	        var val = this.getNodeAttributeValue(node, attributeName);

	        if (val.length > 0) {
	            if (val.indexOf('.') >= 0) {
	                answer = parseFloat(val);
	            }
	            else {
	                answer = parseInt(val);
	            }
	        }

	        return answer;
	    };

	    this.getNodeAttributeBooleanValue = function (node, attributeName, defaultValue) {
	        if (!defaultValue) {
	            defaultValue = false;
	        }
	        var answer = defaultValue;
	        var val = this.getNodeAttributeValue(node, attributeName);

	        if (val.length > 0) {
	            var char = val.toLowerCase().charAt(0);
	            answer = (char === 't');
	        }

	        return answer;
	    };

	    this.getSubNodeValue = function (parentNode, subNodeName, defaultValue) {
	        defaultValue = (typeof defaultValue === 'undefined') ? '' : defaultValue;
	        var subnode = this.getSubNode(parentNode, subNodeName);
	        if (subnode !== null) {
	            return this.getNodeValue(subnode);
	        }
	        return defaultValue;
	    };

	    this.getSubNodeWholeValue = function (parentNode, subNodeName, defaultValue) {
	        defaultValue = (typeof defaultValue === 'undefined') ? '' : defaultValue;
	        var subnode = this.getSubNode(parentNode, subNodeName);
	        if (subnode !== null) {
	            return this.getNodeValues(subnode);
	        }
	        return defaultValue;
	    };

	    this.getSubNodeBooleanValue = function (parentNode, subNodeName, defaultValue) {
	        defaultValue = (typeof defaultValue === 'undefined') ? 'false' : defaultValue;

	        var value = this.getSubNodeValue(parentNode, subNodeName);
	        if (value.length > 0 && value.toLowerCase().charAt(0) === 't') {
	            return true;
	        }
	        if (value.length > 0 && value.toLowerCase().charAt(0) === 'f') {
	            return false;
	        }
	        return defaultValue;
	    };
	};

	module.exports = XMLParserHelper;


/***/ }),
/* 28 */
/***/ (function(module, exports) {

	var CompanionAds = {

	    parse: function (companionAdsDest, companionAdsNode, helper) {
	        var req = helper.getNodeAttributeValue(companionAdsNode, 'required');
	        if (req && req.length > 0) {
	            companionAdsDest.required = req;
	        }

	        var nodes = helper.getSubNodes(companionAdsNode, 'Companion');
	        if (nodes) {
	            for (var i = 0; i < nodes.length; i++) {
	                var node = nodes[i];
	                //var companion = JSON.parse(JSON.stringify(APN_Companion));
	                var companion = {};

	                // required attributes
	                var width = helper.getNodeAttributeNumberValue(node, 'width', -1);
	                var height = helper.getNodeAttributeNumberValue(node, 'height', -1);
	                if (width <= 0 || height <= 0) {
	                    continue;
	                }
	                companion.width = width;
	                companion.height = height;

	                // optional attributes and subnodes
	                var val = helper.getNodeAttributeValue(node, 'id');
	                if (val) {
	                    companion.id = val;
	                }

	                val = helper.getNodeAttributeNumberValue(node, 'assetWidth', -1);
	                if (val > 0) {
	                    companion.assetWidth = val;
	                }

	                val = helper.getNodeAttributeNumberValue(node, 'assetHeight', -1);
	                if (val > 0) {
	                    companion.assetHeight = val;
	                }

	                val = helper.getNodeAttributeNumberValue(node, 'expandedWidth', -1);
	                if (val > 0) {
	                    companion.expandedWidth = val;
	                }

	                val = helper.getNodeAttributeNumberValue(node, 'expandedHeight', -1);
	                if (val > 0) {
	                    companion.expandedHeight = val;
	                }

	                val = helper.getNodeAttributeValue(node, 'apiFramework');
	                if (val) {
	                    companion.apiFramework = val;
	                }

	                val = helper.getNodeAttributeValue(node, 'adSlotID');
	                if (val) {
	                    companion.adSlotID = val;
	                }

	                var pxratio = helper.getNodeAttributeNumberValue(node, 'pxratio', 1.0);
	                if (pxratio !== 1.0) {
	                	companion.pxratio = pxratio;
	                }
	                
	                val = helper.getNodeAttributeValue(node, 'required');
	                if (val) {
	                    companion.required = val;
	                }

	                val = helper.getSubNodeValue(node, 'AltText');
	                if (val) {
	                    companion.AltText = val;
	                }

	                val = helper.getSubNodeValue(node, 'AdParameters');
	                if (val) {
	                    companion.AdParameters = val;
	                }

	                var resource = helper.getSubNode(node, 'StaticResource');
	                if (resource) {
	                    val = helper.getNodeAttributeValue(resource, 'creativeType');
	                    if (val) {
	                        // validate capability
	                        var flashOnlyType = val === 'video/x-flv' || val === 'video/x-f4v' || val === 'video/f4v' || val === 'application/x-shockwave-flash';
	                        var isMobile = false;
	                        if (/Android|webOS|iPhone|iPad|BlackBerry|IEMobile|Windows Phone|Kindle|Silk|Opera Mini/i.test(navigator.userAgent)) {
	                            isMobile = true;
	                        }
	                        if (isMobile && flashOnlyType) {
	                            // ignore this companion
	                            continue;
	                        }

	                        var staticResource = {type: val};
	                        val = helper.getNodeValues(resource);
	                        if (val) {
	                            staticResource.src = val;
	                            companion.StaticResource = staticResource;
	                        }
	                    }
	                }

	                val = helper.getSubNodeWholeValue(node, 'IFrameResource');
	                if (val) {
	                    companion.IFrameResource = val;
	                }

	                val = helper.getSubNodeWholeValue(node, 'HTMLResource');
	                if (val) {
	                    companion.HTMLResource = val;
	                }

	                val = helper.getSubNodeValue(node, 'CompanionClickThrough');
	                if (val) {
	                    companion.CompanionClickThrough = val;
	                }

	                var j;
	                var trackingNode;
	                var url;
	                var clickTrackinEvents = helper.getSubNodes(node, 'CompanionClickTracking');
	                if (clickTrackinEvents) {
	                    companion.CompanionClickTracking = [];
	                    for (j = 0; j < clickTrackinEvents.length; j++) {
	                        trackingNode = clickTrackinEvents[j];
	                        url = helper.getNodeValues(trackingNode);
	                        if (url) {
	                            companion.CompanionClickTracking.push(url);
	                        }
	                    }
	                }

	                var trackinEvents = helper.getSubNodes(node, 'Tracking');
	                if (trackinEvents) {
	                    companion.TrackingEvents = [];
	                    for (j = 0; j < trackinEvents.length; j++) {
	                        trackingNode = trackinEvents[j];
	                        var event = helper.getNodeAttributeValue(trackingNode, 'event');
	                        url = helper.getNodeValues(trackingNode);
	                        if (event && url) {
	                            companion.TrackingEvents.push({eventType: event, url: url});
	                        }
	                    }
	                }

	                companionAdsDest.companions.push(companion);
	            }
	        }
	    },

	    mergeCompanions: function (companionAdsDest, companionAds) {
	        if (companionAdsDest.required === 'unknown') {
	            companionAdsDest.required = companionAds.required;
	        }
	        companionAdsDest.companions = companionAdsDest.companions.concat(companionAds.companions);
	    },

	    createCompanionNode: function (xmlDoc, data) {
	        var companion = xmlDoc.createElement('Companion');
	        var i;
	        var elem;
	        var attr;
	        var cdata;

	        var arrAttrs = ['id', 'width', 'height', 'assetWidth', 'assetHeight', 'expandedWidth', 'expandedHeight',
	            'apiFramework', 'adSlotID', 'required'];
	        for (i = 0; i < arrAttrs.length; i++) {
	            if (data.hasOwnProperty(arrAttrs[i])) {
	                attr = xmlDoc.createAttribute(arrAttrs[i]);
	                attr.value = data[arrAttrs[i]];
	                companion.setAttributeNode(attr);
	            }
	        }

	        if (data.hasOwnProperty('StaticResource')) {
	            elem = xmlDoc.createElement('StaticResource');
	            attr = xmlDoc.createAttribute('creativeType');
	            attr.value = data.StaticResource.type;
	            elem.setAttributeNode(attr);
	            cdata = xmlDoc.createCDATASection(data.StaticResource.src);
	            elem.appendChild(cdata);
	            companion.appendChild(elem);
	        }

	        var arrNodes = ['AdParameters', 'IFrameResource', 'HTMLResource', 'CompanionClickThrough'];
	        for (i = 0; i < arrNodes.length; i++) {
	            if (data.hasOwnProperty(arrNodes[i])) {
	                elem = xmlDoc.createElement(arrNodes[i]);
	                cdata = xmlDoc.createCDATASection(data[arrNodes[i]]);
	                elem.appendChild(cdata);
	                companion.appendChild(elem);
	            }
	        }

	        if (data.hasOwnProperty('AltText')) {
	            elem = xmlDoc.createElement('AltText');
	            try {
	                elem.innerHTML = data.AltText;
	            }
	            catch (ex) {
	                // IE 11 does not allow set innerHTML property
	                try {
	                    elem.textContent = data.AltText;
	                }
	                catch (ex2) {

	                }
	            }
	            companion.appendChild(elem);
	        }

	        if (data.hasOwnProperty('CompanionClickTracking')) {
	            for (i = 0; i < data.CompanionClickTracking.length; i++) {
	                var tracking = xmlDoc.createElement('CompanionClickTracking');
	                cdata = xmlDoc.createCDATASection(data.CompanionClickTracking[i]);
	                tracking.appendChild(cdata);
	                companion.appendChild(tracking);
	            }
	        }

	        if (data.hasOwnProperty('TrackingEvents')) {
	            elem = xmlDoc.createElement('TrackingEvents');
	            // enumerate trackers
	            for (i = 0; i < data.TrackingEvents.length; i++) {
	                var event = xmlDoc.createElement('Tracking');
	                attr = xmlDoc.createAttribute('event');
	                attr.value = data.TrackingEvents[i].eventType;
	                event.setAttributeNode(attr);
	                cdata = xmlDoc.createCDATASection(data.TrackingEvents[i].url);
	                event.appendChild(cdata);
	                elem.appendChild(event);
	            }
	            companion.appendChild(elem);
	        }

	        return companion;
	    }
	};

	module.exports = CompanionAds;

/***/ }),
/* 29 */
/***/ (function(module, exports) {

	var Icons = {

	    parse: function (IconsDest, IconsNode, helper) {
	        var nodes = helper.getSubNodes(IconsNode, 'Icon');
	        if (nodes) {
	            for (var i = 0; i < nodes.length; i++) {
	                var node = nodes[i];
	                var icon = {};

	                // required attributes
	                var width = helper.getNodeAttributeNumberValue(node, 'width', -1);
	                var height = helper.getNodeAttributeNumberValue(node, 'height', -1);
	                var program = helper.getNodeAttributeValue(node, 'program');
	                var xPosition = helper.getNodeAttributeValue(node, 'xPosition');
	                var yPosition = helper.getNodeAttributeValue(node, 'yPosition');
	                if (width <= 0 || height <= 0 || program.length === 0 || xPosition.length === 0 || yPosition.length === 0) {
	                    continue;
	                }
	                icon.width = width;
	                icon.height = height;
	                icon.program = program;
	                icon.xPosition = xPosition;
	                icon.yPosition = yPosition;

	                // optional attributes and subnodes
	                var val = helper.getNodeAttributeValue(node, 'apiFramework');
	                if (val) {
	                    icon.apiFramework = val;
	                }

	                var pxratio = helper.getNodeAttributeNumberValue(node, 'pxratio', 1.0);
	                if (pxratio !== 1.0) {
	                	icon.pxratio = pxratio;
	                }
	                
	                val = helper.getNodeAttributeValue(node, 'offset');
	                if (val) {
	                    // validate
	                    if (isNaN(Date.parse('January 1, 1970 ' + val))) {
	                        // invalid time format
	                        continue;
	                    }
	                    icon.offset = val;
	                }

	                val = helper.getNodeAttributeValue(node, 'duration');
	                if (val) {
	                    // validate
	                    if (isNaN(Date.parse('January 1, 1970 ' + val))) {
	                        // invalid time format
	                        continue;
	                    }
	                    icon.duration = val;
	                }

	                var resource = helper.getSubNode(node, 'StaticResource');
	                if (resource) {
	                    val = helper.getNodeAttributeValue(resource, 'creativeType');
	                    if (val) {
	                        // validate capability
	                        var flashOnlyType = val === 'video/x-flv' || val === 'video/x-f4v' || val === 'video/f4v' || val === 'application/x-shockwave-flash';
	                        var isMobile = false;
	                        if (/Android|webOS|iPhone|iPad|BlackBerry|IEMobile|Windows Phone|Kindle|Silk|Opera Mini/i.test(navigator.userAgent)) {
	                            isMobile = true;
	                        }
	                        if (isMobile && flashOnlyType) {
	                            // ignore this companion
	                            continue;
	                        }

	                        var staticResource = {type: val};
	                        val = helper.getNodeValues(resource);
	                        if (val) {
	                            staticResource.src = val;
	                            icon.StaticResource = staticResource;
	                        }
	                    }
	                }

	                val = helper.getSubNodeWholeValue(node, 'IFrameResource');
	                if (val) {
	                    icon.IFrameResource = val;
	                }

	                val = helper.getSubNodeWholeValue(node, 'HTMLResource');
	                if (val) {
	                    icon.HTMLResource = val;
	                }
	                
	                // icon must contain a resource
	                if (!icon.StaticResource && !icon.IFrameResource && !icon.HTMLResource) {
	                	continue;
	                }

	                var iconClicks = helper.getSubNode(node, 'IconClicks');
	                if (iconClicks) {
	                    val = helper.getSubNodeValue(node, 'IconClickThrough');
	                    if (val) {
	                        icon.IconClickThrough = val;
	                    }

	                    //IconClickTracking can be multiple by a VAST3.0 spec 2.4.3.5 Icon Clicks and Tracking
	                    val = helper.getSubNodes(iconClicks, 'IconClickTracking');
	                    if (val) {
	                        icon.IconClickTracking = [];
	                        for (var cntIconClick = 0; cntIconClick < val.length; cntIconClick++) {
	                            icon.IconClickTracking.push(helper.getNodeValues(val[cntIconClick]));
	                        }
	                    }
	                }

	                /* VAST3 XML schema explains IconViewTracking can be multiple like below
	                 <xs:element name="IconViewTracking" type="xs:anyURI" minOccurs="0" maxOccurs="unbounded">
	                 <xs:annotation>
	                 <xs:documentation>URLs to ping when icon is shown.</xs:documentation>
	                 </xs:annotation>
	                 </xs:element>
	                 */
	                var iconViewTracking = helper.getSubNodes(node, 'IconViewTracking');
	                if (iconViewTracking) {
	                    icon.IconViewTracking = [];
	                    for (var cntIconView = 0; cntIconView < iconViewTracking.length; cntIconView++) {
	                        icon.IconViewTracking.push(helper.getNodeValues(iconViewTracking[cntIconView]));
	                    }
	                }


	                var removeExistingProgram = function (IconsDest, program) {
	                    for (var cntIconDest = 0; cntIconDest < IconsDest.length; cntIconDest++) {
	                        if (IconsDest[cntIconDest].program === program) {
	                            IconsDest.splice(cntIconDest, 1);
	                        }
	                    }
	                };

	                //VIDLA-625 if same program exists in Icons node last one will be used.
	                removeExistingProgram(IconsDest, program);

	                IconsDest.push(icon);

	            }
	        }
	    },

	    createIconNode: function (xmlDoc, data) {
	        var icon = xmlDoc.createElement('Icon');
	        var i;
	        var elem;
	        var attr;
	        var cdata;

	        var arrAttrs = ['width', 'height', 'program', 'xPosition', 'yPosition', 'apiFramework', 'offset', 'duration'];
	        for (i = 0; i < arrAttrs.length; i++) {
	            if (data.hasOwnProperty(arrAttrs[i])) {
	                attr = xmlDoc.createAttribute(arrAttrs[i]);
	                attr.value = data[arrAttrs[i]];
	                icon.setAttributeNode(attr);
	            }
	        }

	        if (data.hasOwnProperty('StaticResource')) {
	            elem = xmlDoc.createElement('StaticResource');
	            attr = xmlDoc.createAttribute('creativeType');
	            attr.value = data.StaticResource.type;
	            elem.setAttributeNode(attr);
	            cdata = xmlDoc.createCDATASection(data.StaticResource.src);
	            elem.appendChild(cdata);
	            icon.appendChild(elem);
	        }

	        var arrNodes = ['IFrameResource', 'HTMLResource', 'IconViewTracking'];
	        for (i = 0; i < arrNodes.length; i++) {
	            if (data.hasOwnProperty(arrNodes[i])) {
	                elem = xmlDoc.createElement(arrNodes[i]);
	                cdata = xmlDoc.createCDATASection(data[arrNodes[i]]);
	                elem.appendChild(cdata);
	                icon.appendChild(elem);
	            }
	        }

	        if (data.hasOwnProperty('IconClickThrough') || data.hasOwnProperty('IconClickTracking')) {
	            var iconClicks = xmlDoc.createElement('IconClicks');
	            if (data.hasOwnProperty('IconClickThrough')) {
	                elem = xmlDoc.createElement('IconClickThrough');
	                cdata = xmlDoc.createCDATASection(data.IconClickThrough);
	                elem.appendChild(cdata);
	                iconClicks.appendChild(elem);
	            }
	            if (data.hasOwnProperty('IconClickTracking')) {
	                elem = xmlDoc.createElement('IconClickTracking');
	                cdata = xmlDoc.createCDATASection(data.IconClickTracking);
	                elem.appendChild(cdata);
	                iconClicks.appendChild(elem);
	            }
	            icon.appendChild(iconClicks);
	        }

	        return icon;
	    }
	};

	module.exports = Icons;

/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * VAST Parser module.
	 * @module VastParser
	 */

	var VastXMLParserHelper = __webpack_require__(27);

	var APN_CompanionAds = __webpack_require__(28);
	var APN_Icons = __webpack_require__(29);

	var VastModifier = function (parserData, adToken, notifyUrl, contentSource, buyerMemberId, viewabilityConfig, additionalTrackers, creativeId) {

	    var _logger = __webpack_require__(3);
	    var _prefix = 'VAST Parser';

	    var _parserData = parserData;
	    var _adToken = adToken;
	    var _notifyUrl = notifyUrl;
	    var _creativeId = creativeId;
	    var _buyerMemberId = buyerMemberId;
	    var _contentSource = contentSource;
	    var _viewabilityConfig = viewabilityConfig;
		var _additionalTrackers = additionalTrackers;
	    var _helper = new VastXMLParserHelper();

	    function trimXml(strVastXml) {
	        var nPos = strVastXml.indexOf('<');
	        var strXml = strVastXml.substr(nPos === -1 ? 0 : nPos);
	        nPos = strXml.lastIndexOf('>');
	        if (nPos !== -1) {
	            strXml = strXml.substr(0, nPos + 1);
	        }
	        return strXml;
	    }

	    function prepareDocObject(strVastXml) {
	        var strXml = trimXml(strVastXml);
	        var xmlDoc = null;
	        if (typeof window.DOMParser !== 'undefined') {
	            xmlDoc = (new DOMParser()).parseFromString(strXml, 'text/xml');
	            if (xmlDoc.documentElement.nodeName === 'parsererror') {
	                try {
	                    _logger.error(_prefix, 'Error reason = ' + xmlDoc.documentElement.childNodes[0].nodeValue);
	                }
	                catch (e) {
	                }
	                return null;
	            }
	        }
	        else if (typeof window.ActiveXObject !== 'undefined') {
	            try {
	                xmlDoc = new window.ActiveXObject('Microsoft.XMLDOM');
	                xmlDoc.loadXML(strXml);
	                if (xmlDoc.parseError.errorCode !== 0) {
	                    _logger.error(_prefix, xmlDoc.parseError);
	                    return null;
	                }
	            }
	            catch (ex) {
	                _logger.error(_prefix, 'Failed to parse vast xml by window.ActiveXObject(Microsoft.XMLDOM)', ex);
	                return null;
	            }
	        }
	        else {
	            _logger.error(_prefix, 'Failed to get vast xml parser');
	            return null;
	        }
	        return xmlDoc;
	    }

	    var _xmlDoc = prepareDocObject(parserData.vastXml);

	    function updateVastVersion(vastVersion) {
	        if (_xmlDoc) {
	            var vastNode = _helper.getSubNode(_xmlDoc, 'VAST');
	            if (vastNode) {
	                var attr = _xmlDoc.createAttribute('version');
	                attr.value = vastVersion;
	                vastNode.setAttributeNode(attr);
	            }
	        }
	    }

	    updateVastVersion(parserData.vastVersion);

	    function appendAttributesToAdNode() {
	        if (_xmlDoc) {
	            var vastNode = _helper.getSubNode(_xmlDoc, 'VAST');
	            if (vastNode) {
	                var ads = _helper.getSubNodes(vastNode, 'Ad');
	                if (ads && ads.length > 0) {
	                    for (var i = 0; i < ads.length; i++) {
	                        if (_notifyUrl) {
	                            var attr = _xmlDoc.createAttribute('notifyurl');
	                            attr.value = _notifyUrl;
	                            ads[i].setAttributeNode(attr);
	                        }
	                        if (_contentSource && _contentSource === 'rtb') {
	                            var attr2 = _xmlDoc.createAttribute('rtb');
	                            attr2.value = 'true';
	                            ads[i].setAttributeNode(attr2);
	                        }
	                        var attr3 = _xmlDoc.createAttribute('sequence');
	                        attr3.value = _parserData.sequence.toString();
	                        ads[i].setAttributeNode(attr3);
	                        if (_buyerMemberId) {
	                            var attr4 = _xmlDoc.createAttribute('buyerMemberId');
	                            attr4.value = _buyerMemberId;
	                            ads[i].setAttributeNode(attr4);
	                        }
	                        if (_viewabilityConfig) {
	                            var attr5 = _xmlDoc.createAttribute('viewabilityConfig');
	                            attr5.value = _viewabilityConfig;
	                            ads[i].setAttributeNode(attr5);
	                        }
	                        if (_creativeId) {
	                            var attr6 = _xmlDoc.createAttribute('creativeId');
	                            attr6.value = _creativeId;
	                            ads[i].setAttributeNode(attr6);
	                        }
	                    }
	                }
	            }
	        }
	    }

	    appendAttributesToAdNode();

	    function addCdataBlock(parentNode, url) {
	        var cdata = _xmlDoc.createCDATASection(url);
	        parentNode.appendChild(cdata);
	    }

	    var _creativesNode = null;

	    function getLinearNode() {
	        if (_adToken) {
	            var vastNode = _helper.getSubNode(_xmlDoc, 'VAST');
	            var attr = _xmlDoc.createAttribute('adtoken');
	            attr.value = _adToken;
	            vastNode.setAttributeNode(attr);
	        }

	        var inLine = _helper.getSubNode(_xmlDoc, 'InLine');
	        if (!inLine) {
	            return null;	// VAST xml has no InLine node
	        }

	        var i;
	        var impNode;
	        if (_parserData.extImpressionUrls && typeof _parserData.extImpressionUrls === 'string') {
	            var impTrackers = JSON.parse(_parserData.extImpressionUrls);
	            if (Array.isArray(impTrackers) && impTrackers.length > 0) {
	                for (i = 0; i < impTrackers.length; i++) {
	                    impNode = _xmlDoc.createElement('Impression');
	                    addCdataBlock(impNode, impTrackers[i]);
	                    inLine.appendChild(impNode);
	                }
	            }
	            delete _parserData.extImpressionUrls;
	        }
	    	if (_additionalTrackers && _additionalTrackers.impressions) {
	    		for (i = 0; i < _additionalTrackers.impressions.length; i++) {
	    			if (_additionalTrackers.impressions[i]) {
		            	impNode = _xmlDoc.createElement('Impression');
		            	addCdataBlock(impNode, _additionalTrackers.impressions[i]);
		            	inLine.appendChild(impNode);
	    			}
	    		}
	    	}
	        	
	    	var errNode;
	        if (_parserData.extErrorUrls && typeof _parserData.extErrorUrls === 'string') {
	            var errTrackers = JSON.parse(_parserData.extErrorUrls);
	            if (Array.isArray(errTrackers) && errTrackers.length > 0) {
	                for (i = 0; i < errTrackers.length; i++) {
	                    errNode = _xmlDoc.createElement('Error');
	                    addCdataBlock(errNode, errTrackers[i]);
	                    inLine.appendChild(errNode);
	                }
	            }
	            delete _parserData.extErrorUrls;
	        }
	    	if (_additionalTrackers && _additionalTrackers.errors) {
	    		for (i = 0; i < _additionalTrackers.errors.length; i++) {
	    			if (_additionalTrackers.errors[i]) {
		            	errNode = _xmlDoc.createElement('Error');
		            	addCdataBlock(errNode, _additionalTrackers.errors[i]);
		            	inLine.appendChild(errNode);
	    			}
	    		}
	    	}
	    	
	        if (_parserData.extViewableImpression && typeof _parserData.extViewableImpression === 'string') {
	            var viewableImpressions = JSON.parse(_parserData.extViewableImpression);
	            var viNode = _xmlDoc.createElement('ViewableImpression');
	            if (Array.isArray(viewableImpressions.viewable) && viewableImpressions.viewable.length > 0) {
	                for (i = 0; i < viewableImpressions.viewable.length; i++) {
	                    var viewableNode = _xmlDoc.createElement('Viewable');
	                    addCdataBlock(viewableNode, viewableImpressions.viewable[i]);
	                    viNode.appendChild(viewableNode);
	                }
	            }
	            if (Array.isArray(viewableImpressions.notViewable) && viewableImpressions.notViewable.length > 0) {
	                for (i = 0; i < viewableImpressions.notViewable.length; i++) {
	                    var notViewableNode = _xmlDoc.createElement('NotViewable');
	                    addCdataBlock(notViewableNode, viewableImpressions.notViewable[i]);
	                    viNode.appendChild(notViewableNode);
	                }
	            }
	            if (Array.isArray(viewableImpressions.undetermined) && viewableImpressions.undetermined.length > 0) {
	                for (i = 0; i < viewableImpressions.undetermined.length; i++) {
	                    var undeterminedNode = _xmlDoc.createElement('ViewUndetermined');
	                    addCdataBlock(undeterminedNode, viewableImpressions.undetermined[i]);
	                    viNode.appendChild(undeterminedNode);
	                }
	            }
	            inLine.appendChild(viNode);
	            delete _parserData.extViewableImpression;
	        }
	        	
	        var uaParser = __webpack_require__(9);
	        var ua = uaParser();
	        var browser = ua.browser.name.toLowerCase();
	        if (_parserData.extExtensions && typeof _parserData.extExtensions === 'string') {
	            var extensions = _parserData.extExtensions;
	            if (extensions.length > 0) {
	                var extensionsNode = _helper.getSubNode(inLine, 'Extensions');
	                if (!extensionsNode) {
	                    extensionsNode = _xmlDoc.createElement('Extensions');
	                    inLine.appendChild(extensionsNode);
	                    if (browser === 'ie') {
	                    	extensionsNode.textContent = extensions;
	                    }
	                    else {
	                        extensionsNode.innerHTML = extensions;
	                    }
	                }
	                else {
	                    if (browser === 'ie') {
	                    	extensionsNode.textContent = extensionsNode.textContent.toString() + extensions;
	                    }
	                    else {
	                        extensionsNode.innerHTML = extensionsNode.innerHTML.toString() + extensions;
	                    }
	                }
	            }
	            delete _parserData.extExtensions;
	        }

	        _creativesNode = _helper.getSubNode(inLine, 'Creatives');
	        if (!_creativesNode) {
	            _creativesNode = _xmlDoc.createElement('Creatives');
	            inLine.appendChild(_creativesNode);
	        }
	        var linearNode = _helper.getSubNode(_creativesNode, 'Linear');
	        if (!linearNode) {
	            var creativeNode = _xmlDoc.createElement('Creative');
	            _creativesNode.appendChild(creativeNode);
	            linearNode = _xmlDoc.createElement('Linear');
	            creativeNode.appendChild(linearNode);
	        }
	        return linearNode;
	    }

	    function iconAlreadyExist(iconsNode, program) {
	        var icons = _helper.getSubNodes(iconsNode, 'Icon');
	        if (icons && icons.length > 0) {
	            for (var i = 0; i < icons.length; i++) {
	                var programAttr = _helper.getNodeAttributeValue(icons[i], 'program');
	                if (programAttr.toLowerCase() === program.toLowerCase()) {
	                    return true;
	                }
	            }
	        }
	        return false;
	    }

	    function appendTrackings(linearNode) {
	        var i;
	        if (_parserData.extTrackingUrls && typeof _parserData.extTrackingUrls === 'string' &&
	            _parserData.extTrackingUrls.length > 5) {
	            var videoTrackers = JSON.parse(_parserData.extTrackingUrls);
	            var trackersNode = _helper.getSubNode(linearNode, 'TrackingEvents');
	            if (!trackersNode) {
	                trackersNode = _xmlDoc.createElement('TrackingEvents');
	                linearNode.appendChild(trackersNode);
	            }
	            // enumerate video trackers
	            for (var name in videoTrackers) {
	                var urls = videoTrackers[name];
	                for (i = 0; i < urls.length; i++) {
	                    var trackerNode = _xmlDoc.createElement('Tracking');
	                    var attr = _xmlDoc.createAttribute('event');
	                    attr.value = name;
	                    trackerNode.setAttributeNode(attr);
	                    //trackerNode.textContent = urls[i];
	                    addCdataBlock(trackerNode, urls[i]);
	                    trackersNode.appendChild(trackerNode);
	                }
	            }
	            delete _parserData.extTrackingUrls;
	        }

	        var videoClicksNode;
	        if (_parserData.extClickUrls && typeof _parserData.extClickUrls === 'string') {
	            var videoClicks = JSON.parse(_parserData.extClickUrls);
	            if (Array.isArray(videoClicks) && videoClicks.length > 0) {
	                videoClicksNode = _helper.getSubNode(linearNode, 'VideoClicks');
	                if (!videoClicksNode) {
	                    videoClicksNode = _xmlDoc.createElement('TrackingEvents');
	                    linearNode.appendChild(videoClicksNode);
	                }
	                if (!_helper.getSubNode(videoClicksNode, 'ClickThrough')) {
	                    var clickNode = _xmlDoc.createElement('ClickThrough');
	                    //clickNode.textContent = videoClicks[0];
	                    addCdataBlock(clickNode, videoClicks[0]);
	                    videoClicksNode.appendChild(clickNode);
	                }
	            }
	            delete _parserData.extClickUrls;
	        }

	        if (_parserData.extClickTrackingUrls && typeof _parserData.extClickTrackingUrls === 'string') {
	            var clickTrackings = JSON.parse(_parserData.extClickTrackingUrls);
	            if (Array.isArray(clickTrackings) && clickTrackings.length > 0) {
	                videoClicksNode = _helper.getSubNode(linearNode, 'VideoClicks');
	                if (!videoClicksNode) {
	                    videoClicksNode = _xmlDoc.createElement('VideoClicks');
	                    linearNode.appendChild(videoClicksNode);
	                }
	                for (i = 0; i < clickTrackings.length; i++) {
	                    var clickTrackingNode = _xmlDoc.createElement('ClickTracking');
	                    //clickTrackingNode.textContent = clickTrackings[i];
	                    addCdataBlock(clickTrackingNode, clickTrackings[i]);
	                    videoClicksNode.appendChild(clickTrackingNode);
	                }
	            }
	            delete _parserData.extClickTrackingUrls;
	        }

	        if (_parserData.extIcons && typeof _parserData.extIcons === 'string') {
	            var icons = JSON.parse(_parserData.extIcons);
	            if (Array.isArray(icons) && icons.length > 0) {
	                var iconsNode = _helper.getSubNode(linearNode, 'Icons');
	                if (!iconsNode) {
	                    iconsNode = _xmlDoc.createElement('Icons');
	                    linearNode.appendChild(iconsNode);
	                }
	                for (i = 0; i < icons.length; i++) {
	                    // avoid duplicate icons with same program
	                    if (!iconAlreadyExist(iconsNode, icons[i].program)) {
	                        var iconNode = APN_Icons.createIconNode(_xmlDoc, icons[i]);
	                        if (iconNode) {
	                            iconsNode.appendChild(iconNode);
	                        }
	                    }
	                }
	            }
	            delete _parserData.extIcons;
	        }
	    }

	    function appendNewCompanion(companionAdsNode, newCompanion) {
	        // get companions with resources
	        var companionNode, j;
	        var companionAdsObj = {companions: []};
	        APN_CompanionAds.parse(companionAdsObj, companionAdsNode, _helper);
	        var resCompanions = companionAdsObj.companions;
	        if (newCompanion.StaticResource || newCompanion.IFrameResource || newCompanion.HTMLResource) {
	            var sameSize = false;
	            for (j = 0; j < resCompanions.length; j++) {
	                if (newCompanion.width === resCompanions[j].width &&
	                    newCompanion.height === resCompanions[j].height) {
	                    sameSize = true;
	                    break;
	                }
	            }
	            if (!sameSize) {
	                companionNode = APN_CompanionAds.createCompanionNode(_xmlDoc, newCompanion);
	                companionAdsNode.appendChild(companionNode);
	            }
	        }
	        else {
	            // aggregate companion without resorces into companions with resources
	            var needUpdate = false;
	            for (j = 0; j < resCompanions.length; j++) {
	                if (newCompanion.width === resCompanions[j].width && newCompanion.height === resCompanions[j].height) {
	                    if ((newCompanion.id && newCompanion.id === resCompanions[j].id) || (!newCompanion.id)) {
	                        // add click trackings
	                        if (newCompanion.CompanionClickTracking) {
	                            if (!resCompanions[j].CompanionClickTracking) {
	                                resCompanions[j].CompanionClickTracking = [];
	                            }
	                            resCompanions[j].CompanionClickTracking = resCompanions[j].CompanionClickTracking.concat(newCompanion.CompanionClickTracking);
	                        }
	                        // add view trackings
	                        if (newCompanion.TrackingEvents) {
	                            if (!resCompanions[j].TrackingEvents) {
	                                resCompanions[j].TrackingEvents = [];
	                            }
	                            resCompanions[j].TrackingEvents = resCompanions[j].TrackingEvents.concat(newCompanion.TrackingEvents);
	                        }
	                        needUpdate = true;
	                        break;
	                    }
	                }
	            }
	            if (needUpdate) {
	                while (companionAdsNode.firstChild) {
	                    companionAdsNode.removeChild(companionAdsNode.firstChild);
	                }
	                for (var i = 0; i < resCompanions.length; i++) {
	                    companionNode = APN_CompanionAds.createCompanionNode(_xmlDoc, resCompanions[i]);
	                    companionAdsNode.appendChild(companionNode);
	                }
	            }
	        }
	    }

	    function appendCompanions() {
	        if (_parserData.extCompanions && typeof _parserData.extCompanions === 'string') {
	            var companions = JSON.parse(_parserData.extCompanions);
	            if (Array.isArray(companions.companions) && companions.companions.length > 0) {
	                var companionAdsNode = _helper.getSubNode(_creativesNode, 'CompanionAds');
	                if (!companionAdsNode) {
	                    companionAdsNode = _xmlDoc.createElement('CompanionAds');
	                    _creativesNode.appendChild(companionAdsNode);
	                }
	                var attr;
	                if (companions.required !== 'unknown') {
	                    attr = _xmlDoc.createAttribute('required');
	                    attr.value = companions.required;
	                    companionAdsNode.setAttributeNode(attr);
	                }
	                for (var i = 0; i < companions.companions.length; i++) {
	                    appendNewCompanion(companionAdsNode, companions.companions[i]);
	                }
	            }
	        }
	    }

	    this.addTrackers = function () {
	        if (!_xmlDoc) {
	            return '';
	        }
	        var linearNode = getLinearNode();
	        if (!linearNode) {
	            return '';
	        }
	        appendTrackings(linearNode);
	        if (_creativesNode) {
	            appendCompanions();
	        }
	        var strOut;
	        var uaParser = __webpack_require__(9);
	        var ua = uaParser();
	        var browser = ua.browser.name.toLowerCase();
	        if (browser === 'edge') {
	            // VIDLA-683. Edge is loosing nested CDATA during serialization to string.
	            strOut = _xmlDoc.childNodes[0].outerHTML;
	        }
	        else if (browser === 'ie') {
	            // VIDLA-683. IE is loosing nested CDATA during parsing XML string to DOM.
	            // We have to restore nested CDATA for AdParameters if needed.
	            var nodes = _xmlDoc.getElementsByTagName('AdParameters');
	            for (var i = 0; i < nodes.length; i++) {
	                if (nodes[i].textContent.indexOf(']]>') > 0 && nodes[i].textContent.substr(0, 9) !== '<![CDATA[') {
	                    nodes[i].textContent = nodes[i].textContent.replace(/]]>/g, "]]]]><![CDATA[>");
	                    nodes[i].textContent = '<![CDATA[' + nodes[i].textContent + ']]>';
	                }
	            }
	            strOut = (new XMLSerializer()).serializeToString(_xmlDoc);
	            strOut = strOut.replace(/&lt;/g, '<');
	            strOut = strOut.replace(/&gt;/g, '>');
	        }
	        else {
	            strOut = (new XMLSerializer()).serializeToString(_xmlDoc);
	        }
	        return strOut;
	    };
	};

	module.exports = VastModifier;

/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * VastMerger module.
	 * @module VastParser
	 */

	var VastXMLParserHelper = __webpack_require__(27);

	var VastMerger = function (xmlList) {

	    var _logger = __webpack_require__(3);
	    var _prefix = 'VAST Parser';

	    var _xmls = xmlList;
	    var _helper = new VastXMLParserHelper();

	    function trimXml(strVastXml) {
	        var nPos = strVastXml.indexOf('<');
	        var strXml = strVastXml.substr(nPos === -1 ? 0 : nPos);
	        nPos = strXml.lastIndexOf('>');
	        if (nPos !== -1) {
	            strXml = strXml.substr(0, nPos + 1);
	        }
	        return strXml;
	    }

	    function prepareDocObject(strVastXml) {
	        var strXml = trimXml(strVastXml);
	        var xmlDoc = null;
	        if (typeof window.DOMParser !== 'undefined') {
	            xmlDoc = (new DOMParser()).parseFromString(strXml, 'text/xml');
	            if (xmlDoc.documentElement.nodeName === 'parsererror') {
	                try {
	                    _logger.error(_prefix, 'Error reason = ' + xmlDoc.documentElement.childNodes[0].nodeValue);
	                }
	                catch (e) {
	                }
	                return null;
	            }
	        }
	        else if (typeof window.ActiveXObject !== 'undefined') {
	            try {
	                xmlDoc = new window.ActiveXObject('Microsoft.XMLDOM');
	                xmlDoc.loadXML(strXml);
	                if (xmlDoc.parseError.errorCode !== 0) {
	                    _logger.error(_prefix, xmlDoc.parseError);
	                    return null;
	                }
	            }
	            catch (ex) {
	                _logger.error(_prefix, 'Failed to parse vast xml by window.ActiveXObject(Microsoft.XMLDOM)', ex);
	                return null;
	            }
	        }
	        else {
	            _logger.error(_prefix, 'Failed to get vast xml parser');
	            return null;
	        }
	        return xmlDoc;
	    }

	    var _xmlDoc = prepareDocObject(_xmls[0]);
	    if (!_xmlDoc) {
	        return;
	    }

	    var _vastNode = _helper.getSubNode(_xmlDoc, 'VAST');
	    var attr = _xmlDoc.createAttribute('apn_waterfall');
	    attr.value = true;
	    _vastNode.setAttributeNode(attr);

	    var adNodes = [];
	    for (var i = 0; i < _xmls.length; i++) {
	        var doc = prepareDocObject(_xmls[i]);
	        var vastNode = _helper.getSubNode(doc, 'VAST');
	        var ads = _helper.getSubNodes(vastNode, 'Ad');
	        if (ads && ads.length > 0) {
	            for (var j = 0; j < ads.length; j++) {
	                adNodes.push(ads[j]);
	            }
	        }
	    }

	    adNodes.sort(function (a, b) {
	        return _helper.getNodeAttributeNumberValue(a, 'sequence') - _helper.getNodeAttributeNumberValue(b, 'sequence');
	    });

	    var uaParser = __webpack_require__(9);
	    var ua = uaParser();
	    var browser = ua.browser.name.toLowerCase();
	    
	    if (browser === 'ie') {
	        _vastNode.textContent = '';
	    }
	    else {
	        _vastNode.innerHTML = '';
	    }
	    for (i = 0; i < adNodes.length; i++) {
	        _vastNode.appendChild(adNodes[i]);
	    }

	    this.getVastXml = function () {
	        if (!_xmlDoc) {
	            return '';
	        }
	        var strOut;
	        if (browser === 'edge') {
	            // VIDLA-683. Edge is loosing nested CDATA during serialization to string.
	            strOut = _xmlDoc.childNodes[0].outerHTML;
	        }
	        else if (browser === 'ie') {
	            // VIDLA-683. IE is loosing nested CDATA during parsing XML string to DOM.
	            // We have to restore nested CDATA for AdParameters if needed.
	            var nodes = _xmlDoc.getElementsByTagName('AdParameters');
	            for (var i = 0; i < nodes.length; i++) {
	                if (nodes[i].textContent.indexOf(']]>') > 0 && nodes[i].textContent.substr(0, 9) !== '<![CDATA[') {
	                    nodes[i].textContent = nodes[i].textContent.replace(/]]>/g, "]]]]><![CDATA[>");
	                    nodes[i].textContent = '<![CDATA[' + nodes[i].textContent + ']]>';
	                }
	            }
	            strOut = (new XMLSerializer()).serializeToString(_xmlDoc);
	            strOut = strOut.replace(/&lt;/g, '<');
	            strOut = strOut.replace(/&gt;/g, '>');
	        }
	        else {
	            strOut = (new XMLSerializer()).serializeToString(_xmlDoc);
	        }
	        return strOut;
	    };
	};

	module.exports = VastMerger;


/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

	var _logger = __webpack_require__(3);
	var ImpbusCommunicator = __webpack_require__(17);
	try {
		var _molPlugin = __webpack_require__(33);	
	}
	catch(e) {}
	var _MarkersHandler = __webpack_require__(2);
	var _uaParser = __webpack_require__(9);
	var _UserSync = __webpack_require__(34);
	var _Utils = __webpack_require__(16);

	var _prefix = 'apnVmapVast->vastManager';

	var vastManager = function () {
		var _ua = _uaParser();
		var _impbusCommunicator;
		var _player;
		var _options;
		var _adPlaying = false;
		var _defaultAdCancelTimeout = 3000;	
	    var _savedMarkers;
	    var _markersHandler;
	    var _contentDuration = 0;
	    var _markerXml = {};
	    var _adIndicator;
	    var _userSyncUrl;
		var _mobilePrerollNeedClick = false;
		var _prerollNeedClickToPlay = false;

		var _cover = document.getElementById('apn-break-cover');

		var _playlist = [];
		var _playlistIdx = -1;
		var _playlistCreative;
		var _nextPlaylistItemFired = false;

		var _isMobile = _ua.device.type || _ua.device.model;
		var _isIos = _ua.os.name.toLowerCase() === 'ios';
		var _isIPhone = _isMobile && _ua.device.model.toLowerCase() === 'iphone';
	    
		function showCover(show) {
			_logger.log(_prefix, (show ? "Show" : "Hide") + " ad cover with spinner");
			if (show) {
	    		_cover.style.display = 'block';
	     		_player.el().classList.add('vjs-waiting');
			}
			else {
	    		_cover.style.display = 'none';
	    		_player.el().classList.remove('vjs-waiting');
			}
		}
		
		function resetContent() {
			showCover(false);
			setTimeout(function() {
				_adPlaying = false;
				if (_savedMarkers) {
			    	_player.markers.reset(JSON.parse(_savedMarkers));
				}
			}, 1000);
			_adIndicator.style.display = 'none';
			removeListeners();
			_Utils.showNextOverlay(true);
			_nextPlaylistItemFired = false;
			if (_playlistCreative && _playlist.length > 0) {
				_player.one('ended', function() {
					setTimeout(function() {
						if (!_nextPlaylistItemFired && _playlistCreative) {
							_player.playlist.next();
						}
					}, 500);
				});
			}
		}
		
		function convertStringToSeconds(strTime, callback) {
			if (!strTime || strTime === 'start') {
				return 0;
			}
			else if (strTime === 'end') {
				if (_contentDuration > 0) {
					return _contentDuration;
				}
				else {
					if (_player.duration() > 0) {
						_contentDuration = parseInt(_player.duration()) - 0.5;
						return _contentDuration;
					}
					_player.one("loadedmetadata",function() {
						_contentDuration = parseInt(_player.duration()) - 0.5;
						callback(_contentDuration);
					});
					return -1;
				}
			}
			else if (strTime.indexOf(':') > 0) {
				try {
					var hours = parseInt(strTime.substr(0, strTime.indexOf(':')));
					strTime = strTime.substr(3, strTime.length - 3);
					var minuts = parseInt(strTime.substr(0, strTime.indexOf(':')));
					strTime = strTime.substr(3, strTime.length - 3);
					var seconds;
					if (strTime.indexOf('.') > 0) {
						seconds = parseInt(strTime.substr(0, strTime.indexOf('.')));
						strTime = strTime.substr(3, strTime.length - 3);
						var mseconds = parseInt(strTime);
						if (mseconds >= 500) {
							seconds++;
						}
					}
					else {
						seconds = parseInt(strTime);
					}
					return hours * 3600 + minuts * 60 + seconds;
				}
				catch(e) {
					_logger.warn(_prefix, 'Failed to convert time to seconds');
					return 0;
				}
			}
			else if (strTime.indexOf('%') > 0) {
				var percents = parseInt(strTime.substr(0, strTime.indexOf('%')));
				if (_contentDuration > 0) {
					return parseInt(_contentDuration * percents / 100);
				}
				else {
					if (_player.duration() > 0) {
						_contentDuration = parseInt(_player.duration()) - 0.5;
						return parseInt(_contentDuration * percents / 100);
					}
					_player.one("loadedmetadata",function() {
						_contentDuration = parseInt(_player.duration()) - 0.5;
						callback(parseInt(_contentDuration * percents / 100));
					});
					return -1;
				}
			}
			else {
				_logger.warn(_prefix, 'Invalid time format: ' + strTime);
				return 0;
			}
		}
		
		function needPlayAdForPlaylistItem(plIdx) {
			if (_options.frequencyRules && _options.frequencyRules.playlistClips && _options.frequencyRules.playlistClips > 1) {
				var mod = plIdx % _options.frequencyRules.playlistClips;
				return mod === 0;
			}
			return true;
		}

		function nextListItemHandler() {
			_nextPlaylistItemFired = true;
			showCover(true);
			_playlistIdx++;
			if (_markersHandler && _player.markers && _player.markers.destroy) {
				_player.markers.destroy();
			}
			if (_playlistCreative) {
				if (needPlayAdForPlaylistItem(_player.playlist.currentIndex())) {
					play(_playlistCreative);
					_playlistCreative = null;
					return;
				}
				showCover(false);
				_player.playlist.autoadvance(0);
			}
			else {
				_impbusCommunicator.getXML(_options, _player, function(xml, errorCode, errorMessage) {
					_playlistCreative = xml;
					if (errorCode) {
						showCover(false);
						_player.playlist.autoadvance(0);
						_logger.error(_prefix, 'Error to get VAST xml for next playlist item. Eror code: ' + errorCode + ". Error message: " + errorMessage);
					}
					else {
						if (needPlayAdForPlaylistItem(_player.playlist.currentIndex())) {
							play(_playlistCreative);
							_playlistCreative = null;
						}
						else {
							showCover(false);
							_player.playlist.autoadvance(0);
						}
					}
				});
			}
		}

		function getXmlForNextPlaylistItem() {
			_playlist = (_player.playlist && typeof _player.playlist === 'function') ? _player.playlist() : [];
			if (!_playlist) {
				_playlist = [];
			}
			if (_playlist.length > 0 && _playlistIdx < _playlist.length) {
				if (!_playlistCreative) {
					_impbusCommunicator.getXML(_options, _player, function(xml) {
						_playlistCreative = xml;
					});
				}
			}
			else {
				_player.off('playlistitem', nextListItemHandler);
			}
		}

		function loadMetadataHandler() {
			_contentDuration = parseInt(_player.duration()) - 0.5;
	        _player.off("loadedmetadata",loadMetadataHandler);
			_logger.log(_prefix, 'loadedmetadata event, duration: ' + _contentDuration);
		}
		
		function setPlaybackMethodData() {
			if (!_options || !_options.apnTagParams) {
				return;
			}
			var initPlayback = "auto";
	    	if (_player.currentTime() === 0) {
	    		initPlayback = _player.autoplay() ? 'auto' : 'click';
	    	}
			var initAudio = _player.muted() ? 'off' : 'on';
			_options.initialPlayback = initPlayback;
			_options.initialAudio = initAudio;
		}
		
		function traceMessage(event) {
			_logger.log(_prefix, 'trace event message: ' + event.data.message);
			if (_options.pageNotificationCallback) {
				_options.pageNotificationCallback('message', event.data.message);
			}
		}
		
		function traceEvent(event) {
			_logger.log(_prefix, 'trace event: ' + event.data.event);
			if (_options.pageNotificationCallback) {
				_options.pageNotificationCallback('event', event.data.event);
			}
		}
		
	    function addListeners() {
		    _player.one("loadedmetadata",loadMetadataHandler);
		    
	    	_player.one('vast.adStart', function() {
				showCover(false);
				_adIndicator.style.display = 'block';
	    		_adPlaying = true;
	    		if (_userSyncUrl) {
	    			_UserSync.sharedInstance().run({userSyncTargetElement: _player.el_, usersync_url: _userSyncUrl});
	    		}
	    	});
	    	
	    	_player.on('vast.adError', resetContent);    	
	    	_player.on('vast.adsCancel', resetContent);    	
	    	_player.on('vast.adSkip', resetContent);    	
	    	_player.on('vast.reset', resetContent);    	
	    	_player.on('vast.contentEnd', resetContent);
	    	_player.on('adFinished', resetContent);

	    	_player.on('trace.message', traceMessage);
	    	_player.on('trace.event', traceEvent);
	    }
	    
	    function removeListeners() {
	    	_player.off('vast.adError', resetContent);    	
	    	_player.off('vast.adsCancel', resetContent);    	
	    	_player.off('vast.adSkip', resetContent);    	
	    	_player.off('vast.reset', resetContent);    	
	    	_player.off('vast.contentEnd', resetContent);
	    	_player.off('adFinished', resetContent);

	    	_player.off('trace.message', traceMessage);
	    	_player.off('trace.event', traceEvent);
	    }
		
		var playAd = function(xml) {
			if (_adPlaying) {
				// not interrupt playing ad
				return;
			}
			addListeners();
			setPlaybackMethodData();
			var needPauseAndPlay = !_isMobile || !_player.paused();
			if (needPauseAndPlay) {
				_player.pause();
			}
			_adPlaying = true;
			if (_markersHandler) {
				_savedMarkers = JSON.stringify(_player.markers.getMarkers());
			}
			var clientParams = {
				verbosity: 5,	// for debugging only
				// VAST xml
				adTagXML: function(callback) { 
					setTimeout(function() {
						callback(null, xml);
					}, 0);
				},
				playAdAlways: false,
				//Note: As requested we set the preroll timeout at the same place than the adsCancelTimeout
				adCancelTimeout: (_options && _options.timeouts && _options.timeouts.adStartTimeout) ? _options.timeouts.adStartTimeout : _defaultAdCancelTimeout,
				adsEnabled: true,
				initialPlayback: _options.initialPlayback,
				initialAudio: _options.initialAudio
			};
			if (_options && _options.skippable && _options.skippable.skipText) {
				clientParams.skipText = _options.skippable.skipText;
			}
			if (_options && _options.skippable && _options.skippable.skipButtonText) {
				clientParams.skipButtonText = _options.skippable.skipButtonText;
			}
			if (_options && _options.viewability) {
				_options.viewability.contextId = 'anoutstream';
				//_options.viewability.contextId = 'anbrighcoveplugin';
				clientParams.viewability = _options.viewability;
			}
			if (_options && _options.clickThruEnabled === false) {
				clientParams.disableClickThru = true;
			}
			if (_options && _options.skippable && _options.skippable.hasOwnProperty('enabled')) {
				clientParams.skippable = {};
				clientParams.skippable.enabled = _options.skippable.enabled;
				clientParams.skippable.videoThreshold = _options.skippable.videoThreshold * 1000;
				clientParams.skippable.videoOffset = _options.skippable.videoOffset * 1000;
			}
			if (_options && _options.wrapperLimit &&  _options.wrapperLimit > 0) {
				clientParams.wrapperLimit = _options.wrapperLimit;
			}
				
			_player.vastClient(clientParams);
			if (_options.initialPlayback !== 'click' || _mobilePrerollNeedClick) {
				if (!_prerollNeedClickToPlay) {
					setTimeout(function() {
						_player.play();
					}, 0);
				}
			}
			_Utils.showNextOverlay(false);
			getXmlForNextPlaylistItem();
		};

		function play(xml) {
			if (_options.timeOffset) {
				var timeMarkers = {
						markerStyle: {
							'width': '5px',
							'border-radius': '10%',
							'background-color': 'white'
						},
						markerTip: {
							display: false
						},
						onMarkerReached: function(marker) {
							if (_markerXml[marker.time]) {
								_mobilePrerollNeedClick = _isMobile && marker.time === 0;
								if (_mobilePrerollNeedClick && _player.playlist && typeof _player.playlist === 'function') {
									if (_player.playlist.currentIndex() > 0) {
										_mobilePrerollNeedClick = false;
									}
								}
								if (_mobilePrerollNeedClick) {
									_player.bigPlayButton.el_.style.opacity = 1;
									if (_isIos) {
										// iOS
										if (_isIPhone) {
											// iPhone
											_player.bigPlayButton.el_.style.display = 'block';
											showCover(false);
											_player.one('play', function() {
												playAd(_markerXml[marker.time]);
												delete _markerXml[marker.time];
											});
										}
										else {
											// iPad
											setTimeout(function() {
												showCover(false);
												_player.pause();
												_player.bigPlayButton.el_.style.display = 'block';
												_player.one('play', function() {
													playAd(_markerXml[marker.time]);
													delete _markerXml[marker.time];
												});
											}, 1000);
										}
									}
									else {
										// android
										showCover(false);
										_player.one('play', function() {
											playAd(_markerXml[marker.time]);
											delete _markerXml[marker.time];
										});
									}
								}
								else {
									_prerollNeedClickToPlay = false;
									if (marker.time === 0 && _player.paused()) {
										showCover(false);
										_prerollNeedClickToPlay = true;
										_player.bigPlayButton.el_.style.display = 'block';
										_player.bigPlayButton.el_.style.opacity = 1;
									}
									playAd(_markerXml[marker.time]);
									delete _markerXml[marker.time];
								}
							}
						},
						markers: []
					};
				  _markersHandler = new _MarkersHandler(videojs);
				var seconds = convertStringToSeconds(_options.timeOffset, function(seconds) {
					_markerXml[seconds] = xml;
					if (_markersHandler) {
						var markers = [];
						markers.push({time: seconds});
						if (_savedMarkers) {
							var temp = JSON.parse(_savedMarkers);
							temp = temp.concat(markers);
							_savedMarkers = JSON.stringify(temp);
						}
						else {
							_player.markers.add(markers);
						}
						if (seconds > 1) {
							showCover(false);
						}
					}
				});
				if (seconds >= 0) {
					timeMarkers.markers.push({time: seconds});
					_markerXml[seconds] = xml;
					if (seconds > 1) {
						showCover(false);
					}
				}
				_markersHandler.init(_player);
				_markersHandler.markers(timeMarkers);
			}
			else {	    		    
				// if there's already content loaded, request an add immediately
				if (_player.currentSrc() && _player.duration() > 0) {
					playAd(xml);
				}
				else {
					_player.one('loadeddata', function() {
						playAd(xml);
					});
				}
			}
		}
	    
		this.play = function (vjsPlayer, options) {
	    	_player = vjsPlayer;
	    	_options = options;
	    	
			// initialize graphics 
			if (!_cover) {
				_cover = document.createElement('div');
				_cover.id = 'apn-break-cover';
				_cover.style.width = '100%';
				_cover.style.height = '100%';
				_cover.style.backgroundColor = 'black';
				_cover.style.position = 'absolute';
				_cover.style.zIndex = 101;
				_player.el().appendChild(_cover);
			}
			_cover.style.display = 'none';

			_adIndicator = document.createElement('p');
			_adIndicator.className = 'vjs-overlay';
			_adIndicator.innerHTML = _options.adText ? _options.adText : "Ad";
			_adIndicator.style.display = 'none';
			_adIndicator.style.left = '10px';
			_player.el().appendChild(_adIndicator);

			if (_options && _options.usersyncUrl) {
				_userSyncUrl = _options.usersyncUrl;
			}
			if (isNaN(_player.duration()) || _player.duration() <= 0) {
				showCover(true);
			}
			_impbusCommunicator = new ImpbusCommunicator();
	    	_impbusCommunicator.getXML(_options, _player, function(xml, errorCode, errorMessage) {
	    		if (errorCode) {
					_logger.error(_prefix, 'Error to get VAST xml. Eror code: ' + errorCode + ". Error message: " + errorMessage);
					if (_isMobile) {
						setTimeout(function() {
							showCover(false);
							_player.bigPlayButton.el_.style.display = 'block';
							_player.one('play', function() {
								_player.bigPlayButton.el_.style.display = 'none';
							});
						}, 500);
					}
					else {
						showCover(false);
					}
				}
	    		else {
					if (_player.duration() > 0) {
						// main content passible playing
						play(xml);
					}
					else {
						showCover(true);
						if (_ua.device.type || _ua.device.model) {
							// mobile
							if (_player.autoplay() === true) {
								_player.autoplay('any');
							}
							_player.one("loadedmetadata",function() {
								play(xml);
							});
						}
						else {
							// desktop
							setTimeout(function() {
								if (_player.paused() && _player.bigPlayButton.el_.style.display !== 'block' && !_adPlaying) {
									showCover(false);
									_player.bigPlayButton.el_.style.display = 'block';
									_player.bigPlayButton.one('click', function() {
										_player.bigPlayButton.el_.style.display = 'none';
									});
								}	
							}, 1000);
							_player.one('playing', function() {
								if (_player.paused()) {
									showCover(false);
									_player.bigPlayButton.el_.style.display = 'block';
									_player.bigPlayButton.one('click', function() {
										_player.bigPlayButton.el_.style.display = 'none';
										play(xml);
									});
								}
								else {
									_player.bigPlayButton.el_.style.display = 'none';
									play(xml);
								}
							});
						}
					}
				}
				setTimeout(function() {
					_player.on('playlistitem', nextListItemHandler);
				}, 1000);
			});
		};
			
	    this.stop = function() {
	    	if (_adPlaying) {
	    		_player.trigger('vast.adsCancel');
	    	}
			if (_markersHandler) {
	  	  		_player.markers.destroy();
			}
	    };

	};

	module.exports = vastManager;


/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

	var require;var require;(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return require(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
	'use strict';

	var METHODS = [
	    'handshakeVersion',
	    'initAd',
	    'startAd',
	    'stopAd',
	    'skipAd', // VPAID 2.0 new method
	    'resizeAd',
	    'pauseAd',
	    'resumeAd',
	    'expandAd',
	    'collapseAd',
	    'subscribe',
	    'unsubscribe'
	];

	var EVENTS = [
	    'AdLoaded',
	    'AdStarted',
	    'AdStopped',
	    'AdSkipped',
	    'AdSkippableStateChange', // VPAID 2.0 new event
	    'AdSizeChange', // VPAID 2.0 new event
	    'AdLinearChange',
	    'AdDurationChange', // VPAID 2.0 new event
	    'AdExpandedChange',
	    'AdRemainingTimeChange', // [Deprecated in 2.0] but will be still fired for backwards compatibility
	    'AdVolumeChange',
	    'AdImpression',
	    'AdVideoStart',
	    'AdVideoFirstQuartile',
	    'AdVideoMidpoint',
	    'AdVideoThirdQuartile',
	    'AdVideoComplete',
	    'AdClickThru',
	    'AdInteraction', // VPAID 2.0 new event
	    'AdUserAcceptInvitation',
	    'AdUserMinimize',
	    'AdUserClose',
	    'AdPaused',
	    'AdPlaying',
	    'AdLog',
	    'AdError'
	];

	var GETTERS = [
	    'getAdLinear',
	    'getAdWidth', // VPAID 2.0 new getter
	    'getAdHeight', // VPAID 2.0 new getter
	    'getAdExpanded',
	    'getAdSkippableState', // VPAID 2.0 new getter
	    'getAdRemainingTime',
	    'getAdDuration', // VPAID 2.0 new getter
	    'getAdVolume',
	    'getAdCompanions', // VPAID 2.0 new getter
	    'getAdIcons' // VPAID 2.0 new getter
	];

	var SETTERS = [
	    'setAdVolume'
	];


	/**
	 * This callback is displayed as global member. The callback use nodejs error-first callback style
	 * @callback NodeStyleCallback
	 * @param {string|null}
	 * @param {undefined|object}
	 */


	/**
	 * IVPAIDAdUnit
	 *
	 * @class
	 *
	 * @param {object} creative
	 * @param {HTMLElement} el
	 * @param {HTMLVideoElement} video
	 */
	function IVPAIDAdUnit(creative, el, video) {}


	/**
	 * handshakeVersion
	 *
	 * @param {string} VPAIDVersion
	 * @param {nodeStyleCallback} callback
	 */
	IVPAIDAdUnit.prototype.handshakeVersion = function (VPAIDVersion, callback) {};

	/**
	 * initAd
	 *
	 * @param {number} width
	 * @param {number} height
	 * @param {string} viewMode can be 'normal', 'thumbnail' or 'fullscreen'
	 * @param {number} desiredBitrate indicates the desired bitrate in kbps
	 * @param {object} [creativeData] used for additional initialization data
	 * @param {object} [environmentVars] used for passing implementation-specific of js version
	 * @param {NodeStyleCallback} callback
	 */
	IVPAIDAdUnit.prototype.initAd = function(width, height, viewMode, desiredBitrate, creativeData, environmentVars, callback) {};

	/**
	 * startAd
	 *
	 * @param {nodeStyleCallback} callback
	 */
	IVPAIDAdUnit.prototype.startAd = function(callback) {};

	/**
	 * stopAd
	 *
	 * @param {nodeStyleCallback} callback
	 */
	IVPAIDAdUnit.prototype.stopAd = function(callback) {};

	/**
	 * skipAd
	 *
	 * @param {nodeStyleCallback} callback
	 */
	IVPAIDAdUnit.prototype.skipAd = function(callback) {};

	/**
	 * resizeAd
	 *
	 * @param {nodeStyleCallback} callback
	 */
	IVPAIDAdUnit.prototype.resizeAd = function(width, height, viewMode, callback) {};

	/**
	 * pauseAd
	 *
	 * @param {nodeStyleCallback} callback
	 */
	IVPAIDAdUnit.prototype.pauseAd = function(callback) {};

	/**
	 * resumeAd
	 *
	 * @param {nodeStyleCallback} callback
	 */
	IVPAIDAdUnit.prototype.resumeAd = function(callback) {};

	/**
	 * expandAd
	 *
	 * @param {nodeStyleCallback} callback
	 */
	IVPAIDAdUnit.prototype.expandAd = function(callback) {};

	/**
	 * collapseAd
	 *
	 * @param {nodeStyleCallback} callback
	 */
	IVPAIDAdUnit.prototype.collapseAd = function(callback) {};

	/**
	 * subscribe
	 *
	 * @param {string} event
	 * @param {nodeStyleCallback} handler
	 * @param {object} context
	 */
	IVPAIDAdUnit.prototype.subscribe = function(event, handler, context) {};

	/**
	 * startAd
	 *
	 * @param {string} event
	 * @param {function} handler
	 */
	IVPAIDAdUnit.prototype.unsubscribe = function(event, handler) {};



	/**
	 * getAdLinear
	 *
	 * @param {nodeStyleCallback} callback
	 */
	IVPAIDAdUnit.prototype.getAdLinear = function(callback) {};

	/**
	 * getAdWidth
	 *
	 * @param {nodeStyleCallback} callback
	 */
	IVPAIDAdUnit.prototype.getAdWidth = function(callback) {};

	/**
	 * getAdHeight
	 *
	 * @param {nodeStyleCallback} callback
	 */
	IVPAIDAdUnit.prototype.getAdHeight = function(callback) {};

	/**
	 * getAdExpanded
	 *
	 * @param {nodeStyleCallback} callback
	 */
	IVPAIDAdUnit.prototype.getAdExpanded = function(callback) {};

	/**
	 * getAdSkippableState
	 *
	 * @param {nodeStyleCallback} callback
	 */
	IVPAIDAdUnit.prototype.getAdSkippableState = function(callback) {};

	/**
	 * getAdRemainingTime
	 *
	 * @param {nodeStyleCallback} callback
	 */
	IVPAIDAdUnit.prototype.getAdRemainingTime = function(callback) {};

	/**
	 * getAdDuration
	 *
	 * @param {nodeStyleCallback} callback
	 */
	IVPAIDAdUnit.prototype.getAdDuration = function(callback) {};

	/**
	 * getAdVolume
	 *
	 * @param {nodeStyleCallback} callback
	 */
	IVPAIDAdUnit.prototype.getAdVolume = function(callback) {};

	/**
	 * getAdCompanions
	 *
	 * @param {nodeStyleCallback} callback
	 */
	IVPAIDAdUnit.prototype.getAdCompanions = function(callback) {};

	/**
	 * getAdIcons
	 *
	 * @param {nodeStyleCallback} callback
	 */
	IVPAIDAdUnit.prototype.getAdIcons = function(callback) {};

	/**
	 * setAdVolume
	 *
	 * @param {number} volume
	 * @param {nodeStyleCallback} callback
	 */
	IVPAIDAdUnit.prototype.setAdVolume = function(volume, callback) {};

	addStaticToInterface(IVPAIDAdUnit, 'METHODS', METHODS);
	addStaticToInterface(IVPAIDAdUnit, 'GETTERS', GETTERS);
	addStaticToInterface(IVPAIDAdUnit, 'SETTERS', SETTERS);
	addStaticToInterface(IVPAIDAdUnit, 'EVENTS',  EVENTS);


	var VPAID1_METHODS = METHODS.filter(function(method) {
	    return ['skipAd'].indexOf(method) === -1;
	});

	addStaticToInterface(IVPAIDAdUnit, 'checkVPAIDInterface', function checkVPAIDInterface (creative) {
	    var result = VPAID1_METHODS.every(function(key) {
	        return typeof creative[key] === 'function';
	    });
	    return result;
	});

	module.exports = IVPAIDAdUnit;

	function addStaticToInterface(Interface, name, value) {
	    Object.defineProperty(Interface, name, {
	        writable: false,
	        configurable: false,
	        value: value
	    });
	}


	},{}],2:[function(require,module,exports){
	'use strict';

	var IVPAIDAdUnit = require('./IVPAIDAdUnit');
	var Subscriber = require('./subscriber');
	var checkVPAIDInterface = IVPAIDAdUnit.checkVPAIDInterface;
	var utils = require('./utils');
	var METHODS = IVPAIDAdUnit.METHODS;
	var ERROR = 'AdError';
	var AD_CLICK = 'AdClickThru';
	var FILTERED_EVENTS = IVPAIDAdUnit.EVENTS.filter(function (event) {
	    return event != AD_CLICK;
	});

	/**
	 * This callback is displayed as global member. The callback use nodejs error-first callback style
	 * @callback NodeStyleCallback
	 * @param {string|null}
	 * @param {undefined|object}
	 */


	/**
	 * VPAIDAdUnit
	 * @class
	 *
	 * @param VPAIDCreative
	 * @param {HTMLElement} [el] this will be used in initAd environmentVars.slot if defined
	 * @param {HTMLVideoElement} [video] this will be used in initAd environmentVars.videoSlot if defined
	 */
	function VPAIDAdUnit(VPAIDCreative, el, video, iframe) {
	    this._isValid = checkVPAIDInterface(VPAIDCreative);
	    if (this._isValid) {
	        this._creative = VPAIDCreative;
	        this._el = el;
	        this._videoEl = video;
	        this._iframe = iframe;
	        this._subscribers = new Subscriber();
	        utils.setFullSizeStyle(el);
	        $addEventsSubscribers.call(this);
	    }
	}

	VPAIDAdUnit.prototype = Object.create(IVPAIDAdUnit.prototype);

	/**
	 * isValidVPAIDAd will return if the VPAIDCreative passed in constructor is valid or not
	 *
	 * @return {boolean}
	 */
	VPAIDAdUnit.prototype.isValidVPAIDAd = function isValidVPAIDAd() {
	    return this._isValid;
	};

	IVPAIDAdUnit.METHODS.forEach(function(method) {
	    //NOTE: this methods arguments order are implemented differently from the spec
	    var ignores = [
	        'subscribe',
	        'unsubscribe',
	        'initAd'
	    ];

	    if (ignores.indexOf(method) !== -1) return;

	    VPAIDAdUnit.prototype[method] = function () {
	        var ariaty = IVPAIDAdUnit.prototype[method].length;
	        // TODO avoid leaking arguments
	        // https://github.com/petkaantonov/bluebird/wiki/Optimization-killers#32-leaking-arguments
	        var args = Array.prototype.slice.call(arguments);
	        var callback = (ariaty === args.length) ? args.pop() : undefined;

	        setTimeout(function () {
	            var result, error = null;
	            try {
	                result = this._creative[method].apply(this._creative, args);
	            } catch(e) {
	                error = e;
	            }

	            callOrTriggerEvent(callback, this._subscribers, error, result);
	        }.bind(this), 0);
	    };
	});


	/**
	 * initAd concreate implementation
	 *
	 * @param {number} width
	 * @param {number} height
	 * @param {string} viewMode can be 'normal', 'thumbnail' or 'fullscreen'
	 * @param {number} desiredBitrate indicates the desired bitrate in kbps
	 * @param {object} [creativeData] used for additional initialization data
	 * @param {object} [environmentVars] used for passing implementation-specific of js version, if el & video was used in constructor slot & videoSlot will be added to the object
	 * @param {NodeStyleCallback} callback
	 */
	VPAIDAdUnit.prototype.initAd = function initAd(width, height, viewMode, desiredBitrate, creativeData, environmentVars, callback) {
	    creativeData = creativeData || {};
	    environmentVars = utils.extend({
	        slot: this._el,
	        videoSlot: this._videoEl
	    }, environmentVars || {});

	    setTimeout(function () {
	        var error;
	        try {
	            this._creative.initAd(width, height, viewMode, desiredBitrate, creativeData, environmentVars);
	        } catch (e) {
	            error = e;
	        }

	        callOrTriggerEvent(callback, this._subscribers, error);
	    }.bind(this), 0);
	};

	/**
	 * subscribe
	 *
	 * @param {string} event
	 * @param {nodeStyleCallback} handler
	 * @param {object} context
	 */
	VPAIDAdUnit.prototype.subscribe = function subscribe(event, handler, context) {
	    this._subscribers.subscribe(handler, event, context);
	};


	/**
	 * unsubscribe
	 *
	 * @param {string} event
	 * @param {nodeStyleCallback} handler
	 */
	VPAIDAdUnit.prototype.unsubscribe = function unsubscribe(event, handler) {
	    this._subscribers.unsubscribe(handler, event);
	};

	//alias
	VPAIDAdUnit.prototype.on = VPAIDAdUnit.prototype.subscribe;
	VPAIDAdUnit.prototype.off = VPAIDAdUnit.prototype.unsubscribe;

	IVPAIDAdUnit.GETTERS.forEach(function(getter) {
	    VPAIDAdUnit.prototype[getter] = function (callback) {
	        setTimeout(function () {

	            var result, error = null;
	            try {
	                result = this._creative[getter]();
	            } catch(e) {
	                error = e;
	            }

	            callOrTriggerEvent(callback, this._subscribers, error, result);
	        }.bind(this), 0);
	    };
	});

	/**
	 * setAdVolume
	 *
	 * @param volume
	 * @param {nodeStyleCallback} callback
	 */
	VPAIDAdUnit.prototype.setAdVolume = function setAdVolume(volume, callback) {
	    setTimeout(function () {

	        var result, error = null;
	        try {
	            this._creative.setAdVolume(volume);
	            result = this._creative.getAdVolume();
	        } catch(e) {
	            error = e;
	        }

	        if (!error) {
	            error = utils.validate(result === volume, 'failed to apply volume: ' + volume);
	        }
	        callOrTriggerEvent(callback, this._subscribers, error, result);
	    }.bind(this), 0);
	};

	VPAIDAdUnit.prototype._destroy = function destroy() {
	    this.stopAd();
	    this._subscribers.unsubscribeAll();
	};

	function $addEventsSubscribers() {
	    // some ads implement
	    // so they only handle one subscriber
	    // to handle this we create our one
	    FILTERED_EVENTS.forEach(function (event) {
	        this._creative.subscribe($trigger.bind(this, event), event);
	    }.bind(this));

	    // map the click event to be an object instead of depending of the order of the arguments
	    // and to be consistent with the flash
	    this._creative.subscribe($clickThruHook.bind(this), AD_CLICK);

	    // because we are adding the element inside the iframe
	    // the user is not able to click in the video
	    if (this._videoEl) {
	        var documentElement = this._iframe.contentDocument.documentElement;
	        var videoEl = this._videoEl;
	        documentElement.addEventListener('click', function(e) {
	            if (e.target === documentElement) {
	                videoEl.click();
	            }
	        });
	    }
	}

	function $clickThruHook(url, id, playerHandles) {
	    this._subscribers.triggerSync(AD_CLICK, {url: url, id: id, playerHandles: playerHandles});
	}

	function $trigger(event) {
	    // TODO avoid leaking arguments
	    // https://github.com/petkaantonov/bluebird/wiki/Optimization-killers#32-leaking-arguments
	    this._subscribers.trigger(event, Array.prototype.slice(arguments, 1));
	}

	function callOrTriggerEvent(callback, subscribers, error, result) {
	    if (callback) {
	        callback(error, result);
	    } else if (error) {
	        subscribers.trigger(ERROR, error);
	    }
	}

	module.exports = VPAIDAdUnit;


	},{"./IVPAIDAdUnit":1,"./subscriber":4,"./utils":5}],3:[function(require,module,exports){
	'use strict';

	var utils = require('./utils');
	var unique = utils.unique('vpaidIframe');
	var VPAIDAdUnit = require('./VPAIDAdUnit');

	var defaultTemplate = '<!DOCTYPE html>' +
	    '<html lang="en">' +
	    '<head><meta charset="UTF-8"></head>' +
	    '<body style="margin:0;padding:0"><div class="ad-element"></div>' +
	    '<script type="text/javascript" src="{{iframeURL_JS}}"><\/script>' +
	    '<script type="text/javascript">' +
	    'window.parent.postMessage(\'{"event": "ready", "id": "{{iframeID}}"}\', \'{{origin}}\');' +
	    '<\/script>' +
	    '</body>' +
	    '</html>';

	var AD_STOPPED = 'AdStopped';

	/**
	 * This callback is displayed as global member. The callback use nodejs error-first callback style
	 * @callback NodeStyleCallback
	 * @param {string|null}
	 * @param {undefined|object}
	 */

	/**
	 * VPAIDHTML5Client
	 * @class
	 *
	 * @param {HTMLElement} el that will contain the iframe to load adUnit and a el to add to adUnit slot
	 * @param {HTMLVideoElement} video default video element to be used by adUnit
	 * @param {object} [templateConfig] template: html template to be used instead of the default, extraOptions: to be used when rendering the template
	 * @param {object} [vpaidOptions] timeout: when loading adUnit
	 */
	function VPAIDHTML5Client(el, video, templateConfig, vpaidOptions) {
	    templateConfig = templateConfig || {};

	    this._id = unique();
	    this._destroyed = false;

	    this._frameContainer = utils.createElementInEl(el, 'div');
	    this._videoEl = video;
	    this._vpaidOptions = vpaidOptions || {timeout: 10000};

	    this._templateConfig = {
	        template: templateConfig.template || defaultTemplate,
	        extraOptions: templateConfig.extraOptions || {}
	    };
	}

	/**
	 * destroy
	 *
	 */
	VPAIDHTML5Client.prototype.destroy = function destroy() {
	    if (this._destroyed) {
	        return;
	    }
	    this._destroyed = true;
	    $unloadPreviousAdUnit.call(this);
	};

	/**
	 * isDestroyed
	 *
	 * @return {boolean}
	 */
	VPAIDHTML5Client.prototype.isDestroyed = function isDestroyed() {
	    return this._destroyed;
	};

	/**
	 * loadAdUnit
	 *
	 * @param {string} adURL url of the js of the adUnit
	 * @param {nodeStyleCallback} callback
	 */
	VPAIDHTML5Client.prototype.loadAdUnit = function loadAdUnit(adURL, callback) {
	    $throwIfDestroyed.call(this);
	    $unloadPreviousAdUnit.call(this);
	    var that = this;

	    var frame = utils.createIframeWithContent(
	        this._frameContainer,
	        this._templateConfig.template,
	        utils.extend({
	            iframeURL_JS: adURL,
	            iframeID: this.getID(),
	            origin: getOrigin()
	        }, this._templateConfig.extraOptions)
	    );

	    this._frame = frame;

	    this._onLoad = utils.callbackTimeout(
	        this._vpaidOptions.timeout,
	        onLoad.bind(this),
	        onTimeout.bind(this)
	    );

	    window.addEventListener('message', this._onLoad);

	    function onLoad (e) {
	        /*jshint validthis: false */
	        //don't clear timeout
	        if (e.origin !== getOrigin()) return;
	        var result = JSON.parse(e.data);

	        //don't clear timeout
	        if (result.id !== that.getID()) return;

	        var adUnit, error, createAd;
	        if (!that._frame.contentWindow) {

	            error = 'the iframe is not anymore in the DOM tree';

	        } else {
	            createAd = that._frame.contentWindow.getVPAIDAd;
	            error = utils.validate(typeof createAd === 'function', 'the ad didn\'t return a function to create an ad');
	        }

	        if (!error) {
	            var adEl = that._frame.contentWindow.document.querySelector('.ad-element');
	            adUnit = new VPAIDAdUnit(createAd(), adEl, that._videoEl, that._frame);
	            adUnit.subscribe(AD_STOPPED, $adDestroyed.bind(that));
	            error = utils.validate(adUnit.isValidVPAIDAd(), 'the add is not fully complaint with VPAID specification');
	        }

	        that._adUnit = adUnit;
	        $destroyLoadListener.call(that);
	        callback(error, error ? null : adUnit);

	        //clear timeout
	        return true;
	    }

	    function onTimeout() {
	        callback('timeout', null);
	    }
	};

	/**
	 * unloadAdUnit
	 *
	 */
	VPAIDHTML5Client.prototype.unloadAdUnit = function unloadAdUnit() {
	    $unloadPreviousAdUnit.call(this);
	};

	/**
	 * getID will return the unique id
	 *
	 * @return {string}
	 */
	VPAIDHTML5Client.prototype.getID = function () {
	    return this._id;
	};


	/**
	 * $removeEl
	 *
	 * @param {string} key
	 */
	function $removeEl(key) {
	    var el = this[key];
	    if (el) {
	        el.remove();
	        delete this[key];
	    }
	}

	function $adDestroyed() {
	    $removeAdElements.call(this);
	    delete this._adUnit;
	}

	function $unloadPreviousAdUnit() {
	    $removeAdElements.call(this);
	    $destroyAdUnit.call(this);
	}

	function $removeAdElements() {
	    $removeEl.call(this, '_frame');
	    $destroyLoadListener.call(this);
	}

	/**
	 * $destroyLoadListener
	 *
	 */
	function $destroyLoadListener() {
	    if (this._onLoad) {
	        window.removeEventListener('message', this._onLoad);
	        utils.clearCallbackTimeout(this._onLoad);
	        delete this._onLoad;
	    }
	}


	function $destroyAdUnit() {
	    if (this._adUnit) {
	        this._adUnit.stopAd();
	        delete this._adUnit;
	    }
	}

	/**
	 * $throwIfDestroyed
	 *
	 */
	function $throwIfDestroyed() {
	    if (this._destroyed) {
	        throw new Error ('VPAIDHTML5Client already destroyed!');
	    }
	}

	function getOrigin() {
	    if( window.location.origin ) {
	        return window.location.origin;
	    }
	    else {
	        return window.location.protocol + "//" +
	            window.location.hostname +
	            (window.location.port ? ':' + window.location.port: '');
	    }
	}

	module.exports = VPAIDHTML5Client;


	},{"./VPAIDAdUnit":2,"./utils":5}],4:[function(require,module,exports){
	'use strict';

	function Subscriber() {
	    this._subscribers = {};
	}

	Subscriber.prototype.subscribe = function subscribe(handler, eventName, context) {
	    if (!this.isHandlerAttached(handler, eventName)) {
	        this.get(eventName).push({handler: handler, context: context, eventName: eventName});
	    }
	};

	Subscriber.prototype.unsubscribe = function unsubscribe(handler, eventName) {
	    this._subscribers[eventName] = this.get(eventName).filter(function (subscriber) {
	        return handler !== subscriber.handler;
	    });
	};

	Subscriber.prototype.unsubscribeAll = function unsubscribeAll() {
	    this._subscribers = {};
	};

	Subscriber.prototype.trigger = function(eventName, data) {
	    var that = this;
	    var subscribers = this.get(eventName)
	        .concat(this.get('*'));

	    subscribers.forEach(function (subscriber) {
	        setTimeout(function () {
	            if (that.isHandlerAttached(subscriber.handler, subscriber.eventName)) {
	                subscriber.handler.call(subscriber.context, data);
	            }
	        }, 0);
	    });
	};

	Subscriber.prototype.triggerSync = function(eventName, data) {
	    var subscribers = this.get(eventName)
	        .concat(this.get('*'));

	    subscribers.forEach(function (subscriber) {
	        subscriber.handler.call(subscriber.context, data);
	    });
	};

	Subscriber.prototype.get = function get(eventName) {
	    if (!this._subscribers[eventName]) {
	        this._subscribers[eventName] = [];
	    }
	    return this._subscribers[eventName];
	};

	Subscriber.prototype.isHandlerAttached = function isHandlerAttached(handler, eventName) {
	    return this.get(eventName).some(function(subscriber) {
	        return handler === subscriber.handler;
	    })
	};

	module.exports = Subscriber;


	},{}],5:[function(require,module,exports){
	'use strict';

	/**
	 * noop a empty function
	 */
	function noop() {}

	/**
	 * validate if is not validate will return an Error with the message
	 *
	 * @param {boolean} isValid
	 * @param {string} message
	 */
	function validate(isValid, message) {
	    return isValid ? null : new Error(message);
	}

	var timeouts = {};
	/**
	 * clearCallbackTimeout
	 *
	 * @param {function} func handler to remove
	 */
	function clearCallbackTimeout(func) {
	    var timeout = timeouts[func];
	    if (timeout) {
	        clearTimeout(timeout);
	        delete timeouts[func];
	    }
	}

	/**
	 * callbackTimeout if the onSuccess is not called and returns true in the timelimit then onTimeout will be called
	 *
	 * @param {number} timer
	 * @param {function} onSuccess
	 * @param {function} onTimeout
	 */
	function callbackTimeout(timer, onSuccess, onTimeout) {
	    var callback, timeout;

	    timeout = setTimeout(function () {
	        onSuccess = noop;
	        delete timeout[callback];
	        onTimeout();
	    }, timer);

	    callback = function () {
	        // TODO avoid leaking arguments
	        // https://github.com/petkaantonov/bluebird/wiki/Optimization-killers#32-leaking-arguments
	        if (onSuccess.apply(this, arguments)) {
	            clearCallbackTimeout(callback);
	        }
	    };

	    timeouts[callback] = timeout;

	    return callback;
	}


	/**
	 * createElementInEl
	 *
	 * @param {HTMLElement} parent
	 * @param {string} tagName
	 * @param {string} id
	 */
	function createElementInEl(parent, tagName, id) {
	    var nEl = document.createElement(tagName);
	    if (id) nEl.id = id;
	    parent.appendChild(nEl);
	    return nEl;
	}

	/**
	 * createIframeWithContent
	 *
	 * @param {HTMLElement} parent
	 * @param {string} template simple template using {{var}}
	 * @param {object} data
	 */
	function createIframeWithContent(parent, template, data) {
	    var iframe = createIframe(parent, null, data.zIndex);
	    if (!setIframeContent(iframe, simpleTemplate(template, data))) return;
	    return iframe;
	}

	/**
	 * createIframe
	 *
	 * @param {HTMLElement} parent
	 * @param {string} url
	 */
	function createIframe(parent, url, zIndex) {
	    var nEl = document.createElement('iframe');
	    nEl.src = url || 'about:blank';
	    nEl.marginWidth = '0';
	    nEl.marginHeight = '0';
	    nEl.frameBorder = '0';
	    nEl.width = '100%';
	    nEl.height = '100%';
	    setFullSizeStyle(nEl);

	    if(zIndex){
	        nEl.style.zIndex = zIndex;
	    }

	    nEl.setAttribute('SCROLLING','NO');
	    parent.innerHTML = '';
	    parent.appendChild(nEl);
	    return nEl;
	}

	function setFullSizeStyle(element) {
	    element.style.position = 'absolute';
	    element.style.left = '0';
	    element.style.top = '0';
	    element.style.margin = '0px';
	    element.style.padding = '0px';
	    element.style.border = 'none';
	    element.style.width = '100%';
	    element.style.height = '100%';
	}

	/**
	 * simpleTemplate
	 *
	 * @param {string} template
	 * @param {object} data
	 */
	function simpleTemplate(template, data) {
	    Object.keys(data).forEach(function (key) {
	        var value = (typeof value === 'object') ? JSON.stringify(data[key]) : data[key];
	        template = template.replace(new RegExp('{{' + key + '}}', 'g'), value);
	    });
	    return template;
	}

	/**
	 * setIframeContent
	 *
	 * @param {HTMLIframeElement} iframeEl
	 * @param content
	 */
	function setIframeContent(iframeEl, content) {
	    var iframeDoc = iframeEl.contentWindow && iframeEl.contentWindow.document;
	    if (!iframeDoc) return false;

	    iframeDoc.write(content);

	    return true;
	}


	/**
	 * extend object with keys from another object
	 *
	 * @param {object} toExtend
	 * @param {object} fromSource
	 */
	function extend(toExtend, fromSource) {
	    Object.keys(fromSource).forEach(function(key) {
	        toExtend[key] = fromSource[key];
	    });
	    return toExtend;
	}


	/**
	 * unique will create a unique string everytime is called, sequentially and prefixed
	 *
	 * @param {string} prefix
	 */
	function unique(prefix) {
	    var count = -1;
	    return function () {
	        return prefix + '_' + (++count);
	    };
	}

	module.exports = {
	    noop: noop,
	    validate: validate,
	    clearCallbackTimeout: clearCallbackTimeout,
	    callbackTimeout: callbackTimeout,
	    createElementInEl: createElementInEl,
	    createIframeWithContent: createIframeWithContent,
	    createIframe: createIframe,
	    setFullSizeStyle: setFullSizeStyle,
	    simpleTemplate: simpleTemplate,
	    setIframeContent: setIframeContent,
	    extend: extend,
	    unique: unique
	};


	},{}],6:[function(require,module,exports){
	'use strict';

	/**
	 * Inner helper class that deals with the logic of the icon renderring.
	 *
	 * @param player {object} instance of the player that will play the ad.
	 *
	 * @constructor
	 */

	var VASTError = require('../vast/VASTError');

	var async = require('../../utils/async');
	var playerUtils = require('../../utils/playerUtils');
	var utilities = require('../../utils/utilityFunctions');

	function IconIntegrator(player) {
	  if (!(this instanceof IconIntegrator)) {
	    return new IconIntegrator(player);
	  }

	  this.player = player;
	  this.icons = [];
	  this.controlBarTimer = null;
	  this.cbHidden;
	}

	IconIntegrator.prototype.renderIcons = function renderIcons(icons, callback) {
	  var that = this;
	  callback = callback || utilities.noop;

	  if (!Array.isArray(icons) || icons.length === 0) {
	    return callback(new VASTError('On IconIntegrator, missing required icon array'));
	  }

	  async.waterfall([
	    function (next) {
	      next(null, icons);
	    },
	    this._createIcons.bind(this),
	    this._setupEvents.bind(this),
	    this._renderIcons.bind(this)
	  ], function (error, response) {
	    if (error && response) {
	      that._trackError(error, response);
	    }
	    callback(error, response);
	  });
	};

	IconIntegrator.prototype._createIcons = function createIcons(icons, callback) {
	  //var playerWidth = dom.getDimension(this.player.el()).width;
	  //var playerHeight = dom.getDimension(this.player.el()).height;
	  var that = this;

	  for (var i = 0; i < icons.length; i++) {
	    var iconObj = {};
	    iconObj.icon = icons[i];
	    // make sure we only one icon per program
	    var idx = getIconByProgram(iconObj.icon.program);
	    if (idx >= 0) {
	      this.icons.splice(idx, 1);
	    }
	    iconObj.content = getContent(iconObj.icon);
	    if (iconObj.content) {
	      this.icons.push(iconObj);
	    }
	  }

	  if (this.icons.length > 0) {
	    callback(null);
	  }
	  else {
	    callback(new VASTError("Could not create AdIcon content", 900));
	  }
	  return;

	  /*** Local Functions ***/
	  function getContent(icon) {
	    var content = null;
	    if (icon.staticResource) {
	      var imageTypes = ["image/gif", "image/jpeg", "image/png"];
	      if (imageTypes.indexOf(icon.creativeType)) {
	        content = "<img src='" + icon.staticResource + "' width='" + icon.width + "' height='" + icon.height + "'>";
	      }
	    }
	    /*else if (icon.htmlResource) {
	      // to do ...
	    }
	    else if (icon.iframeResource) {
	      // to do ...
	    }*/
	    return content;
	  }

	  function getIconByProgram(program) {
	    for (var i = 0; i < that.icons.length; i++) {
	      if (that.icons[i].icon.program === program) {
	        return i;
	      }
	    }
	    return -1;
	  }
	};

	IconIntegrator.prototype._setupEvents = function setupEvents(callback) {
	  var player = this.player;
	  var that = this;

	  playerUtils.once(player, ['vast.adEnd', 'vast.adsCancel', 'vast.adSkip', 'adStop'], function(){
	    if (that.icons.length > 0) {
	      if (that.controlBarTimer) {
	        clearInterval(that.controlBarTimer);
	        that.controlBarTimer = null;
	      }
	      for (var i = 0; i < that.icons.length; i++) {
	        var icon = that.icons[i];
	        if (icon.div) {
	          player.el().removeChild(icon.div);
	        }
	      }
	      that.icons = [];
	    }
	  });
	  
	  return callback(null);
	};

	IconIntegrator.prototype._renderIcons = function renderIcons() {
	  var player = this.player;
	  var that = this;

	  for (var i = 0; i < this.icons.length; i++) {
	    var icon = this.icons[i];

	    //position by offset
	    var xPosition = "left";//or right
	    var xPositionOffset = 0;
	    var yPosition = "top";//or bottom
	    var yPositionOffset = 0;
	    var topMargin = 0;
	    var bottomMargin = 0;   // maybe control bar height

	    if (icon && icon.icon.xPosition === "left") {
	        xPosition = "left";
	        xPositionOffset = 0;
	    }
	    if (icon && icon.icon.xPosition === "right") {
	        xPosition = "right";
	        xPositionOffset = 0;
	    }
	    if (icon && Number(icon.icon.xPosition) >= 0) {
	        xPosition = "left";
	        xPositionOffset = Number(icon.xPosition);
	    }
	    if (icon && icon.icon.yPosition === "bottom") {
	        yPosition = "bottom";
	        yPositionOffset = 0;
	        yPositionOffset = yPositionOffset + bottomMargin;
	    }
	    if (icon && icon.icon.yPosition === "top") {
	        yPosition = "top";
	        yPositionOffset = 0;
	        yPositionOffset = yPositionOffset + topMargin;
	    }
	    if (icon && Number(icon.icon.yPosition) >= 0) {
	        yPosition = "top";
	        yPositionOffset = Number(icon.icon.yPosition);
	        yPositionOffset = yPositionOffset + topMargin;
	    }

	    var displayIcon = player.el().ownerDocument.createElement('div');
	    player.el().appendChild(displayIcon);

	    displayIcon.setAttribute("name", "adicon");
	    displayIcon.id = "adicon_" + icon.icon.program;
	    displayIcon.innerHTML = icon.content;
	    displayIcon.style.position = "absolute";
	    displayIcon.style[xPosition] = xPositionOffset + "px";
	    displayIcon.style[yPosition] = yPositionOffset + "px";
	    displayIcon.style.zIndex = 2147483647; //top most of 32bit
	    displayIcon.style.display = "none";
	    icon.origY = yPositionOffset;
	  
	    //set width,height of div element 
	    displayIcon.style.width = icon.width + "px";
	    displayIcon.style.height = icon.height + "px";

	    icon.div = displayIcon;

	    if (icon.icon.iconClickThrough) {
	      icon.div.style.cursor = "pointer";
	      icon.div.addEventListener('click', handleClick(icon));
	    }

	    startIcon(icon, yPosition);
	  }

	  if (this.icons.length > 0) {
	    this.controlBarTimer = setInterval(function() {
	      var compStyle = window.getComputedStyle(that.player.controlBar.el(), null);
	      var cbHiddenCur = compStyle.backfaceVisibility === 'hidden' || compStyle.transform != 'none';
	      if (cbHiddenCur != that.cbHidden) {
	        that.cbHidden = cbHiddenCur;
	        var cbHeight = cbHiddenCur ? 0 : that.player.controlBar.el().offsetHeight;
	        for (var k = 0; k < that.icons.length; k++) {
	          var ic = that.icons[k];
	          if (ic.div && ic.div.style.display ==='block') {
	            if (cbHeight > 0) {
	              // control bar visible
	              if (elementsIntersected(ic.div, that.player.controlBar.el())) {
	                if (ic.div.style.top && ic.div.style.top.length > 0) {
	                  var yPos = ic.origY - cbHeight;
	                  if (yPos < 0) {
	                    yPos = 0;
	                  }
	                  ic.div.style.top = yPos + 'px';
	                }
	                else {
	                  ic.div.style.bottom = (ic.origY + cbHeight) + 'px';
	                }
	                adgustIconsPosition(ic, cbHeight, that, 1);                  
	              }
	            }
	            else {
	              if (ic.div.style.top && ic.div.style.top.length > 0) {
	                ic.div.style.top = ic.origY + 'px';
	              }
	              else {
	                ic.div.style.bottom = (ic.origY + cbHeight) + 'px';
	              }
	            }
	          }
	        }
	      }
	    }, utilities.isIE11() ? 100 : 500);
	  }

	  /**** local functions ******/
	  function adgustIconsPosition(ic, cbHeight, that, level) {
	    for (var i = 0; i < that.icons.length; i++) {
	      var icon = that.icons[i];
	      if (icon.div.style.display === 'block' && icon.div != ic.div) {
	        if (elementsIntersected(ic.div, icon.div)) {
	          if (icon.div.style.top && icon.div.style.top.length > 0) {
	            var yPos = icon.origY - cbHeight;
	            if (yPos < 0) {
	              yPos = 0;
	            }
	            icon.div.style.top = yPos + 'px';
	          }
	          else {
	            icon.div.style.bottom = (icon.origY + cbHeight) + 'px';
	          }
	          // protection against infinite recursive
	          level++;
	          if (level < 5) {
	            adgustIconsPosition(icon, cbHeight, that, level);    
	          }              
	        }
	      }
	    }
	  }

	  function elementsIntersected(div1, div2) {
	    var collide = function(el1, el2) {
	      var rect1 = el1.getBoundingClientRect();
	      var rect2 = el2.getBoundingClientRect();
	  
	      return !(
	        rect1.top > rect2.bottom ||
	        rect1.right < rect2.left ||
	        rect1.bottom < rect2.top ||
	        rect1.left > rect2.right
	      );
	    };
	    var inside = function(el1, el2) {
	      var rect1 = el1.getBoundingClientRect();
	      var rect2 = el2.getBoundingClientRect();
	  
	      return (
	        ((rect2.top <= rect1.top) && (rect1.top <= rect2.bottom)) &&
	        ((rect2.top <= rect1.bottom) && (rect1.bottom <= rect2.bottom)) &&
	        ((rect2.left <= rect1.left) && (rect1.left <= rect2.right)) &&
	        ((rect2.left <= rect1.right) && (rect1.right <= rect2.right))
	      );
	    };
	    return collide(div1, div2) || inside(div1, div2) || inside(div2, div1);
	  }

	  function trackUrls(urls) {
	    urls.forEach(function (src) {
	      var img = new Image();
	      img.src = src;
	    });
	  }

	  function handleClick(icon) {
	    return function() {
	      icon.div.removeEventListener('click', handleClick(icon));
	      trackUrls(icon.icon.iconClickTrackings);
	      player.pause();
	      window.open(icon.icon.iconClickThrough, '_blank');
	    };
	  }

	  function startIcon(icon, yPosition) {
	    var offset = icon.icon.offset && icon.icon.offset > 0 ? icon.icon.offset : 0;
	    setTimeout(function() {
	      icon.div.style.display = 'block';
	      trackUrls(icon.icon.iconViewTrackings);

	      for (var j = 0; j < that.icons.length; j++) {
	        if (that.icons[j].div && that.icons[j].div != icon.div) {
	          if (elementsIntersected(that.icons[j].div, icon.div)) {
	            var rect1 = that.icons[j].div.getBoundingClientRect();
	            if (yPosition === 'top') {
	              icon.div.style.top = (that.icons[j].div.offsetTop + that.icons[j].div.offsetHeight + 1) + "px";
	              icon.origY = that.icons[j].div.offsetTop + that.icons[j].div.offsetHeight + 1;
	            }
	            else {
	              var rect2 = that.player.el().getBoundingClientRect();
	              icon.div.style.bottom = (rect2.height + rect2.top - rect1.top + 1) + "px";
	              icon.origY = rect2.height + rect2.top - rect1.top + 1;
	            }
	          }
	        }
	      }
	  
	      if (icon.icon.duration && icon.icon.duration > 0) {
	        var duration = icon.icon.duration;
	        setTimeout(function() {
	          var idx = that.icons.indexOf(icon);
	          if (idx >= 0) {
	            player.el().removeChild(icon.div);
	            that.icons.splice(idx, 1);
	          }
	        }, duration);
	      }
	    }, offset);
	  }
	};

	module.exports = IconIntegrator;
	},{"../../utils/async":38,"../../utils/playerUtils":43,"../../utils/utilityFunctions":45,"../vast/VASTError":19}],7:[function(require,module,exports){
	'use strict';

	var InLine = require('./InLine');
	var Wrapper = require('./Wrapper');

	function Ad(adJTree) {
	  if (!(this instanceof Ad)) {
	    return new Ad(adJTree);
	  }
	  this.initialize(adJTree);
	}

	Ad.prototype.initialize = function(adJTree) {
	  this.id = adJTree.attr('id');
	  this.sequence = adJTree.attr('sequence');
	  if (window.mol_vastVersion === 4) {
		  this.conditionalAd = adJTree.attr('conditionalAd');
	  }

	  if(adJTree.inLine) {
	    this.inLine = new InLine(adJTree.inLine);
	  }

	  if(adJTree.wrapper){
	    this.wrapper = new Wrapper(adJTree.wrapper);
	  }
	};

	module.exports = Ad;
	},{"./InLine":12,"./Wrapper":26}],8:[function(require,module,exports){
	'use strict';

	var xml = require('../../utils/xml');
	var utilities = require('../../utils/utilityFunctions');

	function Category(categoryJTree) {
		  if(!(this instanceof Category)) {
		    return new Category(categoryJTree);
		  }

		  this.authority = categoryJTree.attr('authority');
		  this.category = xml.keyValue(categoryJTree);
	}

	Category.parseCategories = function parseCategoties(categoriesJTree) {
		  var categories = [];
		  var categoriesData;
		  if (categories) {
			  categoriesData = utilities.isArray(categoriesJTree) ? categoriesJTree : [categoriesJTree];
			  categoriesData.forEach(function (category) {
				  var cat = new Category(category);
				  if (cat.category && cat.category.length > 0 && cat.authority && cat.authority.length > 0) {
					  categories.push(new Category(category));
				  }
			  });
		  }
		  return categories;
	};

	module.exports = Category;

	},{"../../utils/utilityFunctions":45,"../../utils/xml":46}],9:[function(require,module,exports){
	'use strict';

	var TrackingEvent = require('./TrackingEvent');

	var utilities = require('../../utils/utilityFunctions');

	var xml = require('../../utils/xml');

	var logger = require ('../../utils/consoleLogger');


	function Companion(companionJTree) {
	  if (!(this instanceof Companion)) {
	    return new Companion(companionJTree);
	  }

	  logger.info ("<Companion> found companion ad");
	  logger.debug ("<Companion>  companionJTree:", companionJTree);

	  //Required Elements
	  this.creativeType = xml.attr(companionJTree.staticResource, 'creativeType');
	  this.staticResource = xml.keyValue(companionJTree.staticResource);

	  logger.info ("<Companion>  creativeType: " + this.creativeType);
	  logger.info ("<Companion>  staticResource: " + this.staticResource);

	  // Weird bug when the JXON tree is built it doesn't handle casing properly in this situation...
	  var htmlResource = null;
	  if (xml.keyValue(companionJTree.HTMLResource)) {
	    htmlResource = xml.keyValue(companionJTree.HTMLResource);
	  } else if (xml.keyValue(companionJTree.hTMLResource)) {
	    htmlResource = xml.keyValue(companionJTree.hTMLResource);
	  }

	  if (htmlResource !== null)
	  {
	    logger.info ("<Companion> found html resource", htmlResource);
	  }

	  this.htmlResource = htmlResource;

	  var iframeResource = null;
	  if (xml.keyValue(companionJTree.IFrameResource)) {
	    iframeResource = xml.keyValue(companionJTree.IFrameResource);
	  } else if (xml.keyValue(companionJTree.iFrameresource)) {
	    iframeResource = xml.keyValue(companionJTree.iFrameresource);
	  }

	  if (iframeResource !== null)
	  {
	    logger.info ("<Companion> found iframe resource", iframeResource);
	  }

	  this.iframeResource = iframeResource;

	  //Optional fields
	  this.id = xml.attr(companionJTree, 'id');
	  this.width = xml.attr(companionJTree, 'width');
	  this.height = xml.attr(companionJTree, 'height');
	  this.assetWidth = xml.attr(companionJTree, 'assetWidth');
	  this.assetHeight = xml.attr(companionJTree, 'assetHeight');
	  this.expandedWidth = xml.attr(companionJTree, 'expandedWidth');
	  this.expandedHeight = xml.attr(companionJTree, 'expandedHeight');
	  this.apiFramework = xml.attr(companionJTree, 'apiFramework');
	  this.adSlotID = xml.attr(companionJTree, 'adSlotID');
	  this.companionClickThrough = xml.keyValue(companionJTree.companionClickThrough);
	  this.trackingEvents = parseTrackingEvents(companionJTree.trackingEvents && companionJTree.trackingEvents.tracking);
	  
	  if (window.mol_vastVersion === 4) {
		  this.pxratio = xml.attr(companionJTree, 'pxratio');
	  }

	  logger.info ("<Companion>  companionClickThrough: " + this.companionClickThrough);


	  /*** Local functions ***/
	  function parseTrackingEvents(trackingEvents) {
	    var trackings = [];
	    if (utilities.isDefined(trackingEvents)) {
	      trackingEvents = utilities.isArray(trackingEvents) ? trackingEvents : [trackingEvents];
	      trackingEvents.forEach(function (trackingData) {
	        trackings.push(new TrackingEvent(trackingData));
	      });
	    }
	    return trackings;
	  }
	}

	module.exports = Companion;
	},{"../../utils/consoleLogger":39,"../../utils/utilityFunctions":45,"../../utils/xml":46,"./TrackingEvent":16}],10:[function(require,module,exports){
	'use strict';

	var Linear = require('./Linear');
	var Companion = require('./Companion');
	var UniversalAdId = require('./UniversalAdId');
	var utilities = require('../../utils/utilityFunctions');

	function Creative(creativeJTree) {
	  if(!(this instanceof Creative)) {
	    return new Creative(creativeJTree);
	  }

	  this.id = creativeJTree.attr('id');
	  this.sequence = creativeJTree.attr('sequence');
	  this.adId = creativeJTree.attr('adId');
	  this.apiFramework = creativeJTree.attr('apiFramework');

	  if(creativeJTree.linear) {
	    this.linear = new Linear(creativeJTree.linear);
	  }

	  if (creativeJTree.companionAds) {
	    var companions = [];
	    var companionAds = creativeJTree.companionAds && creativeJTree.companionAds.companion;
	    if (utilities.isDefined(companionAds)) {
	      companionAds = utilities.isArray(companionAds) ? companionAds : [companionAds];
	      companionAds.forEach(function (companionData) {
	        companions.push(new Companion(companionData));
	      });
	    }
	    this.companionAds = companions;
	  }

	  if (window.mol_vastVersion === 4) {
		  this.universalAdId = new UniversalAdId(creativeJTree.universalAdId);
	  }
	}

	/**
	 * Returns true if the browser supports at the creative.
	 */
	Creative.prototype.isSupported = function(){
	  if(this.linear) {
	    return this.linear.isSupported();
	  }

	  return true;
	};

	Creative.parseCreatives = function parseCreatives(creativesJTree) {
	  var creatives = [];
	  var creativesData;
	  if (utilities.isDefined(creativesJTree) && utilities.isDefined(creativesJTree.creative)) {
	    creativesData = utilities.isArray(creativesJTree.creative) ? creativesJTree.creative : [creativesJTree.creative];
	    creativesData.forEach(function (creative) {
	      creatives.push(new Creative(creative));
	    });
	  }
	  return creatives;
	};

	module.exports = Creative;

	},{"../../utils/utilityFunctions":45,"./Companion":9,"./Linear":14,"./UniversalAdId":17}],11:[function(require,module,exports){
	'use strict';

	var utilities = require('../../utils/utilityFunctions');
	var xml = require('../../utils/xml');
	var parsers = require('./parsers');

	//var vastUtil = require('./vastUtil');

	var attributesList = [
	  'program',
	  'width',
	  'height',
	  'xPosition',
	  'yPosition',
	  'duration',
	  'offset',
	  'apiFramework',
	  'pxratio'
	];

	function Icon(iconJTree) {
	  if (!(this instanceof Icon)) {
	    return new Icon(iconJTree);
	  }

	  //Attributes
	  for(var x=0; x<attributesList.length; x++) {
	    var attribute = attributesList[x];
	    this[attribute] = iconJTree.attr(attribute);
	  }
	  if (this.duration) {
	    this.duration = parsers.duration(this.duration);
	  }
	  if (this.offset) {
	    this.offset = parsers.duration(this.offset);
	  }

	  //Required Elements
	  this.creativeType = xml.attr(iconJTree.staticResource, 'creativeType');
	  this.staticResource = xml.keyValue(iconJTree.staticResource);

	  var htmlResource = null;
	  if (xml.keyValue(iconJTree.HTMLResource)) {
	    htmlResource = xml.keyValue(iconJTree.HTMLResource);
	  } else if (xml.keyValue(iconJTree.hTMLResource)) {
	    htmlResource = xml.keyValue(iconJTree.hTMLResource);
	  }

	  this.htmlResource = htmlResource;

	  var iframeResource = null;
	  if (xml.keyValue(iconJTree.IFrameResource)) {
	    iframeResource = xml.keyValue(iconJTree.IFrameResource);
	  } else if (xml.keyValue(iconJTree.iFrameresource)) {
	    iframeResource = xml.keyValue(iconJTree.iFrameresource);
	  }

	  this.iframeResource = iframeResource;

	  this.iconViewTrackings = parseTrackings(iconJTree.iconViewTracking);

	  if (iconJTree.iconClicks) {
	    this.iconClickThrough = xml.keyValue(iconJTree.iconClicks.iconClickThrough);
	    this.iconClickTrackings = parseTrackings(iconJTree.iconClicks.iconClickTracking);
	  }

	  // Local functions
	  function parseTrackings(trackings) {
	    if (trackings) {
	      trackings = utilities.isArray(trackings) ? trackings : [trackings];
	      return utilities.transformArray(trackings, function (trackings) {
	        if (utilities.isNotEmptyString(trackings.keyValue)) {
	          return trackings.keyValue;
	        }
	        return undefined;
	      });
	    }
	    return [];
	  }
	}

	module.exports = Icon;

	},{"../../utils/utilityFunctions":45,"../../utils/xml":46,"./parsers":27}],12:[function(require,module,exports){
	'use strict';

	var vastUtil = require('./vastUtil');
	var Creative = require('./Creative');
	var Category = require('./Category');
	var ViewableImpression = require('./ViewableImpression');
	var Verification = require('./Verification');

	var utilities = require('../../utils/utilityFunctions');
	var xml = require('../../utils/xml');

	function InLine(inlineJTree) {
	  if (!(this instanceof InLine)) {
	    return new InLine(inlineJTree);
	  }

	  //Required Fields
	  this.adTitle = xml.keyValue(inlineJTree.adTitle);
	  this.adSystem = xml.keyValue(inlineJTree.adSystem);
	  this.impressions = vastUtil.parseImpressions(inlineJTree.impression);
	  this.creatives = Creative.parseCreatives(inlineJTree.creatives);

	  //Optional Fields
	  this.description = xml.keyValue(inlineJTree.description);
	  this.advertiser = xml.keyValue(inlineJTree.advertiser);
	  this.surveys = parseSurveys(inlineJTree.survey);
	  //this.error = xml.keyValue(inlineJTree.error);
	  this.errors = vastUtil.parseErrors(inlineJTree.error);
	  this.pricing = xml.keyValue(inlineJTree.pricing);
	  this.extensions = inlineJTree.extensions;
	  if (this.extensions) {
		  this.moat = parseMoat(this.extensions);
	  }
	  if (window.mol_vastVersion === 4) {
		  if (inlineJTree.category) {
			  this.categories = Category.parseCategories(inlineJTree.category);
		  }
		  if (inlineJTree.viewableImpression) {
			  this.viewableImpression = new ViewableImpression(inlineJTree.viewableImpression);
		  }
		  if (inlineJTree.adVerifications) {
			  this.adVerifications = Verification.parseAdVerifications(inlineJTree.adVerifications);
		  }
	  }

	  /*** Local Functions ***/
	  function parseSurveys(inlineSurveys) {
	    if (inlineSurveys) {
	      return utilities.transformArray(utilities.isArray(inlineSurveys) ? inlineSurveys : [inlineSurveys], function (survey) {
	        if(utilities.isNotEmptyString(survey.keyValue)){
	          return {
	            uri: survey.keyValue,
	            type: survey.attr('type')
	          };
	        }

	        return undefined;
	      });
	    }
	    return [];
	  }

	  function parseMoat(extensions) {
		  var getMoatConfigData = function(arrExtentions) {
			  for (var i = 0; i < arrExtentions.length; i++) {
				  var extension = arrExtentions[i].extension;
				  if (extension && extension.moat) {
					  var moat = {};
					  var value = xml.keyValue(extension.moat);
					  var arr = value.split(';');
					  for (var j = 0; j < arr.length; j++) {
						  var params = arr[j].split('=');
						  if (params && params.length === 2) {
							  moat[params[0]] = params[1];
						  }
					  }
					  return moat;
				  }
			  }
			  return undefined;
		  };
		  if (extensions) {
			  return getMoatConfigData(utilities.isArray(extensions) ? extensions : [extensions]);
		  }
		  return undefined;
	  }
	}


	/**
	 * Returns true if the browser supports all the creatives.
	 */
	InLine.prototype.isSupported = function(){
	  var i,len;

	  if(this.creatives.length === 0) {
	    return false;
	  }

	  for(i = 0, len = this.creatives.length; i< len; i+=1){
	    if(!this.creatives[i].isSupported()){
	      return false;
	    }
	  }
	  return true;
	};

	module.exports = InLine;

	},{"../../utils/utilityFunctions":45,"../../utils/xml":46,"./Category":8,"./Creative":10,"./Verification":23,"./ViewableImpression":25,"./vastUtil":28}],13:[function(require,module,exports){
	'use strict';

	var xml = require('../../utils/xml');
	var utilities = require('../../utils/utilityFunctions');

	function InteractiveCreativeFile(interactiveCreativeFileJTree) {
	  if(!(this instanceof InteractiveCreativeFile)) {
	    return new InteractiveCreativeFile(interactiveCreativeFileJTree);
	  }

	  this.type = interactiveCreativeFileJTree.attr('type');
	  this.apiFramework = interactiveCreativeFileJTree.attr('apiFramework');
	  this.src = xml.keyValue(interactiveCreativeFileJTree);
	}

	InteractiveCreativeFile.parseInteractiveCreativeFiles = function parseInteractiveCreativeFiles(icfsJTree) {
	  var interactiveCreativeFiles = [];
	  var interactiveCreativeFilesData;
	  if (utilities.isDefined(icfsJTree)) {
		  interactiveCreativeFilesData = utilities.isArray(icfsJTree) ? icfsJTree : [icfsJTree];
		  interactiveCreativeFilesData.forEach(function (fileJTree) {
			  interactiveCreativeFiles.push(new InteractiveCreativeFile(fileJTree));
	    });
	  }
	  return interactiveCreativeFiles;
	};

	module.exports = InteractiveCreativeFile;

	},{"../../utils/utilityFunctions":45,"../../utils/xml":46}],14:[function(require,module,exports){
	'use strict';

	var TrackingEvent = require('./TrackingEvent');
	var MediaFile = require('./MediaFile');
	var VideoClicks = require('./VideoClicks');
	var InteractiveCreativeFile = require('./InteractiveCreativeFile');
	var Icon = require('./Icon');

	var utilities = require('../../utils/utilityFunctions');
	var parsers = require('./parsers');

	var xml = require('../../utils/xml');


	function Linear(linearJTree) {
	  if (!(this instanceof Linear)) {
	    return new Linear(linearJTree);
	  }

	  //Required Elements
	  this.duration = parsers.duration(xml.keyValue(linearJTree.duration));
	  this.mediaFiles = parseMediaFiles(linearJTree.mediaFiles && linearJTree.mediaFiles.mediaFile);

	  //Optional fields
	  this.trackingEvents = parseTrackingEvents(linearJTree.trackingEvents && linearJTree.trackingEvents.tracking, this.duration);
	  this.skipoffset = parsers.offset(xml.attr(linearJTree, 'skipoffset'), this.duration);
	  
	  // adjust skipoffset to publisher settings
	  if (this.duration && window._molSettings && window._molSettings.skippable) {
		  if (window._molSettings.skippable.enabled) {
			 if (this.duration >= window._molSettings.skippable.videoThreshold) {
				 this.skipoffset = window._molSettings.skippable.videoOffset;
			 }
			 else {
				 this.skipoffset = null; 
			 }
		  }
		  else {
			  this.skipoffset = null; 
		  }
	  }

	  if (linearJTree.videoClicks) {
	    this.videoClicks = new VideoClicks(linearJTree.videoClicks);
	  }

	  if(linearJTree.adParameters) {
	    this.adParameters = xml.keyValue(linearJTree.adParameters);

	    if(xml.attr(linearJTree.adParameters, 'xmlEncoded')) {
	      this.adParameters = xml.decode(this.adParameters);
	    }
	  }
	  
	  if (window.mol_vastVersion === 4) {
		  if (linearJTree.mediaFiles && linearJTree.mediaFiles.mezzanine) {
			  this.mezzanine = xml.keyValue(linearJTree.mediaFiles.mezzanine);
		  }
		  if (linearJTree.mediaFiles && linearJTree.mediaFiles.interactiveCreativeFile) {
			  this.interactiveCreativeFiles = InteractiveCreativeFile.parseInteractiveCreativeFiles(linearJTree.mediaFiles.interactiveCreativeFile);
		  }
	  }

	  if (linearJTree.icons) {
	    this.icons = parseIcons(linearJTree.icons && linearJTree.icons.icon);
	  }

	  /*** Local functions ***/
	  function parseTrackingEvents(trackingEvents, duration) {
	    var trackings = [];
	    if (utilities.isDefined(trackingEvents)) {
	      trackingEvents = utilities.isArray(trackingEvents) ? trackingEvents : [trackingEvents];
	      trackingEvents.forEach(function (trackingData) {
	        trackings.push(new TrackingEvent(trackingData, duration));
	      });
	    }
	    return trackings;
	  }

	  function parseMediaFiles(mediaFilesJxonTree) {
	    var mediaFiles = [];
	    if (utilities.isDefined(mediaFilesJxonTree)) {
	      mediaFilesJxonTree = utilities.isArray(mediaFilesJxonTree) ? mediaFilesJxonTree : [mediaFilesJxonTree];

	      mediaFilesJxonTree.forEach(function (mfData) {
	        mediaFiles.push(new MediaFile(mfData));
	      });
	    }
	    return mediaFiles;
	  }

	  function parseIcons(iconsJxonTree) {
	    var icons = [];
	    if (utilities.isDefined(iconsJxonTree)) {
	      iconsJxonTree = utilities.isArray(iconsJxonTree) ? iconsJxonTree : [iconsJxonTree];

	      iconsJxonTree.forEach(function (iconData) {
	        icons.push(new Icon(iconData));
	      });
	    }
	    return icons;
	  }
	}

	/**
	 * Must return true if at least one of the MediaFiles' type is supported
	 */
	Linear.prototype.isSupported = function () {
	  var i, len;
	  for(i=0, len=this.mediaFiles.length; i<len; i+=1) {
	    if(this.mediaFiles[i].isSupported()) {
	      return true;
	    }
	  }

	  return false;
	};

	module.exports = Linear;

	},{"../../utils/utilityFunctions":45,"../../utils/xml":46,"./Icon":11,"./InteractiveCreativeFile":13,"./MediaFile":15,"./TrackingEvent":16,"./VideoClicks":24,"./parsers":27}],15:[function(require,module,exports){
	'use strict';

	var xml = require('../../utils/xml');
	var vastUtil = require('./vastUtil');

	var attributesList = [
	  //Required attributes
	  'delivery',
	  'type',
	  'width',
	  'height',
	  //Optional attributes
	  'codec',
	  'id',
	  'bitrate',
	  'minBitrate',
	  'maxBitrate',
	  'scalable',
	  'maintainAspectRatio',
	  'apiFramework'
	];

	function MediaFile(mediaFileJTree) {
	  if (!(this instanceof MediaFile)) {
	    return new MediaFile(mediaFileJTree);
	  }

	  //Required attributes
	  this.src = xml.keyValue(mediaFileJTree);

	  for(var x=0; x<attributesList.length; x++) {
	    var attribute = attributesList[x];
	    this[attribute] = mediaFileJTree.attr(attribute);
	  }
	}

	MediaFile.prototype.isSupported = function(){
	  if(vastUtil.isVPAID(this)) {
	    return !!vastUtil.findSupportedVPAIDTech(this.type);
	  }

	  if (this.type === 'video/x-flv') {
	    return false;
	  }

	  return true;
	};

	module.exports = MediaFile;

	},{"../../utils/xml":46,"./vastUtil":28}],16:[function(require,module,exports){
	'use strict';

	var parsers = require('./parsers');

	var xml = require('../../utils/xml');

	function TrackingEvent(trackingJTree, duration) {
	  if (!(this instanceof TrackingEvent)) {
	    return new TrackingEvent(trackingJTree, duration);
	  }

	  this.name = trackingJTree.attr('event');
	  this.uri = xml.keyValue(trackingJTree);

	  if('progress' === this.name) {
	    this.offset = parsers.offset(trackingJTree.attr('offset'), duration);
	  }
	}

	module.exports = TrackingEvent;
	},{"../../utils/xml":46,"./parsers":27}],17:[function(require,module,exports){
	'use strict';

	function UniversalAdId(universalAdIdJTree) {
		  if(!(this instanceof UniversalAdId)) {
		    return new UniversalAdId(universalAdIdJTree);
		  }

		  this.idRegistry = universalAdIdJTree.attr('idRegistry');
		  this.idValue = universalAdIdJTree.attr('idValue');
	}

	module.exports = UniversalAdId;

	},{}],18:[function(require,module,exports){
	'use strict';

	var Ad = require('./Ad');
	var VASTError = require('./VASTError');
	var VASTResponse = require('./VASTResponse');
	var vastUtil = require('./vastUtil');

	var async = require('../../utils/async');
	var http = require('../../utils/http').http;
	var utilities = require('../../utils/utilityFunctions');
	var xml = require('../../utils/xml');

	var logger = require ('../../utils/consoleLogger');

	function VASTClient(options) {
	  if (!(this instanceof VASTClient)) {
	    return new VASTClient(options);
	  }
	  var defaultOptions = {
	    WRAPPER_LIMIT: options && options.wrapperLimit && options.wrapperLimit > 0 ? options.wrapperLimit : 5
	  };

	  options = options || {};
	  this.settings = utilities.extend({}, options, defaultOptions);
	  this.errorURLMacros = [];
	}

	VASTClient.prototype.getVASTResponse = function getVASTResponse(adTagUrl, callback) {
	  var that = this;

	  var error = sanityCheck(adTagUrl, callback);
	  if (error) {
	    if (utilities.isFunction(callback)) {
	      return callback(error);
	    }
	    throw error;
	  }

	  async.waterfall([
	      this._getVASTAd.bind(this, adTagUrl),
	      buildVASTResponse
	    ],
	    callback);

	  /*** Local functions ***/
	  function buildVASTResponse(adsChain, cb) {
	    try {
	      var response = that._buildVASTResponse(adsChain);
	      cb(null, response);
	    } catch (e) {
	      cb(e);
	    }
	  }

	  function sanityCheck(adTagUrl, cb) {
	    if (!adTagUrl) {
	      return new VASTError('on VASTClient.getVASTResponse, missing ad tag URL');
	    }

	    if (!utilities.isFunction(cb)) {
	      return new VASTError('on VASTClient.getVASTResponse, missing callback function');
	    }
	  }
	};

	VASTClient.prototype._getVASTAd = function (adTagUrl, callback) {
	  var that = this;

	  getAdWaterfall(adTagUrl, function (error, vastTree) {
	    var waterfallAds = vastTree && utilities.isArray(vastTree.ads) ? vastTree.ads : null;
	    if (error) {
	      that._trackError(error, waterfallAds);
	      return callback(error, waterfallAds);
	    }
	    getAd(waterfallAds.shift(), [], waterfallHandler);

	    /*** Local functions ***/
	    function waterfallHandler(error, adChain) {
	      if (error) {
	        that._trackError(error, adChain);
	        if (waterfallAds.length > 0) {
	          getAd(waterfallAds.shift(),[], waterfallHandler);
	        } else {
	          callback(error, adChain);
	        }
	      } else {
	        callback(null, adChain);
	      }
	    }
	  });

	  /*** Local functions ***/
	  function getAdWaterfall(adTagUrl, callback) {
	    var requestVastXML = that._requestVASTXml.bind(that, adTagUrl);
	    async.waterfall([
	      requestVastXML,
	      buildVastWaterfall
	    ], callback);
	  }

	  function buildVastWaterfall(xmlStr, callback) {
	    var vastTree;
	    try {
	      vastTree = xml.toJXONTree(xmlStr);
	      logger.debug ("built JXONTree from VAST response:", vastTree);

	      if(utilities.isArray(vastTree.ad)) {
	        vastTree.ads = vastTree.ad;
	      } else if(vastTree.ad){
	        vastTree.ads = [vastTree.ad];
	      } else {
	        vastTree.ads = [];
	      }
	      callback(validateVASTTree(vastTree), vastTree);

	    } catch (e) {
	      callback(new VASTError("on VASTClient.getVASTAd.buildVastWaterfall, error parsing xml", 100), null);
	    }
	  }

	  function validateVASTTree(vastTree) {
	    var vastVersion = xml.attr(vastTree, 'version');

	    if (!vastTree.ad) {
	      return new VASTError('on VASTClient.getVASTAd.validateVASTTree, no Ad in VAST tree', 303);
	    }

	    //if (vastVersion && (vastVersion != 3 && vastVersion != 2)) {
	    if (vastVersion && (vastVersion != 3 && vastVersion != 2 && vastVersion != 4)) {
	      return new VASTError('on VASTClient.getVASTAd.validateVASTTree, not supported VAST version "' + vastVersion + '"', 102);
	    }
	    window.mol_vastVersion = vastVersion;

	    return null;
	  }

	  function getAd(adTagUrl, adChain, callback) {
	    if (adChain.length >= that.settings.WRAPPER_LIMIT) {
	      return callback(new VASTError("on VASTClient.getVASTAd.getAd, players wrapper limit reached (the limit is " + 
	        that.settings.WRAPPER_LIMIT + ")", 302), adChain);
	    }

	    async.waterfall([
	      function (next) {
	        if (utilities.isString(adTagUrl)) {
	          requestVASTAd(adTagUrl, next);
	        } else {
	          next(null, adTagUrl);
	        }
	      },
	      buildAd
	    ], function (error, ad) {
	      if (ad) {
	        adChain.push(ad);
	      }

	      if (error) {
	        return callback(error, adChain);
	      }

	      if (ad.wrapper) {
	        return getAd(ad.wrapper.VASTAdTagURI, adChain, callback);
	      }

	      return callback(null, adChain);
	    });
	  }

	  function buildAd(adJxonTree, callback) {
	    try {
	      var ad = new Ad(adJxonTree);
	      callback(validateAd(ad), ad);
	    } catch (e) {
	      callback(new VASTError('on VASTClient.getVASTAd.buildAd, error parsing xml', 100), null);
	    }
	  }

	  function validateAd(ad) {
	    var wrapper = ad.wrapper;
	    var inLine = ad.inLine;
	    var errMsgPrefix = 'on VASTClient.getVASTAd.validateAd, ';

	    if (inLine && wrapper) {
	      return new VASTError(errMsgPrefix +"InLine and Wrapper both found on the same Ad", 101);
	    }

	    if (!inLine && !wrapper) {
	      return new VASTError(errMsgPrefix + "nor wrapper nor inline elements found on the Ad", 101);
	    }

	    if (inLine && !inLine.isSupported()) {
	      return new VASTError(errMsgPrefix + "could not find MediaFile that is supported by this video player", 403);
	    }

	    if (wrapper && !wrapper.VASTAdTagURI) {
	      return new VASTError(errMsgPrefix + "missing 'VASTAdTagURI' in wrapper", 101);
	    }

	    return null;
	  }

	  function requestVASTAd(adTagUrl, callback) {
	    that._requestVASTXml(adTagUrl, function (error, xmlStr) {
	      if (error) {
	        return callback(error);
	      }
	      try {
	        var vastTree = xml.toJXONTree(xmlStr);
	        callback(validateVASTTree(vastTree), vastTree.ad);
	      } catch (e) {
	        callback(new VASTError("on VASTClient.getVASTAd.requestVASTAd, error parsing xml", 100));
	      }
	    });
	  }
	};

	VASTClient.prototype._requestVASTXml = function requestVASTXml(adTagUrl, callback) {
	  try {
	    if (utilities.isFunction(adTagUrl)) {
	      adTagUrl(requestHandler);
	    } else {
	      logger.info ("requesting adTagUrl: " + adTagUrl);
	      http.get(adTagUrl, requestHandler, {
	        withCredentials: true
	      });
	    }
	  } catch (e) {
	    callback(e);
	  }

	  /*** Local functions ***/
	  function requestHandler(error, response, status) {
	    if (error) {
	      var errMsg = utilities.isDefined(status) ?
	      "on VASTClient.requestVastXML, HTTP request error with status '" + status + "'" :
	        "on VASTClient.requestVastXML, Error getting the the VAST XML with he passed adTagXML fn";
	      return callback(new VASTError(errMsg, 301), null);
	    }

	    callback(null, response);
	  }
	};

	VASTClient.prototype._buildVASTResponse = function buildVASTResponse(adsChain) {
	  var response = new VASTResponse();
	  addAdsToResponse(response, adsChain);
	  validateResponse(response);

	  return response;

	  //*** Local function ****
	  function addAdsToResponse(response, ads) {
	    ads.forEach(function (ad) {
	      response.addAd(ad);
	    });
	  }

	  function validateResponse(response) {
	    var progressEvents = response.trackingEvents.progress;

	    if (!response.hasLinear()) {
	      throw new VASTError("on VASTClient._buildVASTResponse, Received an Ad type that is not supported", 200);
	    }

	    if (response.duration === undefined) {
	      throw new VASTError("on VASTClient._buildVASTResponse, Missing duration field in VAST response", 101);
	    }

	    if (progressEvents) {
	      progressEvents.forEach(function (progressEvent) {
	        if (!utilities.isNumber(progressEvent.offset)) {
	          throw new VASTError("on VASTClient._buildVASTResponse, missing or wrong offset attribute on progress tracking event", 101);
	        }
	      });
	    }
	  }
	};

	VASTClient.prototype._trackError = function (error, adChain) {
	  if (!utilities.isArray(adChain) || adChain.length === 0) { //There is nothing to track
	    return;
	  }

	  var errorURLMacros = [];
	  adChain.forEach(addErrorUrlMacros);
	  vastUtil.track(errorURLMacros, {ERRORCODE: error.code || 900});  //900 <== Undefined error

	  /*** Local functions  ***/
	  function addErrorUrlMacros(ad) {
	    /*if (ad.wrapper && ad.wrapper.error && typeof(ad.wrapper.error) === 'string') {
	        errorURLMacros.push(ad.wrapper.error);
	    }

	    if (ad.inLine && ad.inLine.error && typeof(ad.inLine.error) === 'string') {
	    	errorURLMacros.push(ad.inLine.error);
	    }*/
		  
	      if (ad.wrapper && ad.wrapper.errors && Array.isArray(ad.wrapper.errors)) {
	    	  errorURLMacros = errorURLMacros.concat(ad.wrapper.errors);
	      }

	      if (ad.inLine && ad.inLine.errors && Array.isArray(ad.inLine.errors)) {
	    	  errorURLMacros = errorURLMacros.concat(ad.inLine.errors);
	      }
	  }
	};

	module.exports = VASTClient;

	},{"../../utils/async":38,"../../utils/consoleLogger":39,"../../utils/http":41,"../../utils/utilityFunctions":45,"../../utils/xml":46,"./Ad":7,"./VASTError":19,"./VASTResponse":21,"./vastUtil":28}],19:[function(require,module,exports){
	'use strict';

	function VASTError(message, code) {
	  this.message = 'VAST Error: ' + (message || '');
	  if (code) {
	    this.code = code;
	  }
	}

	VASTError.prototype = new Error();
	VASTError.prototype.name = "VAST Error";

	module.exports = VASTError;
	},{}],20:[function(require,module,exports){
	'use strict';

	/**
	 * Inner helper class that deals with the logic of the individual steps needed to setup an ad in the player.
	 *
	 * @param player {object} instance of the player that will play the ad. It assumes that the videojs-contrib-ads plugin
	 *                        has been initialized when you use its utility functions.
	 *
	 * @constructor
	 */

	var VASTResponse = require('./VASTResponse');
	var VASTError = require('./VASTError');
	var VASTTracker = require('./VASTTracker');
	var vastUtil = require('./vastUtil');

	var async = require('../../utils/async');
	var dom = require('../../utils/dom');
	var playerUtils = require('../../utils/playerUtils');
	var utilities = require('../../utils/utilityFunctions');

	var logger = require ('../../utils/consoleLogger');

	function VASTIntegrator(player) {
	  if (!(this instanceof VASTIntegrator)) {
	    return new VASTIntegrator(player);
	  }

	  this.player = player;
	  this.enableFullscreenClickIFrame = false;
	}

	VASTIntegrator.prototype.playAd = function playAd(vastResponse, callback) {
	  var that = this;
	  callback = callback || utilities.noop;

	  if (!(vastResponse instanceof VASTResponse)) {
	    return callback(new VASTError('On VASTIntegrator, missing required VASTResponse'));
	  }

	  async.waterfall([
	    function (next) {
	      next(null, vastResponse);
	    },
	    this._selectAdSource.bind(this),
	    this._createVASTTracker.bind(this),
	    this._addClickThrough.bind(this),
	    this._addClickThroughDivBlocker.bind(this),
	    this._addSkipButton.bind(this),
	    this._setupEvents.bind(this),
	    this._playSelectedAd.bind(this)
	  ], function (error, response) {
	    if (error && response) {
	        if (window.MoatApiReference) {
	        	window.MoatApiReference.dispatchEvent({type: 'AdError', adVolume: that.player.volume()});
	        }
	      that._trackError(error, response);
	    }
	    callback(error, response);
	  });

	  this._adUnit = {
	    _src: null,
	    type: 'VAST',
	    pauseAd: function () {
	      that.player.pause(true);
	    },

	    resumeAd: function () {
	      that.player.play(true);
	    },

	    isPaused: function () {
	      return that.player.paused(true);
	    },

	    getSrc: function () {
	      return this._src;
	    }
	  };

	  return this._adUnit;
	};

	VASTIntegrator.prototype._selectAdSource = function selectAdSource(response, callback) {
	  var source;

	  var playerWidth = dom.getDimension(this.player.el()).width;
	  response.mediaFiles.sort(function compareTo(a, b) {
	    var deltaA = Math.abs(playerWidth - a.width);
	    var deltaB = Math.abs(playerWidth - b.width);
	    return deltaA - deltaB;
	  });

	  source = this.player.selectSource(response.mediaFiles).source;
	  if (source) {
	    this.player.trigger({type: 'trace.message', data: {message: 'Playing ' + source.src + ' (type = ' + source.type + ')'}});
	  }
	  
	  if (source) {
	    logger.info ("selected source: ", source);
	    if (this._adUnit) {
	      this._adUnit._src = source;
	    }
	    return callback(null, source, response);
	  }

	  // code 403 <== Couldn't find MediaFile that is supported by this video player
	  callback(new VASTError("Could not find Ad mediafile supported by this player", 403), response);
	};

	VASTIntegrator.prototype._createVASTTracker = function createVASTTracker(adMediaFile, response, callback) {
	  try {
	    callback(null, adMediaFile, new VASTTracker(adMediaFile.src, response), response);
	  } catch (e) {
	    callback(e, response);
	  }
	};

	VASTIntegrator.prototype._setupEvents = function setupEvents(adMediaFile, tracker, response, callback) {
	  var previouslyMuted;
	  var player = this.player;
	  player.on('fullscreenchange', trackFullscreenChange);
	  player.on('vast.adStart', trackImpressions);
	  player.on('pause', trackPause);
	  player.on('timeupdate', trackProgress);
	  player.on('volumechange', trackVolumeChange);

	  playerUtils.once(player, ['vast.adEnd', 'vast.adsCancel'], unbindEvents);
	  playerUtils.once(player, ['vast.adEnd', 'vast.adsCancel', 'vast.adSkip'], function(evt){
	    if(evt.type === 'vast.adEnd'){
	      tracker.trackComplete();
	    }
	    if (window.MoatApiReference) {
	    	var type = evt.type === 'vast.adEnd' ? 'AdVideoComplete' : 'AdStopped';
	  	  window.MoatApiReference.dispatchEvent({type: type, adVolume: player.volume()});
	    }
	  });
	  
	  player.one('adStop', function() {
		 player.trigger('vast.adsCancel'); 
	  });

	  return callback(null, adMediaFile, response);

	  /*** Local Functions ***/
	  function unbindEvents() {
	    player.off('fullscreenchange', trackFullscreenChange);
	    player.off('vast.adStart', trackImpressions);
	    player.off('pause', trackPause);
	    player.off('timeupdate', trackProgress);
	    player.off('volumechange', trackVolumeChange);
	  }

	  function trackFullscreenChange() {
	    if (player.isFullscreen()) {
	      tracker.trackFullscreen();
	    } else {
	      tracker.trackExitFullscreen();
	    }
	  }

	  function trackPause() {
	    //NOTE: whenever a video ends the video Element triggers a 'pause' event before the 'ended' event.
	    //      We should not track this pause event because it makes the VAST tracking confusing again we use a
	    //      Threshold of 2 seconds to prevent false positives on IOS.
			if (window._molSettings.breakDuration) {
				if (window._molSettings.realVideoDuration) {
				    if (Math.abs(window._molSettings.realVideoDuration - player.currentTime()) < 2) {
				        return;
				    }
				}
			}
			else if (Math.abs(player.duration() - player.currentTime()) < 2) {
		      return;
		    }

	    if (window.MoatApiReference) {
	    	  window.MoatApiReference.dispatchEvent({type: 'AdPaused', adVolume: player.volume()});
	    }
	    tracker.trackPause();
	    playerUtils.showBigPlayButton(player, true);
	    playerUtils.once(player, ['play', 'vast.adEnd', 'vast.adsCancel'], function (evt) {
	      if(evt.type === 'play'){
		    if (window.MoatApiReference) {
		    	  window.MoatApiReference.dispatchEvent({type: 'AdPlaying', adVolume: player.volume()});
		    }
	        tracker.trackResume();
	        playerUtils.showBigPlayButton(player, false);
	      }
	    });
	  }

	  function trackProgress() {
	    var currentTimeInMs = player.currentTime() * 1000;
	    tracker.trackProgress(currentTimeInMs);
	  }

	  function trackImpressions() {
	    if (window.MoatApiReference) {
	    	  window.MoatApiReference.dispatchEvent({type: 'AdImpression', adVolume: player.volume()});
	    }
	    tracker.trackImpressions();
	    tracker.trackCreativeView();
	  }

	  function trackVolumeChange() {
	    if (window.MoatApiReference) {
	  	  window.MoatApiReference.dispatchEvent({type: 'AdVolumeChange', adVolume: player.volume()});
	    }
	    var muted = player.muted();
	    if (muted) {
	      tracker.trackMute();
	    } else if (previouslyMuted) {
	      tracker.trackUnmute();
	    }
	    previouslyMuted = muted;
	  }
	};

	VASTIntegrator.prototype._addSkipButton = function addSkipButton(source, tracker, response, callback) {
	  var skipOffsetInSec;
	  var that = this;

	  if (utilities.isNumber(response.skipoffset)) {
	    skipOffsetInSec = response.skipoffset / 1000;
	    addSkipButtonToPlayer(this.player, skipOffsetInSec);
	  }
	  callback(null, source, tracker, response);

	  /*** Local function ***/
	  function addSkipButtonToPlayer(player, skipOffset) {
	    var skipButton = createSkipButton(player);
	    var updateSkipButton = updateSkipButtonState.bind(that, skipButton, skipOffset, player);

	    player.el().appendChild(skipButton);
	    player.on('timeupdate', updateSkipButton);

	    playerUtils.once(player, ['vast.adEnd', 'vast.adsCancel'], removeSkipButton);

	    function removeSkipButton() {
	      player.off('timeupdate', updateSkipButton);
	      dom.remove(skipButton);
	    }
	  }

	  function createSkipButton(player) {
	    var skipButton = window.document.createElement("div");
	    dom.addClass(skipButton, "vast-skip-button");
	    skipButton.id = 'adSkipButton';

	    skipButton.onclick = function (e) {
	      if (dom.hasClass(skipButton, 'enabled')) {
	          if (window.MoatApiReference) {
	        	  window.MoatApiReference.dispatchEvent({type: 'AdSkipped', adVolume: player.volume()});
	          }
	        tracker.trackSkip();
	        player.trigger('vast.adSkip');
	      }
	      playerUtils.showBigPlayButton(player, false);

	      //We prevent event propagation to avoid problems with the clickThrough and so on
	      if (window.Event.prototype.stopPropagation !== undefined) {
	        e.stopPropagation();
	      } else {
	        return false;
	      }
	    };

	    return skipButton;
	  }

	  function updateSkipButtonState(skipButton, skipOffset, player) {
	    var timeLeft = Math.ceil(skipOffset - player.currentTime());
	    if (timeLeft > 0) {
	        //skipButton.innerHTML = "Skip in " + utilities.toFixedDigits(timeLeft, 2) + "...";
	        skipButton.innerHTML = '<p class="vast-skip-button-text">' + window._molSettings.skipText.replace('%%TIME%%', utilities.toFixedDigits(timeLeft, 2)) + '</p>';
	    } else {
	      if (!dom.hasClass(skipButton, 'enabled')) {
	        dom.addClass(skipButton, 'enabled');
	        //skipButton.innerHTML = "Skip ad";
	        skipButton.innerHTML = window._molSettings.skipButtonText;
	      }
	    }
	    var iframeBackButton = window.document.getElementById('iframeBackButton');
	    if (!iframeBackButton) {
	        skipButton.style.display = 'block';
	    }
	  }
	};

	VASTIntegrator.prototype._addClickThrough = function addClickThrough(mediaFile, tracker, response, callback) {
	  var enableFullscreenClickIFrame = this.enableFullscreenClickIFrame;
	  
	  var player = this.player;
	  var blocker = createClickThroughBlocker(player, tracker, response);
	  var updateBlocker = updateBlockerURL.bind(this, blocker, response, player);

	  player.el().insertBefore(blocker, player.controlBar.el());
	  player.on('timeupdate', updateBlocker);
	  playerUtils.once(player, ['vast.adEnd', 'vast.adsCancel'], removeBlocker);
	  
	  if (enableFullscreenClickIFrame) {
		  player.on('fullscreenchange', updateDisplayStyle);
	  }

	  return callback(null, mediaFile, tracker, response);

	  /*** Local Functions ***/

	  function createClickThroughBlocker(player, tracker, response) {
			if (window._molSettings.disableClickThru) {
			    var blockerDiv = window.document.createElement("div");
			    dom.addClass(blockerDiv, 'vast-blocker');
				return blockerDiv;
			}
	    var blocker = window.document.createElement("a");
	    var clickThroughMacro = response.clickThrough;

	    dom.addClass(blocker, 'vast-blocker');
	    blocker.href = generateClickThroughURL(clickThroughMacro, player);

	    if (utilities.isString(clickThroughMacro)) {
	      blocker.target = "_blank";
	    }

	    var clickHandler = function(e) {
	        if (player.paused()) {
	            player.play();

	            //We prevent event propagation to avoid problems with the player's normal pause mechanism
	            if (window.Event.prototype.stopPropagation !== undefined) {
	              e.stopPropagation();
	            }
	            return false;
	        }

	          player.pause();
	          tracker.trackClick();

	          if (window.MoatApiReference) {
	        	  window.MoatApiReference.dispatchEvent({type: 'AdClickThru', adVolume: player.volume()});
	          }
	          if (utilities.isIDevice()) {
	              window.open(generateClickThroughURL(clickThroughMacro, player), '_blank');
	              if (window.Event.prototype.stopPropagation !== undefined) {
	                  e.stopPropagation();
	              }
	          }
	    };
	  
	    if (utilities.isIDevice()) {
	        blocker.ontouchend = clickHandler;
	    }
	    else {
	        blocker.onclick = clickHandler;
	    }
	    
	    if (player.isFullscreen() && enableFullscreenClickIFrame) {
	    	blocker.style.display = 'none';
	    }

	    return blocker;
	  }

	  function updateBlockerURL(blocker, response, player) {
	    blocker.href = generateClickThroughURL(response.clickThrough, player);
	  }

	  function generateClickThroughURL(clickThroughMacro, player) {
	    var variables = {
	      ASSETURI: mediaFile.src,
	      CONTENTPLAYHEAD: vastUtil.formatProgress(player.currentTime() * 1000)
	    };

	    return clickThroughMacro ? vastUtil.parseURLMacro(clickThroughMacro, variables) : '#';
	  }
	  
	  function updateDisplayStyle() {
		  blocker.style.display = player.isFullscreen() ? 'none' : 'block';
	  }

	  function removeBlocker() {
	    player.off('timeupdate', updateBlocker);
		player.off('fullscreenchange', updateDisplayStyle);
	    dom.remove(blocker);
	  }
	};

	VASTIntegrator.prototype._addClickThroughDivBlocker = function addClickThrough(mediaFile, tracker, response, callback) {
		if (!this.enableFullscreenClickIFrame) {
			return callback(null, mediaFile, tracker, response);
		}
		var player = this.player;
		  var blocker = createClickThroughDiv(player, tracker, response);
		  var updateBlocker = updateBlockerURL.bind(this, blocker, response, player);
		  var blockerUrl;
		  var iFrame;
		  var iFrameBackButton;

		  player.el().insertBefore(blocker, player.controlBar.el());
		  player.on('timeupdate', updateBlocker);
		  playerUtils.once(player, ['vast.adEnd', 'vast.adsCancel'], removeBlocker);

		  player.on('fullscreenchange', updateDisplayStyle);

		  return callback(null, mediaFile, tracker, response);
		
		  function createClickThroughDiv(player, tracker) {
		    var blocker = window.document.createElement("div");

		    dom.addClass(blocker, 'vast-blocker');

			if (!window._molSettings.disableClickThru) {
			    blocker.onclick = function (e) {
			      if (player.paused()) {
			        player.play();
		
			        //We prevent event propagation to avoid problems with the player's normal pause mechanism
			        if (window.Event.prototype.stopPropagation !== undefined) {
			          e.stopPropagation();
			        }
			        return false;
			      }
		
			      player.pause();
			      tracker.trackClick();
		
			      if (window.MoatApiReference) {
			    	  window.MoatApiReference.dispatchEvent({type: 'AdClickThru', adVolume: player.volume()});
			      }
			      
			      // create IFrame with back button
			      iFrame = window.document.createElement("iframe");
				  dom.addClass(iFrame, 'vast-blocker');
				  iFrame.src = blockerUrl;
				  blocker.appendChild(iFrame);
				  
				  iFrameBackButton = window.document.createElement("div");
				  dom.addClass(iFrameBackButton, "vast-back-button");
			      dom.addClass(iFrameBackButton, 'enabled');
				  iFrameBackButton.innerHTML = "Back";
				  iFrameBackButton.id = 'iframeBackButton';
				  blocker.appendChild(iFrameBackButton);
				  iFrameBackButton.addEventListener ("click", function() {
					  blocker.removeChild(iFrame);
					  iFrame = null;
					  blocker.removeChild(iFrameBackButton);
					  iFrameBackButton = null;
		
					  // show controls
					  var skipButton = window.document.getElementById('adSkipButton');
					  if (skipButton) {
						  skipButton.style.display = 'block'; 
					  }
					  player.controls(true);
					  
					  if (window.Event.prototype.stopPropagation !== undefined) {
				          e.stopPropagation();
					  }
				  });
				  
				  // hide controls
				  setTimeout(function() {
					  playerUtils.showBigPlayButton(player, false);
				  }, 1);
				  var skipButton = window.document.getElementById('adSkipButton');
				  if (skipButton) {
					  skipButton.style.display = 'none'; 
				  }
				  player.controls(false);
		
			    };
			}

		    if (!player.isFullscreen()) {
		    	blocker.style.display = 'none';
		    }

		    return blocker;
		  }

		  function updateBlockerURL(blocker, response, player) {
			  blockerUrl = generateClickThroughURL(response.clickThrough, player);
		  }

		  function generateClickThroughURL(clickThroughMacro, player) {
		    var variables = {
		      ASSETURI: mediaFile.src,
		      CONTENTPLAYHEAD: vastUtil.formatProgress(player.currentTime() * 1000)
		    };

		    return clickThroughMacro ? vastUtil.parseURLMacro(clickThroughMacro, variables) : '#';
		  }

		  function updateDisplayStyle() {
			  blocker.style.display = player.isFullscreen() ? 'block' : 'none';
			  if (!player.isFullscreen() && iFrame) {
				  blocker.removeChild(iFrame);
				  iFrame = null;
				  blocker.removeChild(iFrameBackButton);
				  iFrameBackButton = null;
				  
				  playerUtils.showBigPlayButton(player, true);
				  var skipButton = window.document.getElementById('adSkipButton');
				  if (skipButton) {
					  skipButton.style.display = 'none'; 
				  }
				  player.controls(true);
			  }
		  }

		  function removeBlocker() {
		    player.off('timeupdate', updateBlocker);
			player.off('fullscreenchange', updateDisplayStyle);
		    dom.remove(blocker);
		  }
	};

	VASTIntegrator.prototype._playSelectedAd = function playSelectedAd(source, response, callback) {
	  var player = this.player;

	  //window.MoatApiReference = null;

	  player.preload("auto"); //without preload=auto the durationchange event is never fired
	  player.src(source);

	  logger.debug ("<VASTIntegrator._playSelectedAd> waiting for durationchange to play the ad...");

	  playerUtils.once(player, ['durationchange', 'error', 'vast.adsCancel'], function (evt) {
	    if (evt.type === 'durationchange') {
	      logger.debug ("<VASTIntegrator._playSelectedAd> got durationchange; calling playAd()");
	      playAd();
	    } else if(evt.type === 'error') {
	      callback(new VASTError("on VASTIntegrator, Player is unable to play the Ad", 400), response);
	    }
	    //NOTE: If the ads get canceled we do nothing/
	  });

	  /**** local functions ******/
	  function playAd() {

	    playerUtils.once(player, ['playing', 'vast.adsCancel'], function (evt) {
	      if(evt.type === 'vast.adsCancel'){
	        return;
	      }

	      /*Copyright (c) 2011-2016 Moat Inc. All Rights Reserved.*/
	      /*function initMoatTracking(a,c,d,h,k){var f=document.createElement("script"),b=[];c={adData:{ids:c,duration:d,url:k},dispatchEvent:function(a){this.sendEvent?(b&&(b.push(a),a=b,b=!1),this.sendEvent(a)):b.push(a)}};d="_moatApi"+Math.floor(1E8*Math.random());var e,g;try{e=a.ownerDocument,g=e.defaultView||e.parentWindow}catch(l){e=document,g=window}g[d]=c;f.type="text/javascript";a&&a.insertBefore(f,a.childNodes[0]||null);f.src="https://z.moatads.com/"+h+"/moatvideo.js#"+d;return c};
	      window.MoatApiReference = null;
	      if (response.ads && response.ads.length > 0 && response.ads[0].inLine && response.ads[0].inLine.moat) {
	    	  var ids = {level1: response.ads[0].inLine.moat.advid,
	    			     level2: response.ads[0].inLine.moat.cpgid,
	    			     level3: response.ads[0].inLine.moat.cpid,
	    			     level4: response.ads[0].inLine.moat.crid};
	    	  if (response.ads[0].inLine.moat.site_id) {
	    		  ids.slicer1 = response.ads[0].inLine.moat.site_id;
	    	  }
	    	  window.MoatApiReference = initMoatTracking(player.el_, ids, player.duration(), response.ads[0].inLine.moat.partnercode, player.currentSource().src);
	    	  //window.MoatApiReference = initMoatTracking(player.el_, ids, player.duration(), 'ninemediavpaid78961164', player.currentSource().src);
	      }
	      if (window._molSettings.viewabilityTracking) {
	    	  window._molSettings.viewabilityTracking.init(window._molSettings.viewability.contextId, 
	    			  player.duration(), player.el_.offsetWidth, player.el_.offsetHeight);
	      }*/
	      
	      logger.debug ("<VASTIntegrator._playSelectedAd/playAd> got playing event; triggering vast.adStart...");

	      player.trigger('vast.adStart');

	      if (utilities.isMobile()) {
	          // VIDLA-2336 (simulate user activity to make sure control-bar is visible on mobile devices)
	          for (var i = 0; i < 5; i++) {
	          	setTimeout(function() {
	          		player.userActive(true);
	          	}, i * 2000);
	          }
	      }

	      if (window.MoatApiReference) {
	    	  window.MoatApiReference.dispatchEvent({type: 'AdVideoStart', adVolume: player.volume()});
	      }

	      player.on('ended', proceed);
	      player.on('vast.adsCancel', proceed);
	      player.on('vast.adSkip', proceed);

	      function proceed(evt) {

	          if(evt.type === 'ended') {
	              // Ignore ended event if the Ad time was not 'near' the end
	              // avoids issues where IOS controls could skip the Ad
	            	if (window._molSettings.breakDuration) {
	            		if (window._molSettings.realVideoDuration) {
	            		    if ((window._molSettings.realVideoDuration - player.currentTime()) > 3) {
	            		        return;
	            		    }
	            		}
	            	}
	            	else if ((player.duration() - player.currentTime()) > 3) {
	    				return;
	    			}
	            }

	        /*if(evt.type === 'ended' && (player.duration() - player.currentTime()) > 3 ) {
	          // Ignore ended event if the Ad time was not 'near' the end
	          // avoids issues where IOS controls could skip the Ad
	          return;
	        }*/

	        player.off('ended', proceed);
	        player.off('vast.adsCancel', proceed);
	        player.off('vast.adSkip', proceed);

	        //NOTE: if the ads get cancel we do nothing apart removing the listners
	        if(evt.type === 'ended' || evt.type === 'vast.adSkip'){
	          callback(null, response);
	        }
	      }
	    });

	    logger.debug ("<VASTIntegrator._playSelectedAd/playAd> calling player.play()...");

	    player.play();
	  }
	};

	VASTIntegrator.prototype._trackError = function trackError(error, response) {
	  vastUtil.track(response.errorURLMacros, {ERRORCODE: error.code || 900});
	};

	module.exports = VASTIntegrator;
	},{"../../utils/async":38,"../../utils/consoleLogger":39,"../../utils/dom":40,"../../utils/playerUtils":43,"../../utils/utilityFunctions":45,"./VASTError":19,"./VASTResponse":21,"./VASTTracker":22,"./vastUtil":28}],21:[function(require,module,exports){
	'use strict';

	var Ad = require('./Ad');
	var VideoClicks = require('./VideoClicks');
	var Linear = require('./Linear');
	var InLine = require('./InLine');
	var Wrapper = require('./Wrapper');

	var utilities = require('../../utils/utilityFunctions');
	//var xml = require('../../utils/xml');

	window.InLine__A = InLine;
	function VASTResponse() {
	  if (!(this instanceof VASTResponse)) {
	    return new VASTResponse();
	  }

	  this._linearAdded = false;
	  this.vastVersion = undefined;
	  this.ads = [];
	  this.errorURLMacros = [];
	  this.impressions = [];
	  this.clickTrackings = [];
	  this.customClicks = [];
	  this.trackingEvents = {};
	  this.mediaFiles = [];
	  this.clickThrough = undefined;
	  this.adTitle = '';
	  this.duration = undefined;
	  this.skipoffset = undefined;
	  this.icons = [];
	}

	VASTResponse.prototype.addAd = function (ad) {
	  var inLine, wrapper;
	  if (ad instanceof Ad) {
	    inLine = ad.inLine;
	    wrapper = ad.wrapper;

	    this.ads.push(ad);

	    if (inLine) {
	      this._addInLine(inLine);
	    }

	    if (wrapper) {
	      this._addWrapper(wrapper);
	    }
	  }
	};

	/*VASTResponse.prototype._addErrorTrackUrl = function (error) {
		  var errorURL = error instanceof xml.JXONTree ? xml.keyValue(error) : error;
		  if (errorURL) {
		    this.errorURLMacros.push(errorURL);
		  }
		};*/
	VASTResponse.prototype._addErrorTrackUrls = function (errors) {
		  utilities.isArray(errors) && appendToArray(this.errorURLMacros, errors);
		};

	VASTResponse.prototype._addImpressions = function (impressions) {
	  utilities.isArray(impressions) && appendToArray(this.impressions, impressions);
	};

	VASTResponse.prototype._addClickThrough = function (clickThrough) {
	  if (utilities.isNotEmptyString(clickThrough)) {
	    this.clickThrough = clickThrough;
	  }
	};

	VASTResponse.prototype._addClickTrackings = function (clickTrackings) {
	  utilities.isArray(clickTrackings) && appendToArray(this.clickTrackings, clickTrackings);
	};

	VASTResponse.prototype._addCustomClicks = function (customClicks) {
	  utilities.isArray(customClicks) && appendToArray(this.customClicks, customClicks);
	};

	VASTResponse.prototype._addTrackingEvents = function (trackingEvents) {
	  var eventsMap = this.trackingEvents;

	  if (trackingEvents) {
	    trackingEvents = utilities.isArray(trackingEvents) ? trackingEvents : [trackingEvents];
	    trackingEvents.forEach(function (trackingEvent) {
	      if (!eventsMap[trackingEvent.name]) {
	        eventsMap[trackingEvent.name] = [];
	      }
	      eventsMap[trackingEvent.name].push(trackingEvent);
	    });
	  }
	};

	VASTResponse.prototype._addTitle = function (title) {
	  if (utilities.isNotEmptyString(title)) {
	    this.adTitle = title;
	  }
	};

	VASTResponse.prototype._addDuration = function (duration) {
	  if (utilities.isNumber(duration)) {
	    this.duration = duration;
	  }
	};

	VASTResponse.prototype._addVideoClicks = function (videoClicks) {
	  if (videoClicks instanceof VideoClicks) {
	    this._addClickThrough(videoClicks.clickThrough);
	    this._addClickTrackings(videoClicks.clickTrackings);
	    this._addCustomClicks(videoClicks.customClicks);
	  }
	};

	VASTResponse.prototype._addMediaFiles = function (mediaFiles) {
	  utilities.isArray(mediaFiles) && appendToArray(this.mediaFiles, mediaFiles);
	};

	VASTResponse.prototype._addSkipoffset = function (offset) {
		  if (window._molSettings && window._molSettings.skippable) {
			  if (window._molSettings.skippable.enabled) {
				  if (!this.duration || !window._molSettings.skippable.videoThreshold || this.duration >= window._molSettings.skippable.videoThreshold) {
					  this.skipoffset = window._molSettings.skippable.videoOffset;
				  }
			  }
		  }
		  else if (offset) {
		    this.skipoffset = offset;
		  }
	};

	VASTResponse.prototype._addAdParameters = function (adParameters) {
	  if (adParameters) {
	    this.adParameters = adParameters;
	  }
	};

	VASTResponse.prototype._addIcons = function (icons) {
	  utilities.isArray(icons) && appendToArray(this.icons, icons);
	};

	VASTResponse.prototype._addLinear = function (linear) {
	  if (linear instanceof Linear) {
	    this._addDuration(linear.duration);
	    this._addTrackingEvents(linear.trackingEvents);
	    this._addVideoClicks(linear.videoClicks);
	    this._addMediaFiles(linear.mediaFiles);
	    this._addSkipoffset(linear.skipoffset);
	    this._addAdParameters(linear.adParameters);
	    this._addIcons(linear.icons);
	    this._linearAdded = true;
	  }
	};

	VASTResponse.prototype._addInLine = function (inLine) {
	  var that = this;

	  if (inLine instanceof InLine) {
	    this._addTitle(inLine.adTitle);
	    this._addErrorTrackUrls(inLine.errors);
	    this._addImpressions(inLine.impressions);

	    inLine.creatives.forEach(function (creative) {
	      if (creative.linear) {
	        that._addLinear(creative.linear);
	      }
	    });
	  }
	};

	VASTResponse.prototype._addWrapper = function (wrapper) {
	  var that = this;

	  if (wrapper instanceof Wrapper) {
	    this._addErrorTrackUrls(wrapper.errors);
	    this._addImpressions(wrapper.impressions);

	    wrapper.creatives.forEach(function (creative) {
	      var linear = creative.linear;
	      if (linear) {
	        that._addVideoClicks(linear.videoClicks);
	        that.clickThrough = undefined;//We ensure that no clickThrough has been added
	        that._addTrackingEvents(linear.trackingEvents);
	        that._addIcons(linear.icons);
	      }
	    });
	  }
	};

	VASTResponse.prototype.hasLinear = function(){
	  return this._linearAdded;
	};

	function appendToArray(array, items) {
	  items.forEach(function (item) {
	    if (item) {
	      array.push(item);
	    }
	  });
	}

	module.exports = VASTResponse;


	},{"../../utils/utilityFunctions":45,"./Ad":7,"./InLine":12,"./Linear":14,"./VideoClicks":24,"./Wrapper":26}],22:[function(require,module,exports){
	'use strict';

	var VASTError = require('./VASTError');
	var VASTResponse = require('./VASTResponse');
	var vastUtil = require('./vastUtil');
	var utilities = require('../../utils/utilityFunctions');

	function VASTTracker(assetURI, vastResponse) {
	  if (!(this instanceof VASTTracker)) {
	    return new VASTTracker(assetURI, vastResponse);
	  }

	  this.sanityCheck(assetURI, vastResponse);
	  this.initialize(assetURI, vastResponse);

	}

	VASTTracker.prototype.initialize = function(assetURI, vastResponse) {
	  this.response = vastResponse;
	  this.assetURI = assetURI;
	  this.progress = 0;
	  this.quartiles = {
	    firstQuartile: {tracked: false, time: Math.round(25 * vastResponse.duration) / 100},
	    midpoint: {tracked: false, time: Math.round(50 * vastResponse.duration) / 100},
	    thirdQuartile: {tracked: false, time: Math.round(75 * vastResponse.duration) / 100}
	  };
	};

	VASTTracker.prototype.sanityCheck = function(assetURI, vastResponse) {
	  if (!utilities.isString(assetURI) || utilities.isEmptyString(assetURI)) {
	    throw new VASTError('on VASTTracker constructor, missing required the URI of the ad asset being played');
	  }

	  if (!(vastResponse instanceof VASTResponse)) {
	    throw new VASTError('on VASTTracker constructor, missing required VAST response');
	  }
	};

	VASTTracker.prototype.trackURLs = function trackURLs(urls, variables) {
	  if (utilities.isArray(urls) && urls.length > 0) {
	    variables = utilities.extend({
	      ASSETURI: this.assetURI,
	      CONTENTPLAYHEAD: vastUtil.formatProgress(this.progress)
	    }, variables || {});

	    vastUtil.track(urls, variables);
	  }
	};

	VASTTracker.prototype.trackEvent = function trackEvent(eventName, trackOnce) {
	    if (this.response.trackingEvents[eventName] && window._molSettings.viewabilityTracking) {
	    	  window._molSettings.viewabilityTracking.invokeEvent(eventName);
	    }
	  this.trackURLs(getEventUris(this.response.trackingEvents[eventName]));
	  if (trackOnce) {
	    this.response.trackingEvents[eventName] = undefined;
	  }

	  /*** Local function ***/
	  function getEventUris(trackingEvents) {
	    var uris;

	    if (trackingEvents) {
	      uris = [];
	      trackingEvents.forEach(function (event) {
	          if (!event.uri) {
	              return;
	          }

	          uris.push(event.uri);
	      });
	    }
	    return uris;
	  }
	};

	VASTTracker.prototype.trackProgress = function trackProgress(newProgressInMs) {
	  var that = this;
	  var events = [];
	  var ONCE = true;
	  var ALWAYS = false;
	  var trackingEvents = this.response.trackingEvents;

	  if (utilities.isNumber(newProgressInMs)) {
	    addTrackEvent('start', ONCE, newProgressInMs > 0);
	    addTrackEvent('rewind', ALWAYS, hasRewound(this.progress, newProgressInMs));
	    addQuartileEvents(newProgressInMs);
	    trackProgressEvents(newProgressInMs);
	    trackEvents();
	    this.progress = newProgressInMs;
	  }

	  /*** Local function ***/
	  function hasRewound(currentProgress, newProgress) {
	    var REWIND_THRESHOLD = 3000; //IOS video clock is very unreliable and we need a 3 seconds threshold to ensure that there was a rewind an that it was on purpose.
	    return currentProgress > newProgressInMs && Math.abs(newProgress - currentProgress) > REWIND_THRESHOLD;
	  }

	  function addTrackEvent(eventName, trackOnce, canBeAdded) {
	    if (trackingEvents[eventName] && canBeAdded) {
	      events.push({
	        name: eventName,
	        trackOnce: !!trackOnce
	      });
	    }
	  }

	  function addQuartileEvents(progress) {
	    var quartiles = that.quartiles;
	    var firstQuartile = that.quartiles.firstQuartile;
	    var midpoint = that.quartiles.midpoint;
	    var thirdQuartile = that.quartiles.thirdQuartile;

	    if (!firstQuartile.tracked) {
	      trackQuartile('firstQuartile', progress);
	    } else if (!midpoint.tracked) {
	      trackQuartile('midpoint', progress);
	    } else if (!thirdQuartile.tracked){
	      trackQuartile('thirdQuartile', progress);
	    }

	    /*** Local function ***/
	    function trackQuartile(quartileName, progress){
	      var quartile = quartiles[quartileName];
	      if(canBeTracked(quartile, progress)){
	        quartile.tracked = true;
	        addTrackEvent(quartileName, ONCE, true);
	      }
	    }
	  }

	  function canBeTracked(quartile, progress) {
	    var quartileTime = quartile.time;
	    //We only fire the quartile event if the progress is bigger than the quartile time by 5 seconds at most.
	    return progress >= quartileTime && progress <= (quartileTime + 5000);
	  }

	  function trackProgressEvents(progress) {
	    if (!utilities.isArray(trackingEvents.progress)) {
	      return; //Nothing to track
	    }

	    var pendingProgressEvts = [];

	    trackingEvents.progress.forEach(function (evt) {
	      if (evt.offset <= progress) {
	        that.trackURLs([evt.uri]);
	      } else {
	        pendingProgressEvts.push(evt);
	      }
	    });
	    trackingEvents.progress = pendingProgressEvts;
	  }

	  function trackEvents() {
	    events.forEach(function (event) {
	      that.trackEvent(event.name, event.trackOnce);
	    });
	  }
	};

	[
	  'rewind',
	  'fullscreen',
	  'exitFullscreen',
	  'pause',
	  'resume',
	  'mute',
	  'unmute',
	  'acceptInvitation',
	  'acceptInvitationLinear',
	  'collapse',
	  'expand'
	].forEach(function (eventName) {
	    VASTTracker.prototype['track' + utilities.capitalize(eventName)] = function () {
	      this.trackEvent(eventName);
	    };
	  });

	[
	  'start',
	  'skip',
	  'close',
	  'closeLinear'
	].forEach(function (eventName) {
	    VASTTracker.prototype['track' + utilities.capitalize(eventName)] = function () {
	      this.trackEvent(eventName, true);
	    };
	  });

	[
	  'firstQuartile',
	  'midpoint',
	  'thirdQuartile'
	].forEach(function (quartile) {
	    VASTTracker.prototype['track' + utilities.capitalize(quartile)] = function () {
	      this.quartiles[quartile].tracked = true;
	      this.trackEvent(quartile, true);
	    };
	  });

	VASTTracker.prototype.trackComplete = function () {
	  if(this.quartiles.thirdQuartile.tracked){
	    this.trackEvent('complete', true);
	  }
	};

	VASTTracker.prototype.trackErrorWithCode = function trackErrorWithCode(errorcode) {
	  if (utilities.isNumber(errorcode)) {
	    this.trackURLs(this.response.errorURLMacros, {ERRORCODE: errorcode});
	  }
	};

	VASTTracker.prototype.trackImpressions = function trackImpressions() {
	  this.trackURLs(this.response.impressions);
	};

	VASTTracker.prototype.trackCreativeView = function trackCreativeView() {
	  this.trackEvent('creativeView');
	};

	VASTTracker.prototype.trackClick = function trackClick() {
	    if (window._molSettings.viewabilityTracking) {
	  	  window._molSettings.viewabilityTracking.invokeEvent('ad-click');
	    }
	  this.trackURLs(this.response.clickTrackings);
	};

	module.exports = VASTTracker;

	},{"../../utils/utilityFunctions":45,"./VASTError":19,"./VASTResponse":21,"./vastUtil":28}],23:[function(require,module,exports){
	'use strict';

	var xml = require('../../utils/xml');
	var vastUtil = require('./vastUtil');
	var utilities = require('../../utils/utilityFunctions');

	function Verification(verificationJTree) {
	  if(!(this instanceof Verification)) {
	    return new Verification(verificationJTree);
	  }

	  this.vendor = verificationJTree.attr('vendor');
	  if (verificationJTree.javaScriptResource) {
		  this.javaScriptResources = parseResources(verificationJTree.javaScriptResource);
	  }
	  if (vastUtil.isFlashSupported() && verificationJTree.flashResource) {
		  this.javaScriptResources = parseResources(verificationJTree.javaScriptResource);
	  }
	  if (verificationJTree.viewableImpression) {
		  this.viewableImpression = {id: verificationJTree.viewableImpression.attr('id'), uri: xml.keyValue(verificationJTree.viewableImpression)};
	  }
	  
	  function parseResources(resources) {
		  var arr = [];
		  var arrData;
		  if (resources) {
			  arrData = utilities.isArray(resources) ? resources : [resources];
			  arrData.forEach(function (elem) {
				  arr.push({apiFramework: elem.attr('apiFramework'), uri: xml.keyValue(elem)});
			  });
		  }
		  return arr;
	  }
	}

	Verification.parseAdVerifications = function parseAdVerifications(verificationsJTree) {
	  var verifications = [];
	  var verificationsData;
	  if (utilities.isDefined(verificationsJTree) && utilities.isDefined(verificationsJTree.verification)) {
		  verificationsData = utilities.isArray(verificationsJTree.verification) ? verificationsJTree.verification : [verificationsJTree.verification];
		  verificationsData.forEach(function (verification) {
	    	verifications.push(new Verification(verification));
	    });
	  }
	  return verifications;
	};

	module.exports = Verification;

	},{"../../utils/utilityFunctions":45,"../../utils/xml":46,"./vastUtil":28}],24:[function(require,module,exports){
	'use strict';

	var utilities = require('../../utils/utilityFunctions');
	var xml = require('../../utils/xml');

	function VideoClicks(videoClickJTree) {
	  if (!(this instanceof VideoClicks)) {
	    return new VideoClicks(videoClickJTree);
	  }

	  this.clickThrough = xml.keyValue(videoClickJTree.clickThrough);
	  this.clickTrackings = parseClickTrackings(videoClickJTree.clickTracking);
	  this.customClicks = parseClickTrackings(videoClickJTree.customClick);

	  /*** Local functions ***/
	  function parseClickTrackings(trackingData) {
	    var clickTrackings = [];
	    if (trackingData) {
	      trackingData = utilities.isArray(trackingData) ? trackingData : [trackingData];
	      trackingData.forEach(function (clickTrackingData) {
	        clickTrackings.push(xml.keyValue(clickTrackingData));
	      });
	    }
	    return clickTrackings;
	  }
	}

	module.exports = VideoClicks;
	},{"../../utils/utilityFunctions":45,"../../utils/xml":46}],25:[function(require,module,exports){
	'use strict';

	var xml = require('../../utils/xml');
	var utilities = require('../../utils/utilityFunctions');

	function ViewableImpression(viewableImpressionJTree) {
		  if(!(this instanceof ViewableImpression)) {
		    return new ViewableImpression(viewableImpressionJTree);
		  }

		  //Optional Fields
		  this.id = viewableImpressionJTree.attr('id');
		  if (viewableImpressionJTree.viewable) {
			  this.viewables = parseUriArray(viewableImpressionJTree.viewable);
		  }
		  if (viewableImpressionJTree.notViewable) {
			  this.notViewables = parseUriArray(viewableImpressionJTree.notViewable);
		  }
		  if (viewableImpressionJTree.viewUndetermined) {
			  this.viewUndetermineds = parseUriArray(viewableImpressionJTree.viewUndetermined);
		  }

		  function parseUriArray(arrJTree) {
			  var arr = [];
			  var arrData;
			  if (arrJTree) {
				  arrData = utilities.isArray(arrJTree) ? arrJTree : [arrJTree];
				  arrData.forEach(function (elem) {
					  arr.push(xml.keyValue(elem));
				  });
			  }
			  return arr;
		 }
	}

	module.exports = ViewableImpression;

	},{"../../utils/utilityFunctions":45,"../../utils/xml":46}],26:[function(require,module,exports){
	'use strict';

	var vastUtil = require('./vastUtil');
	var Creative = require('./Creative');
	var ViewableImpression = require('./ViewableImpression');
	var Verification = require('./Verification');

	var utilities = require('../../utils/utilityFunctions');
	var xml = require('../../utils/xml');

	function Wrapper(wrapperJTree) {
	  if(!(this instanceof Wrapper)) {
	    return new Wrapper(wrapperJTree);
	  }

	  //Required elements
	  this.adSystem = xml.keyValue(wrapperJTree.adSystem);
	  this.impressions = vastUtil.parseImpressions(wrapperJTree.impression);
	  this.VASTAdTagURI = xml.keyValue(wrapperJTree.vASTAdTagURI);

	  //Optional elements
	  this.creatives = Creative.parseCreatives(wrapperJTree.creatives);
	  //this.error = xml.keyValue(wrapperJTree.error);
	  this.errors = vastUtil.parseErrors(wrapperJTree.error);
	  this.extensions = wrapperJTree.extensions;

	  //Optional attrs
	  this.followAdditionalWrappers = utilities.isDefined(xml.attr(wrapperJTree, 'followAdditionalWrappers'))? xml.attr(wrapperJTree, 'followAdditionalWrappers'): true;
	  this.allowMultipleAds = xml.attr(wrapperJTree, 'allowMultipleAds');
	  this.fallbackOnNoAd = xml.attr(wrapperJTree, 'fallbackOnNoAd');

	  if (window.mol_vastVersion === 4) {
		  if (wrapperJTree.viewableImpression) {
			  this.viewableImpression = new ViewableImpression(wrapperJTree.viewableImpression);
		  }
		  if (wrapperJTree.adVerifications) {
			  this.adVerifications = Verification.parseAdVerifications(wrapperJTree.adVerifications);
		  }
	  }
	}

	module.exports = Wrapper;

	},{"../../utils/utilityFunctions":45,"../../utils/xml":46,"./Creative":10,"./Verification":23,"./ViewableImpression":25,"./vastUtil":28}],27:[function(require,module,exports){
	'use strict';

	var utilities = require('../../utils/utilityFunctions');

	var durationRegex = /(\d\d):(\d\d):(\d\d)(\.(\d\d\d))?/;

	var parsers = {

	  duration: function parseDuration(durationStr) {

	    var match, durationInMs;

	    if (utilities.isString(durationStr)) {
	      match = durationStr.match(durationRegex);
	      if (match) {
	        durationInMs = parseHoursToMs(match[1]) + parseMinToMs(match[2]) + parseSecToMs(match[3]) + parseInt(match[5] || 0);
	      }
	    }

	    return isNaN(durationInMs) ? null : durationInMs;

	    /*** local functions ***/
	    function parseHoursToMs(hourStr) {
	      return parseInt(hourStr, 10) * 60 * 60 * 1000;
	    }

	    function parseMinToMs(minStr) {
	      return parseInt(minStr, 10) * 60 * 1000;
	    }

	    function parseSecToMs(secStr) {
	      return parseInt(secStr, 10) * 1000;
	    }
	  },

	  offset: function parseOffset(offset, duration) {
	    if(isPercentage(offset)){
	      return calculatePercentage(offset, duration);
	    }
	    return parsers.duration(offset);

	    /*** Local function ***/
	    function isPercentage(offset) {
	      var percentageRegex = /^\d+(\.\d+)?%$/g;
	      return percentageRegex.test(offset);
	    }

	    function calculatePercentage(percentStr, duration) {
	      if(duration) {
	        return calcPercent(duration, parseFloat(percentStr.replace('%', '')));
	      }
	      return null;
	    }

	    function calcPercent(quantity, percent){
	      return quantity * percent / 100;
	    }
	  }

	};


	module.exports = parsers;
	},{"../../utils/utilityFunctions":45}],28:[function(require,module,exports){
	'use strict';

	var utilities = require('../../utils/utilityFunctions');
	var VPAIDHTML5Tech = require('../vpaid/VPAIDHTML5Tech');

	var vastUtil = {

	  track: function track(URLMacros, variables) {
	    var sources = vastUtil.parseURLMacros(URLMacros, variables);
	    var trackImgs = [];
	    sources.forEach(function (src) {
	      var img = new Image();
	      img.src = src;
	      trackImgs.push(img);
	    });
	    return trackImgs;
	  },

	  parseURLMacros: function parseMacros(URLMacros, variables) {
	    var parsedURLs = [];

	    variables = variables || {};

	    if (!(variables["CACHEBUSTING"])) {
	      variables["CACHEBUSTING"] = Math.round(Math.random() * 1.0e+10);
	    }

	    URLMacros.forEach(function (URLMacro) {
	      parsedURLs.push(vastUtil._parseURLMacro(URLMacro, variables));
	    });

	    return parsedURLs;
	  },

	  parseURLMacro: function parseMacro(URLMacro, variables) {
	    variables = variables || {};

	    if (!(variables["CACHEBUSTING"])) {
	      variables["CACHEBUSTING"] = Math.round(Math.random() * 1.0e+10);
	    }

	    return vastUtil._parseURLMacro(URLMacro, variables);
	  },

	  _parseURLMacro: function parseMacro(URLMacro, variables) {
	    variables = variables || {};

	    utilities.forEach(variables, function (value, key) {
	      URLMacro = URLMacro.replace(new RegExp("\\[" + key + "\\\]", 'gm'), value);
	    });

	    return URLMacro;
	  },

	  parseDuration: function parseDuration(durationStr) {
	    var durationRegex = /(\d\d):(\d\d):(\d\d)(\.(\d\d\d))?/;
	    var match, durationInMs;

	    if (utilities.isString(durationStr)) {
	      match = durationStr.match(durationRegex);
	      if (match) {
	        durationInMs = parseHoursToMs(match[1]) + parseMinToMs(match[2]) + parseSecToMs(match[3]) + parseInt(match[5] || 0);
	      }
	    }

	    return isNaN(durationInMs) ? null : durationInMs;

	    /*** local functions ***/
	    function parseHoursToMs(hourStr) {
	      return parseInt(hourStr, 10) * 60 * 60 * 1000;
	    }

	    function parseMinToMs(minStr) {
	      return parseInt(minStr, 10) * 60 * 1000;
	    }

	    function parseSecToMs(secStr) {
	      return parseInt(secStr, 10) * 1000;
	    }
	  },

	  parseImpressions: function parseImpressions(impressions) {
		    if (impressions) {
		      impressions = utilities.isArray(impressions) ? impressions : [impressions];
		      return utilities.transformArray(impressions, function (impression) {
		        if (utilities.isNotEmptyString(impression.keyValue)) {
		          return impression.keyValue;
		        }
		        return undefined;
		      });
		    }
		    return [];
		  },

		  parseErrors: function parseErrors(errors) {
		    if (errors) {
		    	errors = utilities.isArray(errors) ? errors : [errors];
		      return utilities.transformArray(errors, function (error) {
		        if (utilities.isNotEmptyString(error.keyValue)) {
		          return error.keyValue;
		        }
		        return undefined;
		      });
		    }
		    return [];
		  },

	  //We assume that the progress is going to arrive in milliseconds
	  formatProgress: function formatProgress(progress) {
	    var hours, minutes, seconds, milliseconds;
	    hours = progress / (60 * 60 * 1000);
	    hours = Math.floor(hours);
	    minutes = (progress / (60 * 1000)) % 60;
	    minutes = Math.floor(minutes);
	    seconds = (progress / 1000) % 60;
	    seconds = Math.floor(seconds);
	    milliseconds = progress % 1000;
	    return utilities.toFixedDigits(hours, 2) + ':' + utilities.toFixedDigits(minutes, 2) + ':' + utilities.toFixedDigits(seconds, 2) + '.' + utilities.toFixedDigits(milliseconds, 3);
	  },

	  parseOffset: function parseOffset(offset, duration) {
	    if (isPercentage(offset)) {
	      return calculatePercentage(offset, duration);
	    }
	    return vastUtil.parseDuration(offset);

	    /*** Local function ***/
	    function isPercentage(offset) {
	      var percentageRegex = /^\d+(\.\d+)?%$/g;
	      return percentageRegex.test(offset);
	    }

	    function calculatePercentage(percentStr, duration) {
	      if (duration) {
	        return calcPercent(duration, parseFloat(percentStr.replace('%', '')));
	      }
	      return null;
	    }

	    function calcPercent(quantity, percent) {
	      return quantity * percent / 100;
	    }
	  },


	  //List of supported VPAID technologies
	  VPAID_techs: [
	    //VPAIDFlashTech,
	    VPAIDHTML5Tech
	  ],

	  isVPAID: function isVPAIDMediaFile(mediaFile) {
	    return !!mediaFile && mediaFile.apiFramework === 'VPAID';
	  },

	  findSupportedVPAIDTech: function findSupportedVPAIDTech(mimeType) {
	    var i, len, VPAIDTech;

	    for (i = 0, len = this.VPAID_techs.length; i < len; i += 1) {
	      VPAIDTech = this.VPAID_techs[i];
	      if (VPAIDTech.supports(mimeType)) {
	        return VPAIDTech;
	      }
	    }
	    return null;
	  },

	  isFlashSupported: function isFlashSupported() {
		  return false;
	  },

	};

	module.exports = vastUtil;

	},{"../../utils/utilityFunctions":45,"../vpaid/VPAIDHTML5Tech":30}],29:[function(require,module,exports){
	'use strict';

	var VASTError = require('../vast/VASTError');

	var utilities = require('../../utils/utilityFunctions');

	function VPAIDAdUnitWrapper(vpaidAdUnit, opts) {
	  if (!(this instanceof VPAIDAdUnitWrapper)) {
	    return new VPAIDAdUnitWrapper(vpaidAdUnit, opts);
	  }
	  sanityCheck(vpaidAdUnit, opts);

	  this.options = utilities.extend({}, opts);
	  this.adStarted = false;

	  this._adUnit = vpaidAdUnit;

	  /*** Local Functions ***/
	  function sanityCheck(adUnit, opts) {
	    if (!adUnit || !VPAIDAdUnitWrapper.checkVPAIDInterface(adUnit)) {
	      throw new VASTError('on VPAIDAdUnitWrapper, the passed VPAID adUnit does not fully implement the VPAID interface');
	    }

	    if (!utilities.isObject(opts)) {
	      throw new VASTError("on VPAIDAdUnitWrapper, expected options hash  but got '" + opts + "'");
	    }

	    if (!("responseTimeout" in opts) || !utilities.isNumber(opts.responseTimeout) ){
	      throw new VASTError("on VPAIDAdUnitWrapper, expected responseTimeout in options");
	    }
	  }
	}

	VPAIDAdUnitWrapper.checkVPAIDInterface = function checkVPAIDInterface(VPAIDAdUnit) {
	  //NOTE: skipAd is not part of the method list because it only appears in VPAID 2.0 and we support VPAID 1.0
	  var VPAIDInterfaceMethods = [
	    'handshakeVersion', 'initAd', 'startAd', 'stopAd', 'resizeAd', 'pauseAd', 'expandAd', 'collapseAd'
	  ];

	  for (var i = 0, len = VPAIDInterfaceMethods.length; i < len; i++) {
	    if (!VPAIDAdUnit || !utilities.isFunction(VPAIDAdUnit[VPAIDInterfaceMethods[i]])) {
	      return false;
	    }
	  }


	  return canSubscribeToEvents(VPAIDAdUnit) && canUnsubscribeFromEvents(VPAIDAdUnit);

	  /*** Local Functions ***/

	  function canSubscribeToEvents(adUnit) {
	    return utilities.isFunction(adUnit.subscribe) || utilities.isFunction(adUnit.addEventListener) || utilities.isFunction(adUnit.on);
	  }

	  function canUnsubscribeFromEvents(adUnit) {
	    return utilities.isFunction(adUnit.unsubscribe) || utilities.isFunction(adUnit.removeEventListener) || utilities.isFunction(adUnit.off);

	  }
	};

	VPAIDAdUnitWrapper.prototype.adUnitAsyncCall = function () {
	  var args = utilities.arrayLikeObjToArray(arguments);
	  var method = args.shift();
	  var cb = args.pop();
	  var timeoutId;

	  sanityCheck(method, cb, this._adUnit);
	  args.push(wrapCallback());

	  this._adUnit[method].apply(this._adUnit, args);
	  timeoutId = setTimeout(function () {
	    timeoutId = null;
	    cb(new VASTError("on VPAIDAdUnitWrapper, timeout while waiting for a response on call '" + method + "'"));
	    cb = utilities.noop;
	  }, this.options.responseTimeout);

	  /*** Local functions ***/
	  function sanityCheck(method, cb, adUnit) {
	    if (!utilities.isString(method) || !utilities.isFunction(adUnit[method])) {
	      throw new VASTError("on VPAIDAdUnitWrapper.adUnitAsyncCall, invalid method name");
	    }

	    if (!utilities.isFunction(cb)) {
	      throw new VASTError("on VPAIDAdUnitWrapper.adUnitAsyncCall, missing callback");
	    }
	  }

	  function wrapCallback() {
	    return function () {
	      if (timeoutId) {
	        clearTimeout(timeoutId);
	      }
	      cb.apply(this, arguments);
	    };
	  }
	};

	VPAIDAdUnitWrapper.prototype.on = function (evtName, handler) {
	  var addEventListener = this._adUnit.addEventListener || this._adUnit.subscribe || this._adUnit.on;
	  addEventListener.call(this._adUnit, evtName, handler);
	};

	VPAIDAdUnitWrapper.prototype.off = function (evtName, handler) {
	  var removeEventListener = this._adUnit.removeEventListener || this._adUnit.unsubscribe || this._adUnit.off;
	  removeEventListener.call(this._adUnit, evtName, handler);
	};

	VPAIDAdUnitWrapper.prototype.waitForEvent = function (evtName, cb, context) {
		  var that = this;
	  var timeoutId;
	  sanityCheck(evtName, cb);
	  context = context || null;

	  this.on(evtName, responseListener);

	  timeoutId = setTimeout(function () {
		  that.off(evtName, responseListener);
			// ignore events if ad is finished
			if (window._timeoutIds.indexOf(timeoutId) >= 0) {
	      if (that.options && that.options.player) {
	        that.options.player.trigger({type: 'trace.message', data: {message: 'Timeout while waiting for event ' + evtName}});
	      }
				cb(new VASTError("on VPAIDAdUnitWrapper.waitForEvent, timeout while waiting for event '" + evtName + "'"));
			}
	    timeoutId = null;
	    cb = utilities.noop;
	  }, this.options.responseTimeout);

	  // EN
	  window._timeoutIds.push(timeoutId);

	  /*** Local functions ***/
	  function sanityCheck(evtName, cb) {
	    if (!utilities.isString(evtName)) {
	      throw new VASTError("on VPAIDAdUnitWrapper.waitForEvent, missing evt name");
	    }

	    if (!utilities.isFunction(cb)) {
	      throw new VASTError("on VPAIDAdUnitWrapper.waitForEvent, missing callback");
	    }
	  }

	  function responseListener() {
	    if (that.options && that.options.player) {
	      that.options.player.trigger({type: 'trace.event', data: {event: evtName}});
	    }
		  that.off(evtName, responseListener);
	    var args = utilities.arrayLikeObjToArray(arguments);

	    if (timeoutId) {
	      clearTimeout(timeoutId);
	      timeoutId = null;
	    }

	    args.unshift(null);
	    cb.apply(context, args);
	  }
	};

	// VPAID METHODS
	VPAIDAdUnitWrapper.prototype.handshakeVersion = function (version, cb) {
	  this.adUnitAsyncCall('handshakeVersion', version, cb);
	};

	/* jshint maxparams:6 */
	VPAIDAdUnitWrapper.prototype.initAd = function (width, height, viewMode, desiredBitrate, adUnitData, cb) {
		console.log('[BC-MOL] VPAIDAdUnitWrapper->Calling initAd on creative');
		this.waitForEvent('AdLoaded', cb);
	  this._adUnit.initAd(width, height, viewMode, desiredBitrate, adUnitData);
	};

	VPAIDAdUnitWrapper.prototype.resizeAd = function (width, height, viewMode, cb) {
	  // NOTE: AdSizeChange event is only supported on VPAID 2.0 so for the moment we are not going to use it
	  // and will assume that everything is fine after the async call
		console.log('[BC-MOL] VPAIDAdUnitWrapper->Calling resizeAd on creative');
	  this.adUnitAsyncCall('resizeAd', width, height, viewMode, cb);
	  if (window.MoatApiReference) {
	  	window.MoatApiReference.dispatchEvent({type: 'AdSizeChange', adVolume: this.options.player.volume()});
	  }
	};

	VPAIDAdUnitWrapper.prototype.startAd = function (cb) {
		console.log('[BC-MOL] VPAIDAdUnitWrapper->Calling startAd on creative');
		if (!this.adStarted) {
			this.waitForEvent('AdStarted', cb);
		}
	  this._adUnit.startAd();
	  if (this.adStarted) {
	    cb(null);
	  }
	};

	VPAIDAdUnitWrapper.prototype.stopAd = function (cb) {
		console.log('[BC-MOL] VPAIDAdUnitWrapper->Calling stopAd on creative');
	  this.waitForEvent('AdStopped', cb);
	  this._adUnit.stopAd();
	};

	VPAIDAdUnitWrapper.prototype.pauseAd = function (cb) {
		console.log('[BC-MOL] VPAIDAdUnitWrapper->Calling pauseAd on creative');
	  this.waitForEvent('AdPaused', cb);
	  this._adUnit.pauseAd();
	};

	VPAIDAdUnitWrapper.prototype.resumeAd = function (cb) {
		console.log('[BC-MOL] VPAIDAdUnitWrapper->Calling resumeAd on creative');
	  this.waitForEvent('AdPlaying', cb);
	  this._adUnit.resumeAd();
	};

	VPAIDAdUnitWrapper.prototype.expandAd = function (cb) {
		console.log('[BC-MOL] VPAIDAdUnitWrapper->Calling expandAd on creative');
	  this.waitForEvent('AdExpandedChange', cb);
	  this._adUnit.expandAd();
	};

	VPAIDAdUnitWrapper.prototype.collapseAd = function (cb) {
		console.log('[BC-MOL] VPAIDAdUnitWrapper->Calling collapseAd on creative');
	  this.waitForEvent('AdExpandedChange', cb);
	  this._adUnit.collapseAd();
	};

	VPAIDAdUnitWrapper.prototype.skipAd = function (cb) {
		console.log('[BC-MOL] VPAIDAdUnitWrapper->Calling skipAd on creative');
	  this.waitForEvent('AdSkipped', cb);
	  this._adUnit.skipAd();
	};

	//VPAID property getters
	[
	  'adLinear',
	  'adWidth',
	  'adHeight',
	  'adExpanded',
	  'adSkippableState',
	  'adRemainingTime',
	  'adDuration',
	  'adVolume',
	  'adCompanions',
	  'adIcons'
	].forEach(function (property) {
	  var getterName = 'get' + utilities.capitalize(property);

	  VPAIDAdUnitWrapper.prototype[getterName] = function (cb) {
	    this.adUnitAsyncCall(getterName, cb);
	  };
	});

	//VPAID property setters
	VPAIDAdUnitWrapper.prototype.setAdVolume = function(volume, cb){
	  this.adUnitAsyncCall('setAdVolume',volume, cb);
	};

	module.exports = VPAIDAdUnitWrapper;

	},{"../../utils/utilityFunctions":45,"../vast/VASTError":19}],30:[function(require,module,exports){
	'use strict';

	var MimeTypes = require('../../utils/mimetypes');

	var VASTError = require('../vast/VASTError');

	var VPAIDHTML5Client = require('VPAIDHTML5Client/js/VPAIDHTML5Client');

	var utilities = require('../../utils/utilityFunctions');
	var dom = require('../../utils/dom');

	var logger = require ('../../utils/consoleLogger');

	function VPAIDHTML5Tech(mediaFile) {

	  if(!(this instanceof VPAIDHTML5Tech)) {
	    return new VPAIDHTML5Tech(mediaFile);
	  }

	  sanityCheck(mediaFile);

	  this.name = 'vpaid-html5';
	  this.containerEl = null;
	  this.videoEl = null;
	  this.vpaidHTMLClient = null;

	  this.mediaFile = mediaFile;

	  function sanityCheck(mediaFile) {
	      if (!mediaFile || !utilities.isString(mediaFile.src)) {
	        throw new VASTError(VPAIDHTML5Tech.INVALID_MEDIA_FILE);
	      }
	  }
	}

	VPAIDHTML5Tech.VPAIDHTML5Client = VPAIDHTML5Client;

	VPAIDHTML5Tech.supports = function (type) {
	  return !utilities.isOldIE() && MimeTypes.html5.indexOf(type) > -1;
	};

	VPAIDHTML5Tech.prototype.loadAdUnit = function loadAdUnit(containerEl, videoEl, callback) {
	  sanityCheck(containerEl, videoEl, callback);

	  this.containerEl = containerEl;
	  this.videoEl = videoEl;
	  this.vpaidHTMLClient = new VPAIDHTML5Tech.VPAIDHTML5Client(containerEl, videoEl, {});
	  this.vpaidHTMLClient.loadAdUnit(this.mediaFile.src, callback);

	  function sanityCheck(container, video, cb) {
	    if (!dom.isDomElement(container)) {
	      throw new VASTError(VPAIDHTML5Tech.INVALID_DOM_CONTAINER_EL);
	    }

	    if (!dom.isDomElement(video) || video.tagName.toLowerCase() !== 'video') {
	      throw new VASTError(VPAIDHTML5Tech.INVALID_DOM_CONTAINER_EL);
	    }

	    if (!utilities.isFunction(cb)) {
	      throw new VASTError(VPAIDHTML5Tech.MISSING_CALLBACK);
	    }
	  }
	};

	VPAIDHTML5Tech.prototype.unloadAdUnit = function unloadAdUnit() {
	  if (this.vpaidHTMLClient) {
	    try {
	      this.vpaidHTMLClient.destroy();
	    } catch(e) {
	      logger.error ('VAST ERROR: trying to unload the VPAID adunit');
	    }

	    this.vpaidHTMLClient = null;
	  }

	  if (this.containerEl) {
	    dom.remove(this.containerEl);
	    this.containerEl = null;
	  }
	};

	var PREFIX = 'on VPAIDHTML5Tech';
	VPAIDHTML5Tech.INVALID_MEDIA_FILE = PREFIX + ', invalid MediaFile';
	VPAIDHTML5Tech.INVALID_DOM_CONTAINER_EL = PREFIX + ', invalid container HtmlElement';
	VPAIDHTML5Tech.INVALID_DOM_VIDEO_EL = PREFIX + ', invalid HTMLVideoElement';
	VPAIDHTML5Tech.MISSING_CALLBACK = PREFIX + ', missing valid callback';

	module.exports = VPAIDHTML5Tech;

	},{"../../utils/consoleLogger":39,"../../utils/dom":40,"../../utils/mimetypes":42,"../../utils/utilityFunctions":45,"../vast/VASTError":19,"VPAIDHTML5Client/js/VPAIDHTML5Client":3}],31:[function(require,module,exports){
	'use strict';

	var MimeTypes = require('../../utils/mimetypes');
	var VASTError = require('../vast/VASTError');
	var VASTResponse = require('../vast/VASTResponse');
	var VASTTracker = require('../vast/VASTTracker');
	var vastUtil = require('../vast/vastUtil');

	var VPAIDAdUnitWrapper = require('./VPAIDAdUnitWrapper');

	var async = require('../../utils/async');
	var dom = require('../../utils/dom');
	var playerUtils = require('../../utils/playerUtils');
	var utilities = require('../../utils/utilityFunctions');

	var logger = require ('../../utils/consoleLogger');

	function VPAIDIntegrator(player, settings) {
	  if (!(this instanceof VPAIDIntegrator)) {
	    return new VPAIDIntegrator(player);
	  }

	  this.VIEW_MODE = {
	    NORMAL: 'normal',
	    FULLSCREEN: "fullscreen",
	    THUMBNAIL: "thumbnail"
	  };
	  this.player = player;
	  this.containerEl = createVPAIDContainerEl(player);
	  this.options = {
	    responseTimeout: 5000,
	    VPAID_VERSION: '2.0'
	  };
	  this.settings = settings;
	  
	  this.contentSource = player.tech_.el_.src;
	  this.needsShowPlayer = false;
	  
	  this.errorHasBeenTracked = false;
	  this.adFinished = false;
	  
	  this.timeUpdateTimer = null;
	  
	  /*** Local functions ***/

	  function createVPAIDContainerEl() {
	    var containerEl = document.createElement('div');
	    containerEl.id = 'BC-VPAID-container';
	    dom.addClass(containerEl, 'VPAID-container');
	    player.el().insertBefore(containerEl, player.controlBar.el());
	    return containerEl;
	  }
	}

	VPAIDIntegrator.prototype.playAd = function playVPaidAd(vastResponse, callback) {
	  if (!(vastResponse instanceof VASTResponse)) {
	    return callback(new VASTError('on VASTIntegrator.playAd, missing required VASTResponse'));
	  }

	  var that = this;
	  var player = this.player;
	  logger.debug ("<VPAIDIntegrator.playAd> looking for supported tech...");
	  var tech = this._findSupportedTech(vastResponse, this.settings);

	  callback = callback || utilities.noop;

	  this._adUnit = null;

	  dom.addClass(player.el(), 'vjs-vpaid-ad');
	  
	  player.on('vast.adsCancel', triggerVpaidAdEnd);
	  player.one('vpaid.adEnd', function(){
	    player.off('vast.adsCancel', triggerVpaidAdEnd);
	    removeAdUnit();
	  });

	  if (tech) {
	    logger.info ("<VPAIDIntegrator.playAd> found tech: ", tech);

	    async.waterfall([
	      function (next) {
	        next(null, tech, vastResponse);
	      },
	      this._loadAdUnit.bind(this),
	      this._playAdUnit.bind(this),
	      this._finishPlaying.bind(this)

	    ], adComplete);

	    this._adUnit = {
	      _paused: true,
	      type: 'VPAID',
	      pauseAd: function() {
	        player.trigger('vpaid.pauseAd');
	        player.pause(true);//we make sure that the video content gets stopped.
	      },
	      resumeAd: function() {
	          player.trigger('vpaid.resumeAd');
	      },
	      isPaused: function() {
	        return this._paused;
	      },
	      getSrc: function() {
	        return tech.mediaFile;
	      }
	    };

	  } else {
	    logger.debug ("<VPAIDIntegrator.playAd> could not find suitable tech");
	    var error = new VASTError('on VPAIDIntegrator.playAd, could not find a supported mediaFile', 403);
	    adComplete(error, this._adUnit, vastResponse);
	  }

	  return this._adUnit;

	  /*** Local functions ***/
	  function adComplete(error, adUnit, vastResponse) {
	    if (error && vastResponse) {
	      that._trackError(vastResponse, error.code);
	    }
	    player.trigger('vpaid.adEnd');
	    callback(error, vastResponse);
	  }

	  function triggerVpaidAdEnd(){
		    //player.trigger('stopAd');
	    player.trigger('vpaid.adEnd');
	  }

	  function removeAdUnit() {
	    if (tech) {
	    	console.log('[BC-MOL] VPAIDIntegrator->Calling unloadAdUnit (implicitly invokes stopAd and unsubscribes VPAID events)');
	      tech.unloadAdUnit();
	    }
	    dom.removeClass(player.el(), 'vjs-vpaid-ad');
	  }
	};

	VPAIDIntegrator.prototype._findSupportedTech = function (vastResponse, settings) {
	  if (!(vastResponse instanceof VASTResponse)) {
	    return null;
	  }

	  var vpaidMediaFiles = vastResponse.mediaFiles.filter(vastUtil.isVPAID);
	  var preferredTech = settings && settings.preferredTech;
	  var skippedSupportTechs = [];
	  var i, len, mediaFile, VPAIDTech, isPreferedTech;

	  for (i = 0, len = vpaidMediaFiles.length; i < len; i += 1) {
	    mediaFile = vpaidMediaFiles[i];
	    VPAIDTech = vastUtil.findSupportedVPAIDTech(mediaFile.type);

	    // no supported VPAID tech found, skip mediafile
	    if (!VPAIDTech) { continue; }

	    // do we have a prefered tech, does it play this media file ?
	    isPreferedTech = preferredTech ?
	      (mediaFile.type === preferredTech || (MimeTypes[preferredTech] && MimeTypes[preferredTech].indexOf(mediaFile.type) > -1 )) :
	      false;

	    // our prefered tech can read this mediafile, defaulting to it.
	    if (isPreferedTech) {
	      return new VPAIDTech(mediaFile, settings);
	    }

	    skippedSupportTechs.push({ mediaFile: mediaFile, tech: VPAIDTech });
	  }

	  if (skippedSupportTechs.length) {
	    var firstTech = skippedSupportTechs[0];
	    return new firstTech.tech(firstTech.mediaFile, settings);
	  }

	  return null;
	};

	VPAIDIntegrator.prototype._createVPAIDAdUnitWrapper = function(adUnit, src, responseTimeout, player) {
		return new VPAIDAdUnitWrapper(adUnit, {src: src, responseTimeout: responseTimeout, player: player});
	};

	VPAIDIntegrator.prototype._loadAdUnit = function (tech, vastResponse, next) {
	  var that = this;
	  var player = this.player;
	  var vjsTechEl = player.el().querySelector('.vjs-tech');
	  //var responseTimeout = this.settings.responseTimeout || this.options.responseTimeout;
	  var responseTimeout = this.settings.adCancelTimeout || this.options.responseTimeout;
	  tech.loadAdUnit(this.containerEl, vjsTechEl, function (error, adUnit) {
	    if (error) {
	      return next(error, adUnit, vastResponse);
	    }

	    try {
	      var frms = document.getElementsByTagName('IFRAME');
	      if (frms && frms.length > 0) {
	        frms[0].addEventListener('mouseover', function() {
	          //console.log("****** user activity");
	            player.userActive(true);
	            if (!dom.hasClass(player.el(), 'vjs-has-started')) {
	                dom.addClass(player.el(), 'vjs-has-started');
	            }
	          });
	        }
	        player.trigger({type: 'trace.message', data: {message: 'Playing ' + tech.mediaFile.src + ' (type = ' + tech.mediaFile.type + 
	      	  ', apiFramework = ' + tech.mediaFile.apiFramework + ')'}});
	      var WrappedAdUnit = that._createVPAIDAdUnitWrapper(adUnit, tech.mediaFile.src, responseTimeout, player);
	      var techClass = 'vjs-' + tech.name + '-ad';
	      dom.addClass(player.el(), techClass);
	      player.one('vpaid.adEnd', function() {
	        dom.removeClass(player.el(),techClass);
	      });
	      next(null, WrappedAdUnit, vastResponse);
	    } catch (e) {
	      next(e, adUnit, vastResponse);
	    }
	  });
	};

	VPAIDIntegrator.prototype._playAdUnit = function (adUnit, vastResponse, callback) {
	  async.waterfall([
	    function (next) {
	      next(null, adUnit, vastResponse);
	    },
	    this._handshake.bind(this),
	    this._setupEvents.bind(this),
	    this._initAd.bind(this),
	    //this._setupEvents.bind(this),
	    this._addSkipButton.bind(this),
	    this._linkPlayerControls.bind(this),
	    this._startAd.bind(this)
	  ], callback);
	};

	VPAIDIntegrator.prototype._handshake = function handshake(adUnit, vastResponse, next) {
	  adUnit.handshakeVersion(this.options.VPAID_VERSION, function (error, version) {
	    if (error) {
	      return next(error, adUnit, vastResponse);
	    }

	    if (version && isSupportedVersion(version)) {
	      return next(null, adUnit, vastResponse);
	    }

	    return next(new VASTError('on VPAIDIntegrator._handshake, unsupported version "' + version + '"'), adUnit, vastResponse);
	  });

	  function isSupportedVersion(version) {
	    var majorNum = major(version);
	    return majorNum >= 1 && majorNum <= 2;
	  }

	  function major(version) {
	    var parts = version.split('.');
	    return parseInt(parts[0], 10);
	  }
	};

	VPAIDIntegrator.prototype._initAd = function (adUnit, vastResponse, next) {
	  var tech = this.player.el().querySelector('.vjs-tech');
	  var dimension = dom.getDimension(tech);
	  adUnit.initAd(dimension.width, dimension.height, this.VIEW_MODE.NORMAL, -1, {AdParameters: vastResponse.adParameters || ''}, function (error) {
	    next(error, adUnit, vastResponse);
	  });
	};

	VPAIDIntegrator.prototype._createVASTTracker = function(adUnitSrc, vastResponse) {
	  return new VASTTracker(adUnitSrc, vastResponse);
	};

	VPAIDIntegrator.prototype._setupEvents = function (adUnit, vastResponse, next) {
	  var adUnitSrc = adUnit.options.src;
	  var tracker = this._createVASTTracker(adUnitSrc, vastResponse);
	  var player = this.player;
	  var contentSource = this.contentSource;
	  var that = this;
	  
	  this.tracker = tracker;
	  
	  this.impressionTriggered = false;

	  adUnit.on('AdSkipped', function () {
		  	player.trigger({type: 'trace.event', data: {event: 'vpaid.AdSkipped'}});
		      if (window.MoatApiReference) {
		    	  window.MoatApiReference.dispatchEvent({type: 'AdSkipped', adVolume: player.volume()});
		      }
	    player.trigger('vpaid.AdSkipped');
	    tracker.trackSkip();
	    playerUtils.showBigPlayButton(player, false);
	    
	    adUnit.stopAd(utilities.noop);
	    // VIDLA-2676 - force player to clean resources
	  	setTimeout(function() {
	        player.trigger('vast.adsCancel');
	  	}, 1);
	    //player.trigger('adStop');
	  });

	  function triggerImpression() {
		  if (!that.impressionTriggered) {
			  that.impressionTriggered = true;
		      if (window.MoatApiReference) {
		    	  window.MoatApiReference.dispatchEvent({type: 'AdImpression', adVolume: player.volume()});
		      }
			  player.trigger({type: 'trace.event', data: {event: 'vpaid.AdImpression'}});
			  player.trigger('vpaid.AdImpression');
			  tracker.trackImpressions();
		  }
	  }
	  adUnit.on('AdImpression', function () {
		  triggerImpression();
	  });

	  adUnit.on('AdStarted', function () {
		  if (adUnit.adStarted) {
			  // ignore second AdStarted event
			  return;
		  }
	    if (window._molSettings.viewabilityTracking) {
	      window._molSettings.viewabilityTracking.init(window._molSettings.viewability.contextId, 
	          player.duration(), player.el_.offsetWidth, player.el_.offsetHeight);
	    }
	    adUnit.adStarted = true;
	    if (!dom.hasClass(player.el(), 'vjs-has-started')) {
	      dom.addClass(player.el(), 'vjs-has-started');
	    }
	    player.trigger('vpaid.AdStarted');
	    tracker.trackCreativeView();
	    if (!window._molSettings.playsInBreak && adUnit.getAdDuration) {
	      adUnit.getAdDuration(function(that, dur) {
	        if (dur > 0) {
	          player.duration(dur);
	        }
	      });
	    }
	  	triggerImpression();
	    notifyPlayToPlayer();
	    player.one('adStop', function() {
	      if (adUnit.stopAd) {
	        adUnit.stopAd(utilities.noop);
	      }
	    });
	    
	    if (utilities.isIDevice()) {
	    	// VIDLA-2836 (Ad click thru does not landing click thru url)
	    	// iPhone and iPad
	    	var elems = document.getElementsByClassName('vjs-resize-manager');
	    	if (elems && elems.length > 0) {
	    		var parent = elems[0].parentElement;
	    		if (parent) {
	    			parent.removeChild(elems[0]);
	    		}
	    	}
	    }

	  });

	  function updateTimeControls() {
		  	var convertTimeToStr = function(time) {
				var secs = parseInt(time + 0.5);
				var mins = parseInt(secs / 60);
				secs -= (mins * 60);
				var str = mins.toString() + ':' + (secs > 9 ? ''  : '0') + secs.toString();
				return str;
			};
			
			var bcTimeDisplay = document.getElementById('bc_time_display');
			if (!bcTimeDisplay) {
				bcTimeDisplay = document.createElement('div');
				player.controlBar.getChild('currentTimeDisplay').el_.appendChild(bcTimeDisplay);
				bcTimeDisplay.id = 'bc_time_display';
				bcTimeDisplay.class = 'vjs-current-time-display';
				bcTimeDisplay['aria-live'] = 'off';
				bcTimeDisplay.innerHTML = '<span class="vjs-control-text"></span>0:00';
	      showOriginalTimeDisplay(player, false);
			}
			else {
	      showOriginalTimeDisplay(player, false);
				bcTimeDisplay.style.display = 'block';
			}
			adUnit.getAdRemainingTime(function(that, time) {
				if (time >= 0) {
					var curTime = player.duration() - time;
					if (curTime >= 0) {
						bcTimeDisplay.childNodes[1].nodeValue = convertTimeToStr(curTime);
					}
				}
			});
	  }
		  
	  adUnit.on('AdVideoStart', function () {
		  player.trigger({type: 'trace.event', data: {event: 'AdVideoStart'}});
	      if (window.MoatApiReference) {
	    	  window.MoatApiReference.dispatchEvent({type: 'AdVideoStart', adVolume: player.volume()});
	      }

	    player.trigger('vpaid.AdVideoStart');
	    tracker.trackStart();
		if (!window._molSettings.playsInBreak && adUnit.getAdDuration) {
			adUnit.getAdDuration(function(that, dur) {
				if (dur > 0) {
					player.duration(dur);
				}
			});
		}
	    notifyPlayToPlayer();
	    playerUtils.showBigPlayButton(player, false);
	    if (utilities.isMobile()) {
	        // VIDLA-2336 (simulate user activity to make sure control bar is visible on mobile devices)
	        for (var i = 0; i < 4; i++) {
	        	setTimeout(function() {
	        		document.getElementsByTagName('IFRAME')[0].dispatchEvent(new Event('mouseover'));
	        	}, i * 1000);
	        }
	    }
	    if (contentSource === player.tech_.el_.src) {
	        player.trigger({type: 'trace.message', data: {message: 'VPAID creative uses its own video tag'}});
	        //player.tech_.el_.style.display = 'none';
	        //player.controlBar.hide();
	        that.needsShowPlayer = true;
	    	if (!window._molSettings.playsInBreak) {
	    		that.timeUpdateTimer = setInterval(updateTimeControls, 500);
	      }
	      else {
	        player.controlBar.hide();
	      }
	    }
	  });

	  adUnit.on('AdPlaying', function () {
		  if (that.adFinished) {
			  return;
		  }
	      if (window.MoatApiReference) {
	    	  window.MoatApiReference.dispatchEvent({type: 'AdPlaying', adVolume: player.volume()});
	      }
	    player.trigger('vpaid.AdPlaying');
	    tracker.trackResume();
	    notifyPlayToPlayer();
	    playerUtils.showBigPlayButton(player, false);
	  });

	  adUnit.on('AdPaused', function () {
		  if (that.adFinished) {
			  return;
		  }
	      if (window.MoatApiReference) {
	    	  window.MoatApiReference.dispatchEvent({type: 'AdPaused', adVolume: player.volume()});
	      }
	    player.trigger('vpaid.AdPaused');
	    tracker.trackPause();
	    notifyPauseToPlayer();
		  var iframeBackButton = window.document.getElementById('iframeBackButton');
		  if (iframeBackButton) {
			  playerUtils.showBigPlayButton(player, false);
			  return;
		  }
	    playerUtils.showBigPlayButton(player, true);
	  });

	  function notifyPlayToPlayer(){
	    if(that._adUnit && that._adUnit.isPaused()){
	      that._adUnit._paused = false;
	    }
	    player.trigger('play');

	  }

	  function notifyPauseToPlayer() {
	    if(that._adUnit){
	      that._adUnit._paused = true;
	    }
	    player.trigger('pause');
	  }

	  adUnit.on('AdVideoFirstQuartile', function () {
		  if (that.adFinished) {
			  return;
		  }
			player.trigger({type: 'trace.event', data: {event: 'vpaid.AdVideoFirstQuartile'}});
	    if (window.MoatApiReference) {
	    	window.MoatApiReference.dispatchEvent({type: 'AdVideoFirstQuartile', adVolume: player.volume()});
	    }
	    player.trigger('vpaid.AdVideoFirstQuartile');
	    tracker.trackFirstQuartile();
	  });

	  adUnit.on('AdVideoMidpoint', function () {
		  if (that.adFinished) {
			  return;
		  }
			player.trigger({type: 'trace.event', data: {event: 'vpaid.AdVideoMidpoint'}});
	    if (window.MoatApiReference) {
	    	window.MoatApiReference.dispatchEvent({type: 'AdVideoMidpoint', adVolume: player.volume()});
	    }
	    player.trigger('vpaid.AdVideoMidpoint');
	    tracker.trackMidpoint();
	  });

	  adUnit.on('AdVideoThirdQuartile', function () {
		  if (that.adFinished) {
			  return;
		  }
			player.trigger({type: 'trace.event', data: {event: 'vpaid.AdVideoThirdQuartile'}});
	    if (window.MoatApiReference) {
	    	window.MoatApiReference.dispatchEvent({type: 'AdVideoThirdQuartile', adVolume: player.volume()});
	    }
	    player.trigger('vpaid.AdVideoThirdQuartile');
	    tracker.trackThirdQuartile();
	  });

	  adUnit.on('AdVideoComplete', function () {
		  if (that.adFinished) {
			  return;
		  }
			player.trigger({type: 'trace.event', data: {event: 'vpaid.AdVideoComplete'}});
	    player.trigger('vpaid.AdVideoComplete');
	    tracker.trackComplete();
	    playerUtils.showBigPlayButton(player, false);
	    if (window.MoatApiReference) {
	  	  window.MoatApiReference.dispatchEvent({type: 'AdVideoComplete', adVolume: player.volume()});
	    }
	    // VIDLA-2406 forse ad to stop
	    if (adUnit.stopAd) {
	      adUnit.stopAd(utilities.noop);
	    }
	  });

	  adUnit.on('AdClickThru', function (data) {
		  if (that.adFinished) {
			  return;
		  }
		  var enableFullscreenClickIFrame = false;
		player.trigger({type: 'trace.event', data: {event: 'vpaid.AdClickThru'}});
	      if (window.MoatApiReference) {
	    	  window.MoatApiReference.dispatchEvent({type: 'AdClickThru', adVolume: player.volume()});
	      }
	    player.trigger('vpaid.AdClickThru');
	    var url = data.url;
	    var playerHandles = data.playerHandles;
	    var clickThruUrl = utilities.isNotEmptyString(url) ? url : generateClickThroughURL(vastResponse.clickThrough);

		if (playerHandles && window._molSettings.disableClickThru) {
			return;
		}
		
	    tracker.trackClick();
	    if (playerHandles && clickThruUrl) {
	    	if (player.isFullscreen() && enableFullscreenClickIFrame) {
	    		addClickThroughDivBlocker(clickThruUrl);
	    	}
	    	else {
	    		window.open(clickThruUrl, '_blank');
	    	}
	    }
	    
	    // VIDLA-2269 (Ad does not pause when browsing out to a click url from a vpaid ad)
	    adUnit.pauseAd(utilities.noop);

	    function generateClickThroughURL(clickThroughMacro) {
	      var variables = {
	        ASSETURI: adUnit.options.src,
	        CONTENTPLAYHEAD: 0 //In VPAID there is no method to know the current time from the adUnit
	      };

	      return clickThroughMacro ? vastUtil.parseURLMacro(clickThroughMacro, variables) : null;
	    }
	  });

	  adUnit.on('AdUserAcceptInvitation', function () {
			player.trigger({type: 'trace.event', data: {event: 'vpaid.AdUserAcceptInvitation'}});
	    player.trigger('vpaid.AdUserAcceptInvitation');
	    tracker.trackAcceptInvitation();
	    tracker.trackAcceptInvitationLinear();
	  });

	  adUnit.on('AdUserClose', function () {
			player.trigger({type: 'trace.event', data: {event: 'vpaid.AdUserClose'}});
		      if (window.MoatApiReference) {
		    	  window.MoatApiReference.dispatchEvent({type: 'AdUserClose', adVolume: player.volume()});
		      }
	    player.trigger('vpaid.AdUserClose');
	    tracker.trackClose();
	    tracker.trackCloseLinear();
	  });

	  adUnit.on('AdUserMinimize', function () {
			player.trigger({type: 'trace.event', data: {event: 'vpaid.AdUserMinimize'}});
	    player.trigger('vpaid.AdUserMinimize');
	    tracker.trackCollapse();
	  });

	  adUnit.on('AdError', function () {
		  if (that.adFinished) {
			  return;
		  }
		  // VIDLA-2389 suppress eror tracking after ad impression has been reported
		  if (!that.impressionTriggered && !that.errorHasBeenTracked) {
			  player.trigger({type: 'trace.event', data: {event: 'vpaid.AdError'}});
		      if (window.MoatApiReference) {
		    	  window.MoatApiReference.dispatchEvent({type: 'AdError', adVolume: player.volume()});
		      }
		      player.trigger('vpaid.AdError');
		    //NOTE: we track errors code 901, as noted in VAST 3.0
		    tracker.trackErrorWithCode(901);
		    that.errorHasBeenTracked = true;
		  }
		  playerUtils.showBigPlayButton(player, false);
	  });

	  adUnit.on('AdVolumeChange', function () {
			player.trigger({type: 'trace.event', data: {event: 'vpaid.AdVolumeChange'}});
	    player.trigger('vpaid.AdVolumeChange');
	    var lastVolume = player.volume();
	    adUnit.getAdVolume(function (error, currentVolume) {
	      if (lastVolume !== currentVolume) {
	        if (currentVolume === 0 && lastVolume > 0) {
	          tracker.trackMute();
	        }

	        if (currentVolume > 0 && lastVolume === 0) {
	          tracker.trackUnmute();
	        }

	        player.volume(currentVolume);
	      }
	    });
	  });

	  adUnit.on('AdSizeChange', function () {
		  if (player.vast && player.vast.needSyncPlay) {
			  if (player.paused() !== player.tech_.el_.paused) {
	        // ad uses main content tag
	        if (contentSource != player.tech_.el_.src) {
	          if (player.tech_.el_.paused) {
	            if (window.MoatApiReference) {
	                window.MoatApiReference.dispatchEvent({type: 'AdPaused', adVolume: player.volume()});
	            }
	            notifyPauseToPlayer();
	            playerUtils.showBigPlayButton(player, true);
	          }
	          else {
	            if (window.MoatApiReference) {
	                window.MoatApiReference.dispatchEvent({type: 'AdPlaying', adVolume: player.volume()});
	            }
	            notifyPlayToPlayer();
	            playerUtils.showBigPlayButton(player, false);
	          }
	        }
			  }
			  player.vast.needSyncPlay = false;
		  } 
	  });

	  function addClickThroughDivBlocker(clickThruUrl) {
		  var blocker = createClickThroughDiv(player, clickThruUrl);
		  var iFrame;
		  var iFrameBackButton;

		  player.el().insertBefore(blocker, player.controlBar.el());

		  player.on('fullscreenchange', updateDisplayStyle);

		  function createClickThroughDiv(player, url) {
		    var blocker = window.document.createElement("div");

		    dom.addClass(blocker, 'vast-blocker');

		    if (window.MoatApiReference) {
	    	  window.MoatApiReference.dispatchEvent({type: 'AdClickThru', adVolume: player.volume()});
		    }
	      
		    // create IFrame with back button
		    iFrame = window.document.createElement("iframe");
		    dom.addClass(iFrame, 'vast-blocker');
		    iFrame.src = url;
		    blocker.appendChild(iFrame);
		  
		    iFrameBackButton = window.document.createElement("div");
		    dom.addClass(iFrameBackButton, "vast-back-button");
		    dom.addClass(iFrameBackButton, 'enabled');
		    iFrameBackButton.innerHTML = "Back";
		    iFrameBackButton.id = 'iframeBackButton';
		    blocker.appendChild(iFrameBackButton);
		    iFrameBackButton.addEventListener ("click", function(e) {
			  // show controls
			  var skipButton = window.document.getElementById('adSkipButton');
			  if (skipButton) {
				  skipButton.style.display = 'block'; 
			  }
			  player.controls(true);
			  
			  player.el().removeChild(blocker);
			  resumeAdUnit();
			  
			  if (window.Event.prototype.stopPropagation !== undefined) {
		          e.stopPropagation();
			  }
		    });
			  
		    // hide controls
		    setTimeout(function() {
			  playerUtils.showBigPlayButton(player, false);
		    }, 1);
		    var skipButton = window.document.getElementById('adSkipButton');
		    if (skipButton) {
			  skipButton.style.display = 'none'; 
		    }
		    player.controls(false);

		    return blocker;
		  }

		  function updateDisplayStyle() {
			  if (!player.isFullscreen()) {			  
				  playerUtils.showBigPlayButton(player, true);
				  var skipButton = window.document.getElementById('adSkipButton');
				  if (skipButton) {
					  skipButton.style.display = 'none'; 
				  }
				  player.controls(true);
				  player.el().removeChild(blocker);
				  resumeAdUnit();
			  }
		  }
	  }

	  var updateViewSize = resizeAd.bind(this, player, adUnit, this.VIEW_MODE);
	  var updateViewSizeThrottled = utilities.throttle(updateViewSize, 100);
	  var autoResize = this.settings.autoResize;

	  if (autoResize) {
	    dom.addEventListener(window, 'resize', updateViewSizeThrottled);
	    dom.addEventListener(window, 'orientationchange', updateViewSizeThrottled);
	  }

	  player.on('vast.resize', updateViewSize);
	  player.on('vpaid.pauseAd', pauseAdUnit);
	  player.on('vpaid.resumeAd', resumeAdUnit);
	  player.on('stopAd', stopAdUnit);

	  player.one('vpaid.adEnd', function () {
	    player.off('vast.resize', updateViewSize);
	    player.off('vpaid.pauseAd', pauseAdUnit);
	    player.off('vpaid.resumeAd', resumeAdUnit);
	    player.off('stopAd', stopAdUnit);

	    if (autoResize) {
	      dom.removeEventListener(window, 'resize', updateViewSizeThrottled);
	      dom.removeEventListener(window, 'orientationchange', updateViewSizeThrottled);
	    }
	  });

	  next(null, adUnit, vastResponse);

	  /*** Local Functions ***/
	  function pauseAdUnit() {
	    adUnit.pauseAd(utilities.noop);
	  }

	  function resumeAdUnit() {
	    adUnit.resumeAd(utilities.noop);
	  }
	  
	  function stopAdUnit() {
	    if (adUnit.stopAd) {
	      adUnit.stopAd(utilities.noop);
	    }
	  }
	};

	VPAIDIntegrator.prototype._addSkipButton = function (adUnit, vastResponse, next) {
	  var skipButton;
	  var player = this.player;
	  var tracker = this.tracker;

	  // VIDLA-2084 (publisher-specified SKIP behavior for VPAID creatives)
	  var that = this;
	  var skipOffsetInSec;
	  var duration;
	  var remainingTime;
	  var progressInterval;
	  if (!window._molSettings.disableSkippability) {
		  if (vastResponse.skipoffset && utilities.isNumber(vastResponse.skipoffset)) {
			  skipOffsetInSec = vastResponse.skipoffset / 1000;
			  pubAddSkipButtonToPlayer(player, skipOffsetInSec);
		  }
		  else {
			  // check if publisher had explicitly disable skippability
			  var disableSkippabilityByPublisher = false;
			  if (window._molSettings && window._molSettings.skippable) {
				  if (window._molSettings.skippable.enabled === false) {
					  disableSkippabilityByPublisher = true; 
				  }
				  if (vastResponse.duration && window._molSettings.skippable.videoThreshold && 
					  vastResponse.duration < window._molSettings.skippable.videoThreshold) {
					  disableSkippabilityByPublisher = true; 
				  }
			  }
			  if (!disableSkippabilityByPublisher) {
				  adUnit.on('AdSkippableStateChange', updateSkipButtonState);
				  playerUtils.once(player, ['vast.adEnd', 'vast.adsCancel'], removeSkipButton);
			  }
		  }
	  }

	  next(null, adUnit, vastResponse);

	  /*** Local function ***/
	  function updateSkipButtonState() {
	    player.trigger('vpaid.AdSkippableStateChange');
	    adUnit.getAdSkippableState(function (error, isSkippable) {
	      if (isSkippable) {
	        if (!skipButton) {
	          addSkipButton(player);
	        }
	      } else {
	        removeSkipButton(player);
	      }
	    });
	  }

	  function addSkipButton(player) {
	    skipButton = createSkipButton(player);
	    player.el().appendChild(skipButton);
	  }

	  function removeSkipButton() {
	    dom.remove(skipButton);
	    skipButton = null;
	  }

	  function createSkipButton() {
	    var skipButton = window.document.createElement("div");
	    dom.addClass(skipButton, "vast-skip-button");
	    dom.addClass(skipButton, "enabled");
	    //skipButton.innerHTML = "Skip ad";
	    skipButton.innerHTML = window._molSettings.skipButtonText;
	    skipButton.id = 'adSkipButton';

	    skipButton.onclick = function (e) {
	        adUnit.getAdSkippableState(function (error, isSkippable) {
	            if (isSkippable) {
	                adUnit.skipAd(utilities.noop);//We skip the adUnit
	            } else {
	            	tracker.trackSkip();
	                adUnit.stopAd(utilities.noop);
	            }
	          });
	      //adUnit.skipAd(utilities.noop);//We skip the adUnit

	      //We prevent event propagation to avoid problems with the clickThrough and so on
	      if (window.Event.prototype.stopPropagation !== undefined) {
	        e.stopPropagation();
	      } else {
	        return false;
	      }
	    };

	    return skipButton;
	  }
		
		// VIDLA-2084 (publisher-specified SKIP behavior for VPAID creatives)
		// EN - support publisher SKIP settings
		/*** Local function ***/
		function pubAddSkipButtonToPlayer(player, skipOffset) {
		  var skipButton = pubCreateSkipButton(player);
		  var updateSkipButton = pubUpdateSkipButtonState.bind(that, skipButton, skipOffset);
		
		  player.el().appendChild(skipButton);
		  //player.on('timeupdate', updateSkipButton);
		  progressInterval = setInterval(updateSkipButton, 500);
		
		  playerUtils.once(player, ['vast.adEnd', 'vast.adsCancel'], pubRemoveSkipButton);
		
		  function removeSkipButton() {
		    //player.off('timeupdate', updateSkipButton);
		    dom.remove(skipButton);
		    skipButton = null;
		  }
		
		  function pubRemoveSkipButton() {
			  if (progressInterval) {
				  clearInterval(progressInterval);
				  progressInterval = null;
			  }
			  removeSkipButton();
		  }
		}
		
		function pubCreateSkipButton(player) {
		  var skipButton = window.document.createElement("div");
		  dom.addClass(skipButton, "vast-skip-button");
		  skipButton.style.display = 'none';
		  skipButton.id = 'adSkipButton';
		
		  skipButton.onclick = function (e) {
		    if (dom.hasClass(skipButton, 'enabled')) {
		        adUnit.getAdSkippableState(function (error, isSkippable) {
	                adUnit.skipAd(utilities.noop);//We skip the adUnit
		            if (!isSkippable) {
		            	tracker.trackSkip();
		                adUnit.stopAd(utilities.noop);
		            	setTimeout(function() {
			                player.trigger('vast.adsCancel');
		            	}, 1);
		            }
		          });
		        //adUnit.skipAd(utilities.noop);//We skip the adUnit
		    }
		    playerUtils.showBigPlayButton(player, false);
		
		    //We prevent event propagation to avoid problems with the clickThrough and so on
		    if (window.Event.prototype.stopPropagation !== undefined) {
		      e.stopPropagation();
		    } else {
		      return false;
		    }
		  };
		
		  return skipButton;
		}
		
		function pubUpdateSkipButtonState(skipButton, skipOffset) {
			//var timeLeft = Math.ceil(skipOffset - player.currentTime());
			adUnit.getAdDuration(function(that, dur) {
				if (dur > 0) {
					duration = dur;
				}
			});
			adUnit.getAdRemainingTime(function(that, time) {
				remainingTime = time; 
			});
			if (!duration || !remainingTime) {
				return;
			}
			//console.log("******: skipOffset = " + skipOffset + ", duration = " + duration + ", remainingTime = " + remainingTime);
			//var remainingTime = adUnit._adUnit.getAdRemainingTime();
			var timeLeft = Math.ceil(skipOffset - (duration - remainingTime));
		  if (timeLeft > 0) {
		      skipButton.innerHTML = '<p class="vast-skip-button-text">' + window._molSettings.skipText.replace('%%TIME%%', utilities.toFixedDigits(timeLeft, 2)) + '</p>';
		  } else {
		    if (!dom.hasClass(skipButton, 'enabled')) {
		      dom.addClass(skipButton, 'enabled');
		      skipButton.innerHTML = window._molSettings.skipButtonText;
		    }
		  }
		  var iframeBackButton = window.document.getElementById('iframeBackButton');
		  if (!iframeBackButton) {
			  if (player.isFullscreen() && utilities.isAndroid()) {
				  skipButton.style.display = 'none';
				  return;
			  }
			  skipButton.style.display = 'block';
		  }
		  //skipButton.style.display = 'block';
		}
	};

	VPAIDIntegrator.prototype._linkPlayerControls = function (adUnit, vastResponse, next) {
	  var that = this;
	  linkVolumeControl(this.player, adUnit);
	  linkFullScreenControl(this.player, adUnit, this.VIEW_MODE);

	  next(null, adUnit, vastResponse);

	  /*** Local functions ***/
	  function linkVolumeControl(player, adUnit) {
	    player.on('volumechange', updateAdUnitVolume);
	    adUnit.on('AdVolumeChange', updatePlayerVolume);

	    player.one('vpaid.adEnd', function () {
	      player.off('volumechange', updateAdUnitVolume);
	    });


	    /*** local functions ***/
	    function updateAdUnitVolume() {
	      var vol = player.muted() ? 0 : player.volume();
	      adUnit.setAdVolume(vol, logError);
	    }

	    function updatePlayerVolume() {
		  if (window.MoatApiReference) {
			  	window.MoatApiReference.dispatchEvent({type: 'AdVolumeChange', adVolume: player.volume()});
		  }
	      player.trigger('vpaid.AdVolumeChange');
	      var lastVolume = player.volume();
	      adUnit.getAdVolume(function (error, vol) {
	        if (error) {
	          logError(error);
	        } else {
	          if (lastVolume !== vol) {
	            player.volume(vol);
	          }
	        }
	      });
	    }
	  }

	  function linkFullScreenControl(player, adUnit, VIEW_MODE) {
	    var updateViewSize = resizeAd.bind(that, player, adUnit, VIEW_MODE);

	    player.on('fullscreenchange', updateViewSize);

	    player.one('vpaid.adEnd', function () {
	      player.off('fullscreenchange', updateViewSize);
	    });
	  }
	};

	VPAIDIntegrator.prototype._startAd = function (adUnit, vastResponse, next) {
	  var player = this.player;
	  var alreadyGotAdStarted = adUnit.adStarted;

	  if (alreadyGotAdStarted) {
		  player.trigger('vast.adStart');
		  player.trigger({type: 'trace.event', data: {event: 'vpaid.AdStarted'}});
	  }
	  adUnit.startAd(function (error) {
	    if (!error && !alreadyGotAdStarted) {
	      player.trigger('vast.adStart');
	    }
	    next(error, adUnit, vastResponse);
	  });
	};

	VPAIDIntegrator.prototype._finishPlaying = function (adUnit, vastResponse, next) {
	  var player = this.player;
	  var that = this;
	  adUnit.on('AdStopped', function () {
	    if (window.MoatApiReference) {
	    	  window.MoatApiReference.dispatchEvent({type: 'AdStopped', adVolume: player.volume()});
	     }
	   player.trigger('vpaid.AdStopped');
	   finishPlayingAd(null);
	  });

	  adUnit.on('AdError', function (error) {
	     if (that.impressionTriggered) {
	        finishPlayingAd(null);
	    }
	    else {
	    	var errMsg = error? error.message : 'on VPAIDIntegrator, error while waiting for the adUnit to finish playing';
	        finishPlayingAd(new VASTError(errMsg));
	    }
	  });

	  /*** local functions ***/
	  var needsShowPlayer = this.needsShowPlayer;
	  function finishPlayingAd(error) {
		  that.adFinished = true;
			playerUtils.showBigPlayButton(player, false);
			if (needsShowPlayer) {
				if (that.timeUpdateTimer) {
					clearInterval(that.timeUpdateTimer);
					that.timeUpdateTimer = null;
					var bcTimeDisplay = document.getElementById('bc_time_display');
					if (bcTimeDisplay) {
						player.controlBar.getChild('currentTimeDisplay').el_.removeChild(bcTimeDisplay);
					}
	        showOriginalTimeDisplay(player, true);
	      }
		    player.controlBar.show();
				player.tech_.el_.style.display = 'block';
			}
	    next(error, adUnit, vastResponse);
	  }
	};

	VPAIDIntegrator.prototype._trackError = function trackError(response, errorCode) {
		if (!this.errorHasBeenTracked) {
			this.errorHasBeenTracked = true;
			vastUtil.track(response.errorURLMacros, {ERRORCODE: errorCode || 901});
		}
	};

	function showOriginalTimeDisplay(player, show) {
	  var children = player.controlBar.getChild('currentTimeDisplay').el_.children;
	  for (var i = 0; i < children.length; i++) {
	    if (children[i].id != 'bc_time_display') {
	      children[i].style.display = show ? '' : 'none';
	    }
	  }
	}

	function resizeAd(player, adUnit, VIEW_MODE) {
		var skipButton = document.getElementById('adSkipButton');
	  var tech = player.el().querySelector('.vjs-tech');
	  var dimension = dom.getDimension(tech);
	  var MODE = player.isFullscreen() ? VIEW_MODE.FULLSCREEN : VIEW_MODE.NORMAL;
	  if (MODE === VIEW_MODE.NORMAL) {
	    if (player.vast) {
	      player.vast.needSyncPlay = true;
	    }
		  dimension.width = player.el_.offsetWidth;
		  dimension.height = player.el_.offsetHeight;
		  if (utilities.isAndroid() && skipButton) {
			  skipButton.style.display = 'block';
		  }
	  }
	  if (MODE === VIEW_MODE.FULLSCREEN) {
		  console.log('****** to fullscreen dimension = ' + dimension.width + ',' + dimension.height);
		  if (utilities.isAndroid() && skipButton) {
			  skipButton.style.display = 'none';
		  }
	  }
	  adUnit.resizeAd(dimension.width, dimension.height, MODE, logError);
	}

	function logError(error) {
	  if (error) {
	    logger.error ('ERROR: ' + error.message, error);
	  }
	}

	module.exports = VPAIDIntegrator;

	},{"../../utils/async":38,"../../utils/consoleLogger":39,"../../utils/dom":40,"../../utils/mimetypes":42,"../../utils/playerUtils":43,"../../utils/utilityFunctions":45,"../vast/VASTError":19,"../vast/VASTResponse":21,"../vast/VASTTracker":22,"../vast/vastUtil":28,"./VPAIDAdUnitWrapper":29}],32:[function(require,module,exports){
	'use strict';

	var dom = require('../../utils/dom');

	var element = document.createElement('div');
	element.className = 'vjs-ads-label vjs-control vjs-label-hidden';
	element.innerHTML = 'Advertisement';

	var AdsLabelFactory = function(baseComponent) {
	  return {
	    /** @constructor */
	    init: function init(player, options) {
	      options.el = element;
	      baseComponent.call(this, player, options);

	      // We asynchronously reposition the ads label element
	      setTimeout(function () {
	        var currentTimeComp = player.controlBar &&( player.controlBar.getChild("timerControls") || player.controlBar.getChild("currentTimeDisplay") );
	        if(currentTimeComp) {
	          player.controlBar.el().insertBefore(element, currentTimeComp.el());
	        }
	        dom.removeClass(element, 'vjs-label-hidden');
	      }, 0);
	    },

	    el: function getElement() {
	      return element;
	    }
	  };
	};

	module.exports = AdsLabelFactory;
	},{"../../utils/dom":40}],33:[function(require,module,exports){
	'use strict';

	var baseVideoJsComponent = videojs.getComponent('Component');

	var AdsLabel = require('./ads-label')(baseVideoJsComponent);

	videojs.registerComponent('AdsLabel', videojs.extend(baseVideoJsComponent, AdsLabel));

	},{"./ads-label":32}],34:[function(require,module,exports){
	'use strict';

	/**
	 * The component that shows a black screen until the ads plugin has decided if it can or it can not play the ad.
	 *
	 * Note: In case you wonder why instead of this black poster we don't just show the spinner loader.
	 *       IOS devices do not work well with animations and the browser chrashes from time to time That is why we chose to
	 *       have a secondary black poster.
	 *
	 *       It also makes it much more easier for the users of the plugin since it does not change the default behaviour of the
	 *       spinner and the player works the same way with and without the plugin.
	 *
	 * @param {vjs.Player|Object} player
	 * @param {Object=} options
	 * @constructor
	 */
	var element = document.createElement('div');

	var BlackPosterFactory = function(baseComponent) {
	  return {
	    /** @constructor */
	    init: function init(player, options) {
	      options.el = element;
	      element.className = 'vjs-black-poster';
	      baseComponent.call(this, player, options);

	      var posterImg = player.getChild('posterImage');

	      //We need to do it asynchronously to be sure that the black poster el is on the dom.
	      setTimeout(function() {
	        if(posterImg && player && player.el()) {
	          player.el().insertBefore(element, posterImg.el());
	        }
	      }, 0);
	    },
	    el: function getElement() {
	      return element;
	    }
	  };
	};

	module.exports = BlackPosterFactory;
	},{}],35:[function(require,module,exports){
	'use strict';

	var baseVideoJsComponent = videojs.getComponent('Component');

	var BlackPoster = require('./black-poster')(baseVideoJsComponent);

	videojs.registerComponent('BlackPoster', videojs.extend(baseVideoJsComponent, BlackPoster));

	},{"./black-poster":34}],36:[function(require,module,exports){
	'use strict';

	var VASTClient = require('../ads/vast/VASTClient');
	var VASTError = require('../ads/vast/VASTError');
	var vastUtil = require('../ads/vast/vastUtil');

	var VASTIntegrator = require('../ads/vast/VASTIntegrator');
	var VPAIDIntegrator = require('../ads/vpaid/VPAIDIntegrator');
	var IconIntegrator = require('../ads/icon/IconIntegrator');

	var async = require('../utils/async');
	var dom = require('../utils/dom');
	var playerUtils = require('../utils/playerUtils');
	var utilities = require('../utils/utilityFunctions');
	var ViewabilityTracking = require("../utils/anVideoViewability");

	var logger = require ('../utils/consoleLogger');

	module.exports = function VASTPlugin(options) {
	  var snapshot;
	  var player = this;
	  var vast = new VASTClient({wrapperLimit: options.wrapperLimit});
	  var adsCanceled = false;
	  var playlistNextButton;
	  var defaultOpts = {
	    // maximum amount of time in ms to wait to receive `adsready` from the ad
	    // implementation after play has been requested. Ad implementations are
	    // expected to load any dynamic libraries and make any requests to determine
	    // ad policies for a video during this time.
	    timeout: 500,

	    //TODO:finish this IOS FIX
	    //Whenever you play an add on IOS, the native player kicks in and we loose control of it. On very heavy pages the 'play' event
	    // May occur after the video content has already started. This is wrong if you want to play a preroll ad that needs to happen before the user
	    // starts watching the content. To prevent this usec
	    iosPrerollCancelTimeout: 2000,

	    // maximun amount of time for the ad to actually start playing. If this timeout gets
	    // triggered the ads will be cancelled
	    adCancelTimeout: 3000,

	    // Boolean flag that configures the player to play a new ad before the user sees the video again
	    // the current video
	    playAdAlways: false,

	    // Flag to enable or disable the ads by default.
	    adsEnabled: true,

	    // Boolean flag to enable or disable the resize with window.resize or orientationchange
	    autoResize: true,

	    // verbosity of console logging:
	    // 0 - error
	    // 1 - error, warn
	    // 2 - error, warn, info
	    // 3 - error, warn, info, log
	    // 4 - error, warn, info, log, debug
	    verbosity: 0,
	    
	    // plugin options
	    playsInBreak: false,
	    skipText: 'Skip in %%TIME%% seconds',
	    skipButtonText: 'Skip ad',
	    initialPlayback: "auto",
	    initialAudio: "on",
	    disableClickThru: false,
	    
	    firstPlay: true
	  };

	  var settings = utilities.extend({}, defaultOpts, options || {});
	  
	  if(utilities.isUndefined(settings.adTagUrl) && utilities.isDefined(settings.url)){
	    settings.adTagUrl = settings.url;
	  }

	  if (utilities.isString(settings.adTagUrl)) {
	    settings.adTagUrl = utilities.echoFn(settings.adTagUrl);
	  }
	  
	  if (settings.viewability && settings.viewability.config) {
		  settings.viewabilityTracking = new ViewabilityTracking(player);
	  }
	  
	  window._molSettings = settings;
	  window._timeoutIds = [];
	  
	  window.MoatApiReference = null;

	  if (utilities.isDefined(settings.adTagXML) && !utilities.isFunction(settings.adTagXML)) {
	    return trackAdError(new VASTError('on VideoJS VAST plugin, the passed adTagXML option does not contain a function'));
	  }

	  if (!utilities.isDefined(settings.adTagUrl) && !utilities.isFunction(settings.adTagXML)) {
	    return trackAdError(new VASTError('on VideoJS VAST plugin, missing adTagUrl on options object'));
	  }

	  logger.setVerbosity (settings.verbosity);

	  if (!settings.playsInBreak) {
		  snapshot = playerUtils.getPlayerSnapshot(player);
		  snapshot.playing = true;	// force to play content after ad ended
	  }
	  
	  if (settings.initialPlayback === 'click') {
		  playerUtils.showBigPlayButton(player, true);
	  }

	  playerUtils.prepareForAds(player);

	  if (settings.playAdAlways) {
	    // No matter what happens we play a new ad before the user sees the video again.
	    player.on('vast.contentEnd', function () {
	      setTimeout(function () {
	        player.trigger('vast.reset');
	      }, 0);
	    });
	  }

	  player.on('vast.firstPlay', tryToPlayPrerollAd);

	  player.on('vast.reset', function () {
	    //If we are reseting the plugin, we don't want to restore the content
	    snapshot = null;
	    cancelAds();
	  });

	  player.vast = {
	    isEnabled: function () {
	      return settings.adsEnabled;
	    },

	    enable: function () {
	      settings.adsEnabled = true;
	    },

	    disable: function () {
	      settings.adsEnabled = false;
	    }
	  };

	  return player.vast;

	  /**** Local functions ****/
	  function tryToPlayPrerollAd() {
		// make sure we are going to use same plugin instance twice
		player.off('vast.firstPlay', tryToPlayPrerollAd);
		
		playerUtils.showBigPlayButton(player, false);

		if (settings.initialAudio === 'off') {
			settings.contentVolume = {muted: player.muted(), volume: player.volume()};
			player.muted(true);
		}

	    //We remove the poster to prevent flickering whenever the content starts playing
	    playerUtils.removeNativePoster(player);

	    playerUtils.once(player, ['vast.adsCancel', 'vast.adEnd'], function () {
	    	playerUtils.showBigPlayButton(player, false);
	      removeAdUnit();
	      restoreVideoContent();
	      setTimeout(function () {
	          player.trigger('adFinished');
	      }, 0);
	    });

	    async.waterfall([
	      checkAdsEnabled,
	      preparePlayerForAd,
	      startAdCancelTimeout,
	      playPrerollAd
	    ], function (error, response) {
	      if (error) {
	        trackAdError(error, response);
	      } else {
	        player.trigger('vast.adEnd');
	      }
	    });

	    /*** Local functions ***/

	    function removeAdUnit() {
	      if (player.vast && player.vast.adUnit) {
	        player.vast.adUnit = null; //We remove the adUnit
	        player.vast.VPAID = null;
	      }
	      window._molSettings.firstPlay = false;
	    }

	    function restoreVideoContent() {
	      setupContentEvents();
	      if (snapshot) {
	        playerUtils.restorePlayerSnapshot(player, snapshot);
	        snapshot = null;
	      }
	    }

	    function setupContentEvents() {
	      playerUtils.once(player, ['playing', 'vast.reset', 'vast.firstPlay'], function (evt) {
	        if (evt.type !== 'playing') {
	          return;
	        }

	        player.trigger('vast.contentStart');

	        playerUtils.once(player, ['ended', 'vast.reset', 'vast.firstPlay'], function (evt) {
	          if (evt.type === 'ended') {
	            player.trigger('vast.contentEnd');
	          }
	        });
	      });
	    }

	    function checkAdsEnabled(next) {
	      if (settings.adsEnabled) {
	        return next(null);
	      }
	      next(new VASTError('Ads are not enabled'));
	    }

	    function preparePlayerForAd(next) {
	      if (canPlayPrerollAd()) {
	        //snapshot = playerUtils.getPlayerSnapshot(player);
	        player.pause();
	        addSpinnerIcon();

	        if(player.paused()) {
	          next(null);
	        } else {
	          playerUtils.once(player, ['playing'], function() {
	            player.pause();
	            next(null);
	          });
	        }
	      } else {
	        next(new VASTError('video content has been playing before preroll ad'));
	      }
	    }

	    function canPlayPrerollAd() {
	      return !utilities.isIPhone() || player.currentTime() <= settings.iosPrerollCancelTimeout;
	    }

	    function startAdCancelTimeout(next) {
	      var adCancelTimeoutId;
	      adsCanceled = false;

	      adCancelTimeoutId = setTimeout(function () {
	       	  adCancelTimeoutId = null;
	        trackAdError(new VASTError('timeout while waiting for the video to start playing', 402));
	        playerUtils.showBigPlayButton(player, false);
	        if (player.vast.VPAID) {
	        	player.trigger('vpaid.adEnd');
	        }
	      }, settings.adCancelTimeout);

	      playerUtils.once(player, ['vast.adStart', 'vast.adsCancel', 'clearAdCancelTimeout'], clearAdCancelTimeout);
	      playerUtils.once(player, ['vast.adError', 'vpaid.adEnd', 'vpaid.adError'], function() {
	    	  clearAdCancelTimeout();
	      });

	      /*** local functions ***/
	      function clearAdCancelTimeout() {
	        if (adCancelTimeoutId) {
	          clearTimeout(adCancelTimeoutId);
	          adCancelTimeoutId = null;
	        }
	      }

	      next(null);
	    }

	    function addSpinnerIcon() {
	      dom.addClass(player.el(), 'vjs-vast-ad-loading');
	      playerUtils.once(player, ['vast.adStart', 'vast.adsCancel'], removeSpinnerIcon);
	    }

	    function removeSpinnerIcon() {
	      //IMPORTANT NOTE: We remove the spinnerIcon asynchronously to give time to the browser to start the video.
	      // If we remove it synchronously we see a flash of the content video before the ad starts playing.
	      setTimeout(function () {
	        dom.removeClass(player.el(), 'vjs-vast-ad-loading');
	        // VIDLA-2268 (Safari 11 on Mac - Spinner keeps going on first frame of ad)
			player.loadingSpinner.el_.style.display = 'none';
	      }, 100);
	    }

	  }

	  function cancelAds() {
	    player.trigger('vast.adsCancel');
	    adsCanceled = true;
	  }

	  function playPrerollAd(callback) {
	    async.waterfall([
	      getVastResponse,
	      playAd
	    ], callback);
	  }

	  function getVastResponse(callback) {
	    vast.getVASTResponse(settings.adTagUrl ? settings.adTagUrl() : settings.adTagXML, callback);
	  }

	  function playAd(vastResponse, callback) {
	    //TODO: Find a better way to stop the play. The 'playPrerollWaterfall' ends in an inconsistent situation
	    //If the state is not 'preroll?' it means the ads were canceled therefore, we break the waterfall
	    if (adsCanceled) {
	      return;
	    }

	    /*Copyright (c) 2011-2016 Moat Inc. All Rights Reserved.*/
	    function initMoatTracking(a,c,d,h,k){var f=document.createElement("script"),b=[];c={adData:{ids:c,duration:d,url:k},dispatchEvent:function(a){this.sendEvent?(b&&(b.push(a),a=b,b=!1),this.sendEvent(a)):b.push(a)}};d="_moatApi"+Math.floor(1E8*Math.random());var e,g;try{e=a.ownerDocument,g=e.defaultView||e.parentWindow}catch(l){e=document,g=window}g[d]=c;f.type="text/javascript";a&&a.insertBefore(f,a.childNodes[0]||null);f.src="https://z.moatads.com/"+h+"/moatvideo.js#"+d;return c};
	    window.MoatApiReference = null;
	    if (vastResponse.ads && vastResponse.ads.length > 0 && vastResponse.ads[0].inLine && vastResponse.ads[0].inLine.moat) {
	  	  var ids = {level1: vastResponse.ads[0].inLine.moat.advid,
	  			     level2: vastResponse.ads[0].inLine.moat.cpgid,
	  			     level3: vastResponse.ads[0].inLine.moat.cpid,
	  			     level4: vastResponse.ads[0].inLine.moat.crid};
	  	  if (vastResponse.ads[0].inLine.moat.site_id) {
	  		  ids.slicer1 = vastResponse.ads[0].inLine.moat.site_id;
	  	  }
	  	  //window.MoatApiReference = initMoatTracking(player.el_, ids, player.duration(), vastResponse.ads[0].inLine.moat.partnercode, player.currentSource().src);
	  	  window.MoatApiReference = initMoatTracking(player.el_, ids, player.duration(), 'ninemediavpaid78961164', player.currentSource().src);
	    }
	    if (window._molSettings.viewabilityTracking) {
	  	  window._molSettings.viewabilityTracking.init(window._molSettings.viewability.contextId, 
	  			  player.duration(), player.el_.offsetWidth, player.el_.offsetHeight);
	    }

	    var isAdVPAID  = isVPAID(vastResponse);
	    var adIntegrator = isAdVPAID ? new VPAIDIntegrator(player, settings) : new VASTIntegrator(player);
	    var adFinished = false;
	    if (isAdVPAID) {
	    	player.trigger('clearAdCancelTimeout');
	    }

	    playerUtils.once(player, ['vast.adStart', 'vast.adsCancel'], function (evt) {
	      if (evt.type === 'vast.adStart') {
	        addAdsLabel();
	      }
	    });

	    playerUtils.once(player, ['vast.adEnd', 'vast.adsCancel'], removeAdsLabel);

	    if (utilities.isIDevice()) {
	      preventManualProgress();
	    }

	    player.vast.vastResponse = vastResponse;
	    logger.debug ("calling adIntegrator.playAd() with vastResponse:", vastResponse);
	    player.vast.adUnit = adIntegrator.playAd(vastResponse, callback);
	    player.vast.VPAID = isAdVPAID;

	    var adIconIntegrator;

	    /*** Local functions ****/
	    function addAdsLabel() {
	    	if (window._molSettings.playsInBreak) {
	    		player.on('timeupdate', updateTimeControls);
	    	}
	      if (adFinished || player.controlBar.getChild('AdsLabel')) {
	        return;
	      }

	      player.controlBar.addChild('AdsLabel');
	      if (vastResponse.icons && vastResponse.icons.length > 0) {
	        adIconIntegrator = new IconIntegrator(player);
	        adIconIntegrator.renderIcons(vastResponse.icons, callback);
	      }

	      var elems = document.getElementsByClassName('vjs-next-button');
	      if (elems && elems.length > 0) {
	        playlistNextButton = elems[0];
	        playlistNextButton.style.display = 'none';
	      }
	    }

	    function removeAdsLabel() {
	    	if (window._molSettings.playsInBreak) {
	    		player.off('timeupdate', updateTimeControls);
	    		if (window._molSettings.timeOffset) {
	        showOriginalTimeDisplay(true);
					var bcTimeDisplay = document.getElementById('bc_time_display');
					if (bcTimeDisplay) {
						bcTimeDisplay.style.display = 'none';
					}
	    		}
	    	}
	      player.controlBar.removeChild('AdsLabel');
	      if (playlistNextButton) {
	        playlistNextButton.style.display = '';
	        playlistNextButton = null;
	      }
	      adFinished = true;
	    }

	    function showOriginalTimeDisplay(show) {
	      var children = player.controlBar.getChild('currentTimeDisplay').el_.children;
	      for (var i = 0; i < children.length; i++) {
	        if (children[i].id != 'bc_time_display') {
	          children[i].style.display = show ? '' : 'none';
	        }
	      }
	    }

	    function updateTimeControls() {
	    	var convertTimeToStr = function(time) {
	    		var secs = parseInt(time + 0.5);
	    		var mins = parseInt(secs / 60);
	    		secs -= (mins * 60);
	    		var str = mins.toString() + ':' + (secs > 9 ? ''  : '0') + secs.toString();
	    		return str;
	    	};
	    	
	      if (window._molSettings.breakDuration) {
	        if (player.duration() != window._molSettings.breakDuration) {
	          if (player.duration()) {
	            window._molSettings.realVideoDuration = player.duration();
	          }
	          player.duration(window._molSettings.breakDuration);
	        }
	      }
	      if (window._molSettings.timeOffset) {
	        var bcTimeDisplay = document.getElementById('bc_time_display');
	        if (!bcTimeDisplay) {
	          bcTimeDisplay = document.createElement('div');
	          player.controlBar.getChild('currentTimeDisplay').el_.appendChild(bcTimeDisplay);
	          bcTimeDisplay.id = 'bc_time_display';
	          bcTimeDisplay.class = 'vjs-current-time-display';
	          bcTimeDisplay['aria-live'] = 'off';
	          bcTimeDisplay.innerHTML = '<span class="vjs-control-text"></span>0:00';
	          showOriginalTimeDisplay(false);
	        }
	        else {
	          showOriginalTimeDisplay(false);
	          bcTimeDisplay.style.display = 'block';
	        }
	        var time = player.currentTime() + window._molSettings.timeOffset;
	        bcTimeDisplay.childNodes[1].nodeValue = convertTimeToStr(time);
	      }
	    }

	    function preventManualProgress() {
	      //IOS video clock is very unreliable and we need a 3 seconds threshold to ensure that the user forwarded/rewound the ad
	      var PROGRESS_THRESHOLD = 3;
	      var previousTime = 0;
	      var skipad_attempts = 0;

	      player.on('timeupdate', preventAdSeek);
	      player.on('ended', preventAdSkip);

	      playerUtils.once(player, ['vast.adEnd', 'vast.adsCancel', 'vast.adError'], stopPreventManualProgress);

	      /*** Local functions ***/
	      function preventAdSkip() {
	        // Ignore ended event if the Ad time was not 'near' the end
	        // and revert time to the previous 'valid' time
	        if ((player.duration() - previousTime) > PROGRESS_THRESHOLD) {
	          player.pause(true); // this reduce the video jitter if the IOS skip button is pressed
	          player.play(true); // we need to trigger the play to put the video element back in a valid state
	          player.currentTime(previousTime);
	        }
	      }

	      function preventAdSeek() {
	        var currentTime = player.currentTime();
	        var progressDelta = Math.abs(currentTime - previousTime);
	        if (progressDelta > PROGRESS_THRESHOLD) {
	          skipad_attempts += 1;
	          if (skipad_attempts >= 2) {
	            player.pause(true);
	          }
	          player.currentTime(previousTime);
	        } else {
	          previousTime = currentTime;
	        }
	      }

	      function stopPreventManualProgress() {
	        player.off('timeupdate', preventAdSeek);
	        player.off('ended', preventAdSkip);
	      }
	    }
	  }

	  function trackAdError(error, vastResponse) {
	    player.trigger({type: 'vast.adError', error: error});
	    cancelAds();
	    logger.error ('AD ERROR:', error.message, error, vastResponse);
	  }

	  function isVPAID(vastResponse) {
	    var i, len;
	    var mediaFiles = vastResponse.mediaFiles;
	    for (i = 0, len = mediaFiles.length; i < len; i++) {
	      if (vastUtil.isVPAID(mediaFiles[i])) {
	        return true;
	      }
	    }
	    return false;
	  }
	};

	},{"../ads/icon/IconIntegrator":6,"../ads/vast/VASTClient":18,"../ads/vast/VASTError":19,"../ads/vast/VASTIntegrator":20,"../ads/vast/vastUtil":28,"../ads/vpaid/VPAIDIntegrator":31,"../utils/anVideoViewability":37,"../utils/async":38,"../utils/consoleLogger":39,"../utils/dom":40,"../utils/playerUtils":43,"../utils/utilityFunctions":45}],37:[function(require,module,exports){
	/**
	 * Viewability Wrapper
	 */

	//var ANVideoViewabilityTracker = require("an-video-viewability");//viewability library
	var ANVideoViewabilityTracker = null;
	var logger = require("./consoleLogger");
	var debug = function (message) {
	    logger.debug(message);
	};
	var info = function (message) {
	    logger.info(message);
	};

	var html5VideoViewability = function (player_) {

		var player = player_;
	    var tracker = null;
	    var mappedActions = {
	        "start": "start",
	        "expand": "expand",
	        "collapse": "collapse",
	        "unmute": "sound_on",
	        "mute": "sound_off",
	        "pause": "pause",
	        "resume": "resume",
	        "ad-click": "click",
	        "skip": "stop",
	        "complete": "stop",
	        "fullscreen": "fullscreen",
	        "exitFullscreen": "exitFullscreen"
	    };

	    var fireOnceEvents = {
	        "start": false,
	        "skip": false,
	        "complete": false
	    };

	    var getConfig = function () {
	        return window._molSettings.viewability && window._molSettings.viewability.config;
	    };

	    var getPlayerDOMElement = function () {
	        return player.el_;
	    };

	    var getVideoInfo = function (duration, width, height) {
	        return {duration: duration, w: width, h: height};
	    };

		// Using callback for logs helps getting a right logger in each app
		var loggerCallback = function (_level, _message) {
			if (_level && _level === "debug") {
				debug(_message);
			} else {
				info(_message);
			}
	    };

	    this.init = function (contextId, duration, width, height) {
	        if (!ANVideoViewabilityTracker) {
	            return;
	        }   
	        info("initialize with duration: " + duration + ", width: " + width + ", height: " + height);
	        try {
	            tracker = new ANVideoViewabilityTracker(
					getConfig(),
	                getPlayerDOMElement(),
	                getVideoInfo(duration, width, height), // The duration of the video ad
	                contextId,
					loggerCallback
	            );
	            this.isReady = true;
	        } catch (ex) {
	            debug("error on viewability library: ");
	            debug(ex);
	        }

	    };

	    this.invokeEvent = function (event_) {
	        if (!ANVideoViewabilityTracker) {
	            return;
	        }
	        if (this.isReady && event_ && mappedActions[event_]) {
	            try {
	                if(fireOnceEvents.hasOwnProperty(event_)){
	                    if(fireOnceEvents[event_]){
	                        info("supressing fireOnceEvents event as it is already fired once by viewability library: " + mappedActions[event_]);
	                        return;
	                    } else{
	                        fireOnceEvents[event_] = true; // mark that the event has been fired.
	                    }
	                }
	                info("event invoked by viewability library: " + mappedActions[event_]);
	                tracker.notifyEvent(mappedActions[event_]);
	            } catch (ex) {
	                debug("error on viewability library: ");
	                debug(ex);
	            }
	        }
	    };

	    this.isReady = false;


	};


	module.exports = html5VideoViewability;
	},{"./consoleLogger":39}],38:[function(require,module,exports){
	//Small subset of async

	var utilities = require('./utilityFunctions');

	var async = {};

	async.setImmediate = function (fn) {
	  setTimeout(fn, 0);
	};

	async.iterator = function (tasks) {
	  var makeCallback = function (index) {
	    var fn = function () {
	      if (tasks.length) {
	        tasks[index].apply(null, arguments);
	      }
	      return fn.next();
	    };
	    fn.next = function () {
	      return (index < tasks.length - 1) ? makeCallback(index + 1) : null;
	    };
	    return fn;
	  };
	  return makeCallback(0);
	};


	async.waterfall = function (tasks, callback) {
	  callback = callback || function () { };
	  if (!utilities.isArray(tasks)) {
	    var err = new Error('First argument to waterfall must be an array of functions');
	    return callback(err);
	  }
	  if (!tasks.length) {
	    return callback();
	  }
	  var wrapIterator = function (iterator) {
	    return function (err) {
	      if (err) {
	        callback.apply(null, arguments);
	        callback = function () {
	        };
	      }
	      else {
	        var args = Array.prototype.slice.call(arguments, 1);
	        var next = iterator.next();
	        if (next) {
	          args.push(wrapIterator(next));
	        }
	        else {
	          args.push(callback);
	        }
	        async.setImmediate(function () {
	          iterator.apply(null, args);
	        });
	      }
	    };
	  };
	  wrapIterator(async.iterator(tasks))();
	};

	async.when = function (condition, callback) {
	  if (!utilities.isFunction(callback)) {
	    throw new Error("async.when error: missing callback argument");
	  }

	  var isAllowed = utilities.isFunction(condition) ? condition : function () {
	    return !!condition;
	  };

	  return function () {
	    var args = utilities.arrayLikeObjToArray(arguments);
	    var next = args.pop();

	    if (isAllowed.apply(null, args)) {
	      return callback.apply(this, arguments);
	    }

	    args.unshift(null);
	    return next.apply(null, args);
	  };
	};

	module.exports = async;


	},{"./utilityFunctions":45}],39:[function(require,module,exports){
	/*jshint unused:false */
	"use strict";

	var _verbosity = 0;
	var _prefix = "[videojs-vast-vpaid] ";

	function setVerbosity (v)
	{
	    _verbosity = v;
	}

	function handleMsg (method, args)
	{
	    if ((args.length) > 0 && (typeof args[0] === 'string'))
	    {
	        args[0] = _prefix + args[0];
	    }

	    if (method.apply)
	    {
	        method.apply (console, Array.prototype.slice.call(args));
	    }
	    else
	    {
	        method (Array.prototype.slice.call(args));
	    }
	}

	function debug ()
	{
	    if (_verbosity < 4)
	    {
	        return;
	    }

	    if (typeof console.debug === 'undefined')
	    {
	        // IE 10 doesn't have a console.debug() function
	        handleMsg (console.log, arguments);
	    }
	    else
	    {
	        handleMsg (console.debug, arguments);
	    }
	}

	function log ()
	{
	    if (_verbosity < 3)
	    {
	        return;
	    }

	    handleMsg (console.log, arguments);
	}

	function info ()
	{
	    if (_verbosity < 2)
	    {
	        return;
	    }

	    handleMsg (console.info, arguments);
	}


	function warn ()
	{
	    if (_verbosity < 1)
	    {
	        return;
	    }

	    handleMsg (console.warn, arguments);
	}

	function error ()
	{
	    handleMsg (console.error, arguments);
	}

	var consoleLogger = {
	    setVerbosity: setVerbosity,
	    debug: debug,
	    log: log,
	    info: info,
	    warn: warn,
	    error: error
	};

	if ((typeof (console) === 'undefined') || !console.log)
	{
	    // no console available; make functions no-op
	    consoleLogger.debug = function () {};
	    consoleLogger.log = function () {};
	    consoleLogger.info = function () {};
	    consoleLogger.warn = function () {};
	    consoleLogger.error = function () {};
	}

	module.exports = consoleLogger;
	},{}],40:[function(require,module,exports){
	'use strict';

	var utilities = require('./utilityFunctions');

	var dom = {};

	dom.isVisible = function isVisible(el) {
	  var style = window.getComputedStyle(el);
	  return style.visibility !== 'hidden';
	};

	dom.isHidden = function isHidden(el) {
	  var style = window.getComputedStyle(el);
	  return style.display === 'none';
	};

	dom.isShown = function isShown(el) {
	  return !dom.isHidden(el);
	};

	dom.hide = function hide(el) {
	  el.__prev_style_display_ = el.style.display;
	  el.style.display = 'none';
	};

	dom.show = function show(el) {
	  if (dom.isHidden(el)) {
	    el.style.display = el.__prev_style_display_;
	  }
	  el.__prev_style_display_ = undefined;
	};

	dom.hasClass = function hasClass(el, cssClass) {
	  var classes, i, len;

	  if (utilities.isNotEmptyString(cssClass)) {
	    if (el.classList) {
	      return el.classList.contains(cssClass);
	    }

	    classes = utilities.isString(el.getAttribute('class')) ? el.getAttribute('class').split(/\s+/) : [];
	    cssClass = (cssClass || '');

	    for (i = 0, len = classes.length; i < len; i += 1) {
	      if (classes[i] === cssClass) {
	        return true;
	      }
	    }
	  }
	  return false;
	};

	dom.addClass = function (el, cssClass) {
	  var classes;

	  if (utilities.isNotEmptyString(cssClass)) {
	    if (el.classList) {
	      return el.classList.add(cssClass);
	    }

	    classes = utilities.isString(el.getAttribute('class')) ? el.getAttribute('class').split(/\s+/) : [];
	    if (utilities.isString(cssClass) && utilities.isNotEmptyString(cssClass.replace(/\s+/, ''))) {
	      classes.push(cssClass);
	      el.setAttribute('class', classes.join(' '));
	    }
	  }
	};

	dom.removeClass = function (el, cssClass) {
	  var classes;

	  if (utilities.isNotEmptyString(cssClass)) {
	    if (el.classList) {
	      return el.classList.remove(cssClass);
	    }

	    classes = utilities.isString(el.getAttribute('class')) ? el.getAttribute('class').split(/\s+/) : [];
	    var newClasses = [];
	    var i, len;
	    if (utilities.isString(cssClass) && utilities.isNotEmptyString(cssClass.replace(/\s+/, ''))) {

	      for (i = 0, len = classes.length; i < len; i += 1) {
	        if (cssClass !== classes[i]) {
	          newClasses.push(classes[i]);
	        }
	      }
	      el.setAttribute('class', newClasses.join(' '));
	    }
	  }
	};

	dom.addEventListener = function addEventListener(el, type, handler) {
	  if(utilities.isArray(el)){
	    utilities.forEach(el, function(e) {
	      dom.addEventListener(e, type, handler);
	    });
	    return;
	  }

	  if(utilities.isArray(type)){
	    utilities.forEach(type, function(t) {
	      dom.addEventListener(el, t, handler);
	    });
	    return;
	  }

	  if (el.addEventListener) {
	    el.addEventListener(type, handler, false);
	  } else if (el.attachEvent) {
	    // WARNING!!! this is a very naive implementation !
	    // the event object that should be passed to the handler
	    // would not be there for IE8
	    // we should use "window.event" and then "event.srcElement"
	    // instead of "event.target"
	    el.attachEvent("on" + type, handler);
	  }
	};

	dom.removeEventListener = function removeEventListener(el, type, handler) {
	  if(utilities.isArray(el)){
	    utilities.forEach(el, function(e) {
	      dom.removeEventListener(e, type, handler);
	    });
	    return;
	  }

	  if(utilities.isArray(type)){
	    utilities.forEach(type, function(t) {
	      dom.removeEventListener(el, t, handler);
	    });
	    return;
	  }

	  if (el.removeEventListener) {
	    el.removeEventListener(type, handler, false);
	  } else if (el.detachEvent) {
	    el.detachEvent("on" + type, handler);
	  } else {
	    el["on" + type] = null;
	  }
	};

	dom.dispatchEvent = function dispatchEvent(el, event) {
	  if (el.dispatchEvent) {
	    el.dispatchEvent(event);
	  } else {
	    el.fireEvent("on" + event.eventType, event);
	  }
	};

	dom.isDescendant = function isDescendant(parent, child) {
	  var node = child.parentNode;
	  while (node !== null) {
	    if (node === parent) {
	      return true;
	    }
	    node = node.parentNode;
	  }
	  return false;
	};

	dom.getTextContent = function getTextContent(el){
	  return el.textContent || el.text;
	};

	dom.prependChild = function prependChild(parent, child) {
	  if(child.parentNode){
	    child.parentNode.removeChild(child);
	  }
	  return parent.insertBefore(child, parent.firstChild);
	};

	dom.remove = function removeNode(node){
	  if(node && node.parentNode){
	    node.parentNode.removeChild(node);
	  }
	};

	dom.isDomElement = function isDomElement(o) {
	  return o instanceof Element;
	};

	dom.click = function(el, handler) {
	  dom.addEventListener(el, 'click', handler);
	};

	dom.once = function(el, type, handler) {
	  function handlerWrap() {
	    handler.apply(null, arguments);
	    dom.removeEventListener(el, type, handlerWrap);
	  }

	  dom.addEventListener(el, type, handlerWrap);
	};

	//Note: there is no getBoundingClientRect on iPad so we need a fallback
	dom.getDimension = function getDimension(element) {
	  var rect;

	  //On IE9 and below getBoundingClientRect does not work consistently
	  if(!utilities.isOldIE() && element.getBoundingClientRect) {
	    rect = element.getBoundingClientRect();
	    return {
	      width: rect.width,
	      height: rect.height
	    };
	  }

	  return {
	    width: element.offsetWidth,
	    height: element.offsetHeight
	  };
	};

	module.exports = dom;
	},{"./utilityFunctions":45}],41:[function(require,module,exports){
	'use strict';

	var urlUtils = require('./urlUtils');
	var utilities = require('./utilityFunctions');

	function HttpRequestError(message) {
	  this.message = 'HttpRequest Error: ' + (message || '');
	}
	HttpRequestError.prototype = new Error();
	HttpRequestError.prototype.name = "HttpRequest Error";

	function HttpRequest(createXhr) {
	  if (!utilities.isFunction(createXhr)) {
	    throw new HttpRequestError('Missing XMLHttpRequest factory method');
	  }

	  this.createXhr = createXhr;
	}

	HttpRequest.prototype.run = function (method, url, callback, options) {
	  sanityCheck(url, callback, options);
	  var timeout, timeoutId;
	  var xhr = this.createXhr();
	  options = options || {};
	  timeout = utilities.isNumber(options.timeout) ? options.timeout : 0;

	  xhr.open(method, urlUtils.urlParts(url).href, true);

	  if (options.headers) {
	    setHeaders(xhr, options.headers);
	  }

	  if (options.withCredentials) {
	    xhr.withCredentials = true;
	  }

	  xhr.onload = function () {
	    var statusText, response, status;

	    /**
	     * The only way to do a secure request on IE8 and IE9 is with the XDomainRequest object. Unfortunately, microsoft is
	     * so nice that decided that the status property and the 'getAllResponseHeaders' method where not needed so we have to
	     * fake them. If the request gets done with an XDomainRequest instance, we will assume that there are no headers and
	     * the status will always be 200. If you don't like it, DO NOT USE ANCIENT BROWSERS!!!
	     *
	     * For mor info go to: https://msdn.microsoft.com/en-us/library/cc288060(v=vs.85).aspx
	     */
	    if (!xhr.getAllResponseHeaders) {
	      xhr.getAllResponseHeaders = function () {
	        return null;
	      };
	    }

	    if (!xhr.status) {
	      xhr.status = 200;
	    }

	    if (utilities.isDefined(timeoutId)) {
	      clearTimeout(timeoutId);
	      timeoutId = undefined;
	    }

	    statusText = xhr.statusText || '';

	    // responseText is the old-school way of retrieving response (supported by IE8 & 9)
	    // response/responseType properties were introduced in XHR Level2 spec (supported by IE10)
	    response = ('response' in xhr) ? xhr.response : xhr.responseText;

	    // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)
	    status = xhr.status === 1223 ? 204 : xhr.status;

	    callback(
	      status,
	      response,
	      xhr.getAllResponseHeaders(),
	      statusText);
	  };

	  xhr.onerror = requestError;
	  xhr.onabort = requestError;

	  xhr.send();

	  if (timeout > 0) {
	    timeoutId = setTimeout(function () {
	      xhr && xhr.abort();
	    }, timeout);
	  }

	  function sanityCheck(url, callback, options) {
	    if (!utilities.isString(url) || utilities.isEmptyString(url)) {
	      throw new HttpRequestError("Invalid url '" + url + "'");
	    }

	    if (!utilities.isFunction(callback)) {
	      throw new HttpRequestError("Invalid handler '" + callback + "' for the http request");
	    }

	    if (utilities.isDefined(options) && !utilities.isObject(options)) {
	      throw new HttpRequestError("Invalid options map '" + options + "'");
	    }
	  }

	  function setHeaders(xhr, headers) {
	    utilities.forEach(headers, function (value, key) {
	      if (utilities.isDefined(value)) {
	        xhr.setRequestHeader(key, value);
	      }
	    });
	  }

	  function requestError() {
	    callback(-1, null, null, '');
	  }
	};

	HttpRequest.prototype.get = function (url, callback, options) {
	  this.run('GET', url, processResponse, options);

	  function processResponse(status, response, headersString, statusText) {
	    if (isSuccess(status)) {
	      callback(null, response, status, headersString, statusText);
	    } else {
	      callback(new HttpRequestError(statusText), response, status, headersString, statusText);
	    }
	  }

	  function isSuccess(status) {
	    return 200 <= status && status < 300;
	  }
	};

	function createXhr() {
	  var xhr = new XMLHttpRequest();
	  if (!("withCredentials" in xhr)) {
	    // XDomainRequest for IE.
	    xhr = new XDomainRequest();
	  }
	  return xhr;
	}

	var http = new HttpRequest(createXhr);

	module.exports = {
	  http: http,
	  HttpRequest: HttpRequest,
	  HttpRequestError: HttpRequestError,
	  createXhr: createXhr
	};

	},{"./urlUtils":44,"./utilityFunctions":45}],42:[function(require,module,exports){
	'use strict';

	module.exports = {
	  html5: [
	    'text/javascript',
	    'text/javascript1.0',
	    'text/javascript1.2',
	    'text/javascript1.4',
	    'text/jscript',
	    'application/javascript',
	    'application/x-javascript',
	    'text/ecmascript',
	    'text/ecmascript1.0',
	    'text/ecmascript1.2',
	    'text/ecmascript1.4',
	    'text/livescript',
	    'application/ecmascript',
	    'application/x-ecmascript',
	  ],

	  flash: [
	    'application/x-shockwave-flash'
	  ],
	};

	},{}],43:[function(require,module,exports){
	'use strict';

	var dom = require('./dom');
	var utilities = require('./utilityFunctions');

	var playerUtils = {};

	/**
	 * Returns an object that captures the portions of player state relevant to
	 * video playback. The result of this function can be passed to
	 * restorePlayerSnapshot with a player to return the player to the state it
	 * was in when this function was invoked.
	 * @param {object} player The videojs player object
	 */
	playerUtils.getPlayerSnapshot = function getPlayerSnapshot(player) {
	  var tech = player.el().querySelector('.vjs-tech');

	  var snapshot = {
	    ended: player.ended(),
	    src: player.currentSrc(),
	    currentTime: player.currentTime(),
	    type: player.currentType(),
	    playing: !player.paused(),
	    suppressedTracks: getSuppressedTracks(player)
	  };

	  if (tech) {
	    snapshot.nativePoster = tech.poster;
	    snapshot.style = tech.getAttribute('style');
	  }

		var els = document.getElementsByClassName('vjs-dock-text');
		if (els && els.length > 0) {
			snapshot.dockText = els[0];
			snapshot.dockText.style.display = 'none';
		}
	  return snapshot;

	  /**** Local Functions ****/
	  function getSuppressedTracks(player) {
	    var tracks = player.remoteTextTracks ? player.remoteTextTracks() : [];

	    if (tracks && utilities.isArray(tracks.tracks_)) {
	      tracks = tracks.tracks_;
	    }

	    if (!utilities.isArray(tracks)) {
	      tracks = [];
	    }

	    var suppressedTracks = [];
	    tracks.forEach(function (track) {
	      suppressedTracks.push({
	        track: track,
	        mode: track.mode
	      });
	      track.mode = 'disabled';
	    });

	    return suppressedTracks;
	  }
	};

	/**
	 * Attempts to modify the specified player so that its state is equivalent to
	 * the state of the snapshot.
	 * @param {object} snapshot - the player state to apply
	 */
	playerUtils.restorePlayerSnapshot = function restorePlayerSnapshot(player, snapshot) {
	  var tech = player.el().querySelector('.vjs-tech');
	  var attempts = 20; // the number of remaining attempts to restore the snapshot

	  if (snapshot.nativePoster) {
	    tech.poster = snapshot.nativePoster;
	  }

	  if ('style' in snapshot) {
	    // overwrite all css style properties to restore state precisely
	    tech.setAttribute('style', snapshot.style || '');
	  }

		if (snapshot.dockText) {
			snapshot.dockText.style.display = 'block';
		}

	  //if (hasSrcChanged(player, snapshot)) {

	    // on ios7, fiddling with textTracks too early will cause safari to crash
	    player.one('contentloadedmetadata', restoreTracks);

	    player.one('canplay', tryToResume);
	    ensureCanplayEvtGetsFired();

	    // if the src changed for ad playback, reset it
	    player.src({src: snapshot.src, type: snapshot.type});

	    // safari requires a call to `load` to pick up a changed source
	    // player.load();	// Safari 11 no more requires 'load'. Firefox doesn't like 'load' call for already loaded content (in case of AdLoaded timeout).

	  /*} else {
	    restoreTracks();

	    if (snapshot.playing) {
	      player.play();
	    }
	  }*/

	  /*** Local Functions ***/

	  /**
	   * Sometimes firefox does not trigger the 'canplay' evt.
	   * This code ensure that it always gets triggered triggered.
	   */
	  function ensureCanplayEvtGetsFired() {
	    var timeoutId = setTimeout(function() {
	      player.trigger('canplay');
	    }, 1000);

	    player.one('canplay', function(){
	      clearTimeout(timeoutId);
	    });
	  }

	  /**
	   * Determine whether the player needs to be restored to its state
	   * before ad playback began. With a custom ad display or burned-in
	   * ads, the content player state hasn't been modified and so no
	   * restoration is required
	   */
	  /*function hasSrcChanged(player, snapshot) {
	    if (player.src()) {
	      return player.src() !== snapshot.src;
	    }
	    // the player was configured through source element children
	    return player.currentSrc() !== snapshot.src;
	  }*/

	  function restoreTracks() {
	    var suppressedTracks = snapshot.suppressedTracks;
	    suppressedTracks.forEach(function (trackSnapshot) {
	      trackSnapshot.track.mode = trackSnapshot.mode;
	    });
	  }

	  /**
	   * Determine if the video element has loaded enough of the snapshot source
	   * to be ready to apply the rest of the state
	   */
	  function tryToResume() {

	    // if some period of the video is seekable, resume playback
	    // otherwise delay a bit and then check again unless we're out of attempts

		  // safari 11 requires call `play` to make seek available
	      player.play();

	    if (!playerUtils.isReadyToResume(player) && attempts--) {
	      setTimeout(tryToResume, 50);
	    } else {
	      try {
	        //console.log('****** MOL try navigate after attempts (' + attempts + ')');
	        if(player.currentTime() !== snapshot.currentTime) {
	          if (snapshot.playing) { // if needed restore playing status after seek completes
	            player.one('seeked', function() {
	              //console.log('****** MOL play main content (' + player.currentTime() + ') by seek');
	              player.play();
	            });
	          }
	          //console.log('****** MOL navigate main content to ' + snapshot.currentTime);
	          player.currentTime(snapshot.currentTime);

	        } else if (snapshot.playing) {
	          //console.log('****** MOL play main content (' + player.currentTime() + ')');
	          // if needed and no seek has been performed, restore playing status immediately
	          player.play();
	        }

	      } catch (e) {
	        videojs.log.warn('Failed to resume the content after an advertisement', e);
	      }
	    }
	  }
	};

	playerUtils.isReadyToResume = function (player) {

	  if (player.readyState() > 1) {
	    // some browsers and media aren't "seekable".
	    // readyState greater than 1 allows for seeking without exceptions
	    //console.log('****** MOL ready to resume player state ' + player.readyState());
	    return true;
	  }
	  if (utilities.isIE11()) {
	    return false;
	  }

	  if (player.seekable() === undefined) {
	    // if the player doesn't expose the seekable time ranges, try to
	    // resume playback immediately
	    //console.log('****** MOL ready to resume player.seekable() === undefined');
	    return true;
	  }

	  if (player.seekable().length > 0) {
	    // if some period of the video is seekable, resume playback
	    //console.log('****** MOL ready to resume player.seekable().length = ' + player.seekable().length);
	    return true;
	  }

	  return false;
	};

	/**
	 * This function prepares the player to display ads.
	 * Adding convenience events like the 'vast.firsPlay' that gets fired when the video is first played
	 * and ads the blackPoster to the player to prevent content from being displayed before the preroll ad.
	 *
	 * @param player
	 */
	playerUtils.prepareForAds = function (player) {
	  var blackPoster = player.addChild('blackPoster');
	  //var _firstPlay = true;
	  var volumeSnapshot;


	  monkeyPatchPlayerApi();

	  player.on('play', tryToTriggerFirstPlay);
	  player.on('vast.reset', resetFirstPlay);//Every time we change the sources we reset the first play.
	  player.on('vast.firstPlay', restoreContentVolume);
	  player.on('error', hideBlackPoster);//If there is an error in the player we remove the blackposter to show the err msg
	  player.on('vast.adStart', hideBlackPoster);
	  player.on('vast.adsCancel', hideBlackPoster);
	  player.on('vast.adError', hideBlackPoster);
	  player.on('vast.adStart', addStyles);
	  player.on('vast.adEnd', removeStyles);
	  player.on('vast.adsCancel', removeStyles);

	  // VIDLA-2465 - hide vjs error dialog when ad running
	  var errorDialog;
	  var dlgs = document.getElementsByClassName('vjs-error-display');
	  if (dlgs && dlgs.length > 0) {
		  errorDialog = dlgs[0];
		  errorDialog.style.setProperty('display', 'none', 'important');
	  }
	  
	  /*** Local Functions ***/

	  /**
	   What this function does is ugly and horrible and I should think twice before calling myself a good developer. With that said,
	   it is the best solution I could find to mute the video until the 'play' event happens (on mobile devices) and the plugin can decide whether
	   to play the ad or not.

	   We also need this monkeypatch to be able to pause and resume an ad using the player's API

	   If you have a better solution please do tell me.
	   */
	  function monkeyPatchPlayerApi() {

	    /**
	     * Monkey patch needed to handle firstPlay and resume of playing ad.
	     *
	     * @param callOrigPlay necessary flag to prevent infinite loop when you are restoring a VAST ad.
	     * @returns {player}
	     */
	    var origPlay = player.play;
	    player.play = function (callOrigPlay) {
	      var that = this;

	      if (isFirstPlay()) {
	        firstPlay();
	      } else {
	        resume(callOrigPlay);
	      }

	      return this;

	      /*** local functions ***/
	      function firstPlay() {
	        if (!utilities.isIPhone()) {
	          if (!volumeSnapshot) {
	              volumeSnapshot = saveVolumeSnapshot();
	          }
	          player.muted(true);
	        }

	        origPlay.apply(that, arguments);
	      }

	      function resume(callOrigPlay) {
	        if (isAdPlaying() && !callOrigPlay) {
	          player.vast.adUnit.resumeAd();
	        } else {
	        	if (!isVpaidPlaying()) {
	                origPlay.apply(that, arguments);
	        	}
	        }
	      }
	    };


	    /**
	     * Needed monkey patch to handle pause of playing ad.
	     *
	     * @param callOrigPlay necessary flag to prevent infinite loop when you are pausing a VAST ad.
	     * @returns {player}
	     */
	    var origPause = player.pause;
	    player.pause = function (callOrigPause) {
	      if (isAdPlaying() && !callOrigPause) {
	        player.vast.adUnit.pauseAd();
	      } else {
	      	if (!isVpaidPlaying()) {
	      		origPause.apply(this, arguments);
	      	}
	      }
	      return this;
	    };


	    /**
	     * Needed monkey patch to handle paused state of the player when ads are playing.
	     *
	     * @param callOrigPlay necessary flag to prevent infinite loop when you are pausing a VAST ad.
	     * @returns {player}
	     */
	    var origPaused = player.paused;
	    player.paused = function (callOrigPaused) {
	      if (isAdPlaying() && !callOrigPaused) {
	        return player.vast.adUnit.isPaused();
	      }
	      return origPaused.apply(this, arguments);
	    };
	  }
	  
	  function isVpaidPlaying() {
		  return player.vast && player.vast.VPAID;
	  }

	  function isAdPlaying() {
	    return player.vast && player.vast.adUnit;
	  }

	  function tryToTriggerFirstPlay() {
	    if (isFirstPlay()) {
	  	  window._molSettings.firstPlay = false;
	      //_firstPlay = false;
	      player.trigger('vast.firstPlay');
	    }
	  }

	  function resetFirstPlay() {
		  window._molSettings.firstPlay = true;
		    //_firstPlay = true;
	    blackPoster.show();
	    restoreContentVolume();
	  }

	  function isFirstPlay() {
		  return window._molSettings.firstPlay;
		    //return _firstPlay;
	  }

	  function saveVolumeSnapshot() {
	    return {
	      muted: player.muted(),
	      volume: player.volume()
	    };
	  }

	  function restoreContentVolume() {
	    if (volumeSnapshot) {
	      //player.currentTime(0);
	      restoreVolumeSnapshot(volumeSnapshot);
	      volumeSnapshot = null;
	    }
	  }

	  function restoreVolumeSnapshot(snapshot) {
	    if (utilities.isObject(snapshot)) {
	      player.volume(snapshot.volume);
	      player.muted(snapshot.muted);
	    }
	  }

	  function hideBlackPoster() {
	    if (!dom.hasClass(blackPoster.el(), 'vjs-hidden')) {
	      blackPoster.hide();
	    }
	  }

	  function addStyles() {
	    dom.addClass(player.el(), 'vjs-ad-playing');
	  }

	  function removeStyles() {
		  player.off('play', tryToTriggerFirstPlay);
		  player.off('vast.reset', resetFirstPlay);//Every time we change the sources we reset the first play.
		  player.off('vast.firstPlay', restoreContentVolume);
		  player.off('error', hideBlackPoster);//If there is an error in the player we remove the blackposter to show the err msg
		  player.off('vast.adStart', hideBlackPoster);
		  player.off('vast.adsCancel', hideBlackPoster);
		  player.off('vast.adError', hideBlackPoster);
		  player.off('vast.adStart', addStyles);
		  player.off('vast.adEnd', removeStyles);
		  player.off('vast.adsCancel', removeStyles);
		  
	      dom.removeClass(player.el(), 'vjs-ad-playing');
		  dom.removeClass(player.controlBar.playToggle.el(), 'vjs-ended');
		  
		  if (errorDialog) {
			  setTimeout(function() {
				  errorDialog.style.removeProperty('display');
			  }, 500);
		  }
	  }
	};

	/**
	 * Remove the poster attribute from the video element tech, if present. When
	 * reusing a video element for multiple videos, the poster image will briefly
	 * reappear while the new source loads. Removing the attribute ahead of time
	 * prevents the poster from showing up between videos.
	 * @param {object} player The videojs player object
	 */
	playerUtils.removeNativePoster = function (player) {
	  var tech = player.el().querySelector('.vjs-tech');
	  if (tech) {
	    tech.removeAttribute('poster');
	  }
	};

	/**
	 * Helper function to listen to many events until one of them gets fired, then we
	 * execute the handler and unsubscribe all the event listeners;
	 *
	 * @param player specific player from where to listen for the events
	 * @param events array of events
	 * @param handler function to execute once one of the events fires
	 */
	playerUtils.once = function once(player, events, handler) {
	  function listener() {
	    handler.apply(null, arguments);

	    events.forEach(function (event) {
	      player.off(event, listener);
	    });
	  }

	  events.forEach(function (event) {
	    player.on(event, listener);
	  });
	};

	//plugin utils
	playerUtils.showBigPlayButton = function(player, show) {
		var button = player.bigPlayButton.el_;
		if (button) {
			if (show) {
				button.style.display = 'block';
				button.style.zIndex = 99999;
			}
			else {
				button.style.display = 'none';
				button.style.zIndex = '';
			}
		}
	};

	module.exports = playerUtils;
	},{"./dom":40,"./utilityFunctions":45}],44:[function(require,module,exports){
	'use strict';

	var utilities = require('./utilityFunctions');

	/**
	 *
	 * IMPORTANT NOTE: This function comes from angularJs and was originally called urlResolve
	 *                 you can take a look at the original code here https://github.com/angular/angular.js/blob/master/src/ng/urlUtils.js
	 *
	 * Implementation Notes for non-IE browsers
	 * ----------------------------------------
	 * Assigning a URL to the href property of an anchor DOM node, even one attached to the DOM,
	 * results both in the normalizing and parsing of the URL.  Normalizing means that a relative
	 * URL will be resolved into an absolute URL in the context of the application document.
	 * Parsing means that the anchor node's host, hostname, protocol, port, pathname and related
	 * properties are all populated to reflect the normalized URL.  This approach has wide
	 * compatibility - Safari 1+, Mozilla 1+, Opera 7+,e etc.  See
	 * http://www.aptana.com/reference/html/api/HTMLAnchorElement.html
	 *
	 * Implementation Notes for IE
	 * ---------------------------
	 * IE >= 8 and <= 10 normalizes the URL when assigned to the anchor node similar to the other
	 * browsers.  However, the parsed components will not be set if the URL assigned did not specify
	 * them.  (e.g. if you assign a.href = "foo", then a.protocol, a.host, etc. will be empty.)  We
	 * work around that by performing the parsing in a 2nd step by taking a previously normalized
	 * URL (e.g. by assigning to a.href) and assigning it a.href again.  This correctly populates the
	 * properties such as protocol, hostname, port, etc.
	 *
	 * IE7 does not normalize the URL when assigned to an anchor node.  (Apparently, it does, if one
	 * uses the inner HTML approach to assign the URL as part of an HTML snippet -
	 * http://stackoverflow.com/a/472729)  However, setting img[src] does normalize the URL.
	 * Unfortunately, setting img[src] to something like "javascript:foo" on IE throws an exception.
	 * Since the primary usage for normalizing URLs is to sanitize such URLs, we can't use that
	 * method and IE < 8 is unsupported.
	 *
	 * References:
	 *   http://developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement
	 *   http://www.aptana.com/reference/html/api/HTMLAnchorElement.html
	 *   http://url.spec.whatwg.org/#urlutils
	 *   https://github.com/angular/angular.js/pull/2902
	 *   http://james.padolsey.com/javascript/parsing-urls-with-the-dom/
	 *
	 * @kind function
	 * @param {string} url The URL to be parsed.
	 * @description Normalizes and parses a URL.
	 * @returns {object} Returns the normalized URL as a dictionary.
	 *
	 *   | member name   | Description    |
	 *   |---------------|----------------|
	 *   | href          | A normalized version of the provided URL if it was not an absolute URL |
	 *   | protocol      | The protocol including the trailing colon                              |
	 *   | host          | The host and port (if the port is non-default) of the normalizedUrl    |
	 *   | search        | The search params, minus the question mark                             |
	 *   | hash          | The hash string, minus the hash symbol
	 *   | hostname      | The hostname
	 *   | port          | The port, without ":"
	 *   | pathname      | The pathname, beginning with "/"
	 *
	 */

	var urlParsingNode = document.createElement("a");
	/**
	 * documentMode is an IE-only property
	 * http://msdn.microsoft.com/en-us/library/ie/cc196988(v=vs.85).aspx
	 */
	var msie = document.documentMode;

	function urlParts(url) {
	  var href = url;

	  if (msie) {
	    // Normalize before parse.  Refer Implementation Notes on why this is
	    // done in two steps on IE.
	    urlParsingNode.setAttribute("href", href);
	    href = urlParsingNode.href;
	  }

	  urlParsingNode.setAttribute('href', href);

	  // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
	  return {
	    href: urlParsingNode.href,
	    protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
	    host: urlParsingNode.host,
	    search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
	    hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
	    hostname: urlParsingNode.hostname,
	    port: utilities.isNotEmptyString(urlParsingNode.port)? urlParsingNode.port: 80,
	    pathname: (urlParsingNode.pathname.charAt(0) === '/')
	      ? urlParsingNode.pathname
	      : '/' + urlParsingNode.pathname
	  };
	}


	/**
	 * This function accepts a query string (search part of a url) and returns a dictionary with
	 * the different key value pairs
	 * @param {string} qs queryString
	 */
	function queryStringToObj(qs, cond) {
	  var pairs, qsObj;

	  cond = utilities.isFunction(cond)? cond : function() {
	    return true;
	  };

	  qs = qs.trim().replace(/^\?/, '');
	  pairs = qs.split('&');
	  qsObj = {};

	  utilities.forEach(pairs, function (pair) {
	    var keyValue, key, value;
	    if (pair !== '') {
	      keyValue = pair.split('=');
	      key = keyValue[0];
	      value = keyValue[1];
	      if(cond(key, value)){
	        qsObj[key] = value;
	      }
	    }
	  });

	  return qsObj;
	}

	/**
	 * This function accepts an object and serializes it into a query string without the leading '?'
	 * @param obj
	 * @returns {string}
	 */
	function objToQueryString(obj) {
	  var pairs = [];
	  utilities.forEach(obj, function (value, key) {
	    pairs.push(key + '=' + value);
	  });
	  return pairs.join('&');
	}

	module.exports = {
	  urlParts: urlParts,
	  queryStringToObj: queryStringToObj,
	  objToQueryString: objToQueryString
	};

	},{"./utilityFunctions":45}],45:[function(require,module,exports){
	/*jshint unused:false */
	"use strict";

	var NODE_TYPE_ELEMENT = 1;
	var SNAKE_CASE_REGEXP = /[A-Z]/g;
	var EMAIL_REGEXP = /^[a-z0-9!#$%&'*+\/=?^_`{|}~.-]+@[a-z0-9]([a-z0-9-]*[a-z0-9])?(\.[a-z0-9]([a-z0-9-]*[a-z0-9])?)+$/i;
	/*jslint maxlen: 500 */
	var ISO8086_REGEXP = /^([\+-]?\d{4}(?!\d{2}\b))((-?)((0[1-9]|1[0-2])(\3([12]\d|0[1-9]|3[01]))?|W([0-4]\d|5[0-2])(-?[1-7])?|(00[1-9]|0[1-9]\d|[12]\d{2}|3([0-5]\d|6[1-6])))([T\s]((([01]\d|2[0-3])((:?)[0-5]\d)?|24\:?00)([\.,]\d+(?!:))?)?(\17[0-5]\d([\.,]\d+)?)?([zZ]|([\+-])([01]\d|2[0-3]):?([0-5]\d)?)?)?)?$/;


	function noop(){ }

	function isNull(o) {
	  return o === null;
	}

	function isDefined(o){
	  return o !== undefined;
	}

	function isUndefined(o){
	  return o === undefined;
	}

	function isObject(obj) {
	  return typeof obj === 'object';
	}

	function isFunction(str){
	  return typeof str === 'function';
	}

	function isNumber(num){
	  return typeof num === 'number';
	}

	function isWindow(obj) {
	  return utilities.isObject(obj) && obj.window === obj;
	}

	function isArray(array){
	  return Object.prototype.toString.call( array ) === '[object Array]';
	}

	function isArrayLike(obj) {
	  if (obj === null || utilities.isWindow(obj) || utilities.isFunction(obj) || utilities.isUndefined(obj)) {
	    return false;
	  }

	  var length = obj.length;

	  if (obj.nodeType === NODE_TYPE_ELEMENT && length) {
	    return true;
	  }

	  return utilities.isString(obj) || utilities.isArray(obj) || length === 0 ||
	    typeof length === 'number' && length > 0 && (length - 1) in obj;
	}

	function isString(str) {
	  return typeof str === 'string';
	}

	function isEmptyString(str) {
	  return utilities.isString(str) && str.length === 0;
	}

	function isNotEmptyString(str) {
	  return utilities.isString(str) && str.length !== 0;
	}

	function arrayLikeObjToArray(args) {
	  return Array.prototype.slice.call(args);
	}

	function forEach(obj, iterator, context) {
	  var key, length;
	  if (obj) {
	    if (isFunction(obj)) {
	      for (key in obj) {
	        // Need to check if hasOwnProperty exists,
	        // as on IE8 the result of querySelectorAll is an object without a hasOwnProperty function
	        if (key !== 'prototype' && key !== 'length' && key !== 'name' && (!obj.hasOwnProperty || obj.hasOwnProperty(key))) {
	          iterator.call(context, obj[key], key, obj);
	        }
	      }
	    } else if (isArray(obj)) {
	      var isPrimitive = typeof obj !== 'object';
	      for (key = 0, length = obj.length; key < length; key++) {
	        if (isPrimitive || key in obj) {
	          iterator.call(context, obj[key], key, obj);
	        }
	      }
	    } else if (obj.forEach && obj.forEach !== forEach) {
	      obj.forEach(iterator, context, obj);
	    } else {
	      for (key in obj) {
	        if (obj.hasOwnProperty(key)) {
	          iterator.call(context, obj[key], key, obj);
	        }
	      }
	    }
	  }
	  return obj;
	}

	function snake_case(name, separator) {
	  separator = separator || '_';
	  return name.replace(SNAKE_CASE_REGEXP, function(letter, pos) {
	    return (pos ? separator : '') + letter.toLowerCase();
	  });
	}

	function isValidEmail(email){
	  if(!utilities.isString(email)){
	    return false;
	  }

	  return EMAIL_REGEXP.test(email.trim());
	}

	function extend (obj) {
	  var arg, i, k;
	  for (i = 1; i < arguments.length; i++) {
	    arg = arguments[i];
	    for (k in arg) {
	      if (arg.hasOwnProperty(k)) {
	        if(isObject(obj[k]) && !isNull(obj[k]) && isObject(arg[k])){
	          obj[k] = extend({}, obj[k], arg[k]);
	        }else {
	          obj[k] = arg[k];
	        }
	      }
	    }
	  }
	  return obj;
	}

	function capitalize(s){
	  return s.charAt(0).toUpperCase() + s.slice(1);
	}

	function decapitalize(s) {
	  return s.charAt(0).toLowerCase() + s.slice(1);
	}

	/**
	 * This method works the same way array.prototype.map works but if the transformer returns undefine, then
	 * it won't be added to the transformed Array.
	 */
	function transformArray(array, transformer) {
	  var transformedArray = [];

	  array.forEach(function(item, index){
	    var transformedItem = transformer(item, index);
	    if(utilities.isDefined(transformedItem)) {
	      transformedArray.push(transformedItem);
	    }
	  });

	  return transformedArray;
	}

	function toFixedDigits(num, digits) {
	  var formattedNum = num + '';
	  digits = utilities.isNumber(digits) ? digits : 0;
	  num = utilities.isNumber(num) ? num : parseInt(num, 10);
	  if(utilities.isNumber(num) && !isNaN(num)){
	    formattedNum = num + '';
	    while(formattedNum.length < digits) {
	      formattedNum = '0' + formattedNum;
	    }
	    return formattedNum;
	  }
	  return NaN + '';
	}

	function throttle(callback, delay) {
	  var previousCall = new Date().getTime() - (delay + 1);
	  return function() {
	    var time = new Date().getTime();
	    if ((time - previousCall) >= delay) {
	      previousCall = time;
	      callback.apply(this, arguments);
	    }
	  };
	}

	function debounce (callback, wait) {
	  var timeoutId;

	  return function (){
	    if(timeoutId) {
	      clearTimeout(timeoutId);
	    }
	    timeoutId = setTimeout(function(){
	      callback.apply(this, arguments);
	      timeoutId = undefined;
	    }, wait);
	  };
	}

	// a function designed to blow up the stack in a naive way
	// but it is ok for videoJs children components
	function treeSearch(root, getChildren, found){
	  var children = getChildren(root);
	  for (var i = 0; i < children.length; i++){
	    if (found(children[i])) {
	      return children[i];
	    }
	    else {
	      var el = treeSearch(children[i], getChildren, found);
	      if (el){
	        return el;
	      }
	    }
	  }
	}

	function echoFn(val) {
	  return function () {
	    return val;
	  };
	}

	//Note: Supported formats come from http://www.w3.org/TR/NOTE-datetime
	// and the iso8601 regex comes from http://www.pelagodesign.com/blog/2009/05/20/iso-8601-date-validation-that-doesnt-suck/
	function isISO8601(value) {
	  if(utilities.isNumber(value)){
	    value = value + '';  //we make sure that we are working with strings
	  }

	  if(!utilities.isString(value)){
	    return false;
	  }

	  return ISO8086_REGEXP.test(value.trim());
	}

	/**
	 * Checks if the Browser is IE9 and below
	 * @returns {boolean}
	 */
	function isOldIE() {
	  var version = utilities.getInternetExplorerVersion(navigator);
	  if (version === -1) {
	    return false;
	  }

	  return version < 10;
	}

	/**
	 * Returns the version of Internet Explorer or a -1 (indicating the use of another browser).
	 * Source: https://msdn.microsoft.com/en-us/library/ms537509(v=vs.85).aspx
	 * @returns {number} the version of Internet Explorer or a -1 (indicating the use of another browser).
	 */
	function getInternetExplorerVersion(navigator) {
	  var rv = -1;

	  if (navigator.appName == 'Microsoft Internet Explorer') {
	    var ua = navigator.userAgent;
	    var re = new RegExp("MSIE ([0-9]{1,}[\.0-9]{0,})");
	    var res = re.exec(ua);
	    if (res !== null) {
	      rv = parseFloat(res[1]);
	    }
	  }

	  return rv;
	}

	function isIE11() {
	  var res = navigator.userAgent.search(/(trident).+rv[:\s]([\w\.]+).+like\sgecko/i);
	  return res >= 0;
	}

	/*** Mobile Utility functions ***/
	function isIDevice() {
	  return /iP(hone|ad)/.test(utilities._UA);
	}

	function isMobile() {
	  return /iP(hone|ad|od)|Android|Windows Phone/.test(utilities._UA);
	}

	function isIPhone() {
	  return /iP(hone|od)/.test(utilities._UA);
	}

	function isAndroid() {
	  return /Android/.test(utilities._UA);
	}

	var utilities = {
	  _UA: navigator.userAgent,
	  noop: noop,
	  isNull: isNull,
	  isDefined: isDefined,
	  isUndefined: isUndefined,
	  isObject: isObject,
	  isFunction: isFunction,
	  isNumber: isNumber,
	  isWindow: isWindow,
	  isArray: isArray,
	  isArrayLike: isArrayLike,
	  isString: isString,
	  isEmptyString: isEmptyString,
	  isNotEmptyString: isNotEmptyString,
	  arrayLikeObjToArray: arrayLikeObjToArray,
	  forEach: forEach,
	  snake_case: snake_case,
	  isValidEmail: isValidEmail,
	  extend: extend,
	  capitalize: capitalize,
	  decapitalize: decapitalize,
	  transformArray: transformArray,
	  toFixedDigits: toFixedDigits,
	  throttle: throttle,
	  debounce: debounce,
	  treeSearch: treeSearch,
	  echoFn: echoFn,
	  isISO8601: isISO8601,
	  isOldIE: isOldIE,
	  getInternetExplorerVersion: getInternetExplorerVersion,
	  isIE11: isIE11,
	  isIDevice: isIDevice,
	  isMobile: isMobile,
	  isIPhone: isIPhone,
	  isAndroid: isAndroid
	};

	module.exports = utilities;

	},{}],46:[function(require,module,exports){
	'use strict';

	var utilities = require('./utilityFunctions');

	var xml = {};

	xml.strToXMLDoc = function strToXMLDoc(stringContainingXMLSource){
	  //IE 8
	  if(typeof window.DOMParser === 'undefined'){
	    var xmlDocument = new ActiveXObject('Microsoft.XMLDOM');
	    xmlDocument.async = false;
	    xmlDocument.loadXML(stringContainingXMLSource);
	    return xmlDocument;
	  }

	  return parseString(stringContainingXMLSource);

	  function parseString(stringContainingXMLSource){
	    var parser = new DOMParser();
	    var parsedDocument;

	    //Note: This try catch is to deal with the fact that on IE parser.parseFromString does throw an error but the rest of the browsers don't.
	    try {
	      parsedDocument = parser.parseFromString(stringContainingXMLSource, "application/xml");

	      if(isParseError(parsedDocument) || utilities.isEmptyString(stringContainingXMLSource)){
	        throw new Error();
	      }
	    }catch(e){
	      throw new Error("xml.strToXMLDOC: Error parsing the string: '" + stringContainingXMLSource + "'");
	    }

	    return parsedDocument;
	  }

	  function isParseError(parsedDocument) {
	    try { // parser and parsererrorNS could be cached on startup for efficiency
	      var parser = new DOMParser(),
	        erroneousParse = parser.parseFromString('INVALID', 'text/xml'),
	        parsererrorNS = erroneousParse.getElementsByTagName("parsererror")[0].namespaceURI;

	      if (parsererrorNS === 'http://www.w3.org/1999/xhtml') {
	        // In PhantomJS the parseerror element doesn't seem to have a special namespace, so we are just guessing here :(
	        return parsedDocument.getElementsByTagName("parsererror").length > 0;
	      }

	      return parsedDocument.getElementsByTagNameNS(parsererrorNS, 'parsererror').length > 0;
	    } catch (e) {
	      //Note on IE parseString throws an error by itself and it will never reach this code. Because it will have failed before
	    }
	  }
	};

	xml.parseText = function parseText (sValue) {
	  if (/^\s*$/.test(sValue)) { return null; }
	  if (/^(?:true|false)$/i.test(sValue)) { return sValue.toLowerCase() === "true"; }
	  if (isFinite(sValue)) { return parseFloat(sValue); }
	  if (utilities.isISO8601(sValue)) { return new Date(sValue); }
	  return sValue.trim();
	};

	xml.JXONTree = function JXONTree (oXMLParent) {
	  var parseText = xml.parseText;

	  //The document object is an especial object that it may miss some functions or attrs depending on the browser.
	  //To prevent this problem with create the JXONTree using the root childNode which is a fully fleshed node on all supported
	  //browsers.
	  if(oXMLParent.documentElement){
	    return new xml.JXONTree(oXMLParent.documentElement);
	  }

	  if (oXMLParent.hasChildNodes()) {
	    var sCollectedTxt = "";
	    for (var oNode, sProp, vContent, nItem = 0; nItem < oXMLParent.childNodes.length; nItem++) {
	      oNode = oXMLParent.childNodes.item(nItem);
	      /*jshint bitwise: false*/
	      if ((oNode.nodeType - 1 | 1) === 3) { sCollectedTxt += oNode.nodeType === 3 ? oNode.nodeValue.trim() : oNode.nodeValue; }
	      else if (oNode.nodeType === 1 && !oNode.prefix) {
	        sProp = utilities.decapitalize(oNode.nodeName);
	        vContent = new xml.JXONTree(oNode);
	        if (this.hasOwnProperty(sProp)) {
	          if (this[sProp].constructor !== Array) { this[sProp] = [this[sProp]]; }
	          this[sProp].push(vContent);
	        } else { this[sProp] = vContent; }
	      }
	    }
	    if (sCollectedTxt) { this.keyValue = parseText(sCollectedTxt); }
	  }

	  //IE8 Stupid fix
	  var hasAttr = typeof oXMLParent.hasAttributes === 'undefined'? oXMLParent.attributes.length > 0: oXMLParent.hasAttributes();
	  if (hasAttr) {
	    var oAttrib;
	    for (var nAttrib = 0; nAttrib < oXMLParent.attributes.length; nAttrib++) {
	      oAttrib = oXMLParent.attributes.item(nAttrib);
	      this["@" + utilities.decapitalize(oAttrib.name)] = parseText(oAttrib.value.trim());
	    }
	  }
	};

	xml.JXONTree.prototype.attr = function(attr) {
	  return this['@' + utilities.decapitalize(attr)];
	};

	xml.toJXONTree = function toJXONTree(xmlString){
	  var xmlDoc = xml.strToXMLDoc(xmlString);
	  return new xml.JXONTree(xmlDoc);
	};

	/**
	 * Helper function to extract the keyvalue of a JXONTree obj
	 *
	 * @param xmlObj {JXONTree}
	 * return the key value or undefined;
	 */
	xml.keyValue = function getKeyValue(xmlObj) {
	  if(xmlObj){
	    return xmlObj.keyValue;
	  }
	  return undefined;
	};

	xml.attr = function getAttrValue(xmlObj, attr) {
	  if(xmlObj) {
	    return xmlObj['@' + utilities.decapitalize(attr)];
	  }
	  return undefined;
	};

	xml.encode = function encodeXML(str) {
	  if (!utilities.isString(str)) return undefined;

	  return str.replace(/&/g, '&amp;')
	    .replace(/</g, '&lt;')
	    .replace(/>/g, '&gt;')
	    .replace(/"/g, '&quot;')
	    .replace(/'/g, '&apos;');
	};

	xml.decode = function decodeXML(str) {
	  if (!utilities.isString(str)) return undefined;

	  return str.replace(/&apos;/g, "'")
	    .replace(/&quot;/g, '"')
	    .replace(/&gt;/g, '>')
	    .replace(/&lt;/g, '<')
	    .replace(/&amp;/g, '&');
	};

	module.exports = xml;

	},{"./utilityFunctions":45}],47:[function(require,module,exports){
	'use strict';


	window._molSettings = null;

	require('./plugin/components/ads-label_5');
	require('./plugin/components/black-poster_5');

	console.log('Custom MailOnline plugin version 1.2.6');

	var videoJsVAST = require('./plugin/videojs.vast.vpaid');

	if (videojs.registerPlugin) {
		videojs.registerPlugin('vastClient', videoJsVAST);
	}
	else {
		videojs.plugin('vastClient', videoJsVAST);
	}

	},{"./plugin/components/ads-label_5":33,"./plugin/components/black-poster_5":35,"./plugin/videojs.vast.vpaid":36}]},{},[47])
	//# sourceMappingURL=data:application/json;charset=utf-8;base64,


/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

	var _prefix = "apnVmapVast->userSync";
	var _logger = __webpack_require__(3);
	var debug = function (message) {
	   _logger.log(_prefix, message);
	};

	var UserSync = function() {
	    debug("initiated");
	    this.isComplete = false;

	    this.run = function(options) {
	        debug("start UserSync");
	        try {
	            if (this.isComplete) {
	                debug("stop UserSync because it's already done");
	            } else {
	                var targetElement = options.userSyncTargetElement;
	                if (options && options.usersync_url && typeof(options.usersync_url) === "string" && options.usersync_url !== "") {
	                    this.executeUserSync(options, targetElement);
	                    this.isComplete = true;
	                    debug("done");
	                } else {
	                    debug("stop UserSync because it needs proper options.usersync_url");
	                }
	            }
	        } catch (ex) {
	            debug("error: " + ex);
	        }

	    };

	    this.executeUserSync = function(options, targetElement) {
	        if (targetElement.ownerDocument && targetElement.ownerDocument.getElementById("apn_user_sync")) {
	            debug("stop UserSync because it's already done");
	        }
	        else {
		        debug("decode UserSync url");
		        var userSyncUrl = decodeURIComponent(options.usersync_url);
		        this.prepareIframeAndScript(userSyncUrl, targetElement);
	        }
	    };

	    this.prepareIframeAndScript = function(userSyncUrl, targetElement) {
	        debug("prepareIframeAndScript: " + userSyncUrl);

	        var iframe = document.createElement('iframe');
	        iframe.id = "apn_user_sync";

	        iframe.src = userSyncUrl;
	        iframe.width = "1";
	        iframe.height = "1";
	        iframe.frameborder = "0";
	        iframe.scrolling = "no";
	        iframe.marginheight = "0";
	        iframe.marginwidth = "0";
	        iframe.topmargin = "0";
	        iframe.leftmargin = "0";
	        iframe.style.position = "absolute";
	        iframe.style.overflow = "hidden";
	        iframe.style.clip = "rect(0 0 0 0)";
	        iframe.style.height = "1px";
	        iframe.style.width = "1px";
	        iframe.style.margin = "-1px";
	        iframe.style.padding = "0";
	        iframe.style.border = "0";

	        //iframe.style.display = "none";
	        targetElement.appendChild(iframe);

	        debug("UserSync iframe injected into target element: " + targetElement.id);
	    };
	};

	//singleton because this should be executed only onetime in life of adunits
	var UserSyncSingleton = (function () {
	    var instance;

	    var createInstance = function() {
	        var object = new UserSync();
	        return object;
	    };

	    return {
	        "sharedInstance": function () {
	            if (!instance) {
	                instance = createInstance();
	            }
	            return instance;
	        }
	    };
	})();

	module.exports = UserSyncSingleton;



/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

	var _logger = __webpack_require__(3);
	var _ImpbusCommunicator = __webpack_require__(17);
	try {
		var _molPlugin = __webpack_require__(33);	
	}
	catch(e) {}
	var _MarkersHandler = __webpack_require__(2);
	var _uaParser = __webpack_require__(9);
	var _UserSync = __webpack_require__(34);
	var _Utils = __webpack_require__(16);

	var _prefix = 'apnVmapVast->vastArrayManager';

	var vastArrayManager = function () {
		var _ua = _uaParser();
		var _player;
		var _options;
		var _adPlaying = false;
		var _defaultAdCancelTimeout = 3000;	
	    var _savedMarkers;
		var _markersHandler;
		var _markersReady = false;
	    var _contentDuration = 0;
	    var _adIndicator;
	    var _userSyncUrl;
		var _mobilePrerollNeedClick = false;
		
		var _cover = document.getElementById('apn-break-cover');

		var _adArray = [];
		var _timeMarkers = {};
		var _currentAdIdx;
		var _preparationDone = false;
		var _prerollNeedClickToPlay = false;
		var _impbusCommunicator = new _ImpbusCommunicator();

		var _playlist = [];
		var _playlistIdx = -1;
		var _nextPlaylistItemFired = false;
		var _lastAd = false;
		var _lastTimeOfNextListItemEvent = 0;
		var _curXmlIdx = -1;
		var _xmls = [];

		var _isMobile = _ua.device.type || _ua.device.model;
		var _isIos = _ua.os.name.toLowerCase() === 'ios';
		var _isIPhone = _isMobile && _ua.device.model.toLowerCase() === 'iphone';
		var _isIE = _ua.browser.name === 'IE';
	    
		function showCover(show) {
			_logger.log(_prefix, (show ? "Show" : "Hide") + " ad cover with spinner");
			if (show) {
	    		_cover.style.display = 'block';
	     		_player.el().classList.add('vjs-waiting');
			}
			else {
	    		_cover.style.display = 'none';
	    		_player.el().classList.remove('vjs-waiting');
			}
		}
		
		function resetContent() {
			setTimeout(function() {
				_adPlaying = false;
				if (_savedMarkers) {
			    	_player.markers.reset(JSON.parse(_savedMarkers));
				}
			}, 1000);
			_adIndicator.style.display = 'none';
			showCover(false);
			removeListeners();
			_Utils.showNextOverlay(true);
			_nextPlaylistItemFired = false;
			if (_lastAd) {
				_player.one('ended', function() {
					setTimeout(function() {
						if (!_nextPlaylistItemFired) {
							_logger.log(_prefix, "Go to next video in playlist");
							_player.playlist.next();
						}
					}, 1000);
				});
			}
		}
		
		function needPlayAdForPlaylistItem(plIdx) {
			if (_options.frequencyRules && _options.frequencyRules.playlistClips && _options.frequencyRules.playlistClips > 1) {
				var mod = plIdx % _options.frequencyRules.playlistClips;
				return mod === 0;
			}
			return true;
		}

		function nextListItemHandler() {
			_nextPlaylistItemFired = true;
			if (Date.now() - _lastTimeOfNextListItemEvent < 500) {
				// ignore repeated event
				return;
			}
			showCover(true);
			_lastTimeOfNextListItemEvent = Date.now();
			_playlistIdx++;
			if (_markersHandler && _player.markers && _player.markers.destroy) {
				_player.markers.destroy();
			}
			// _contentDuration = _player.duration() > 0 ? (parseInt(_player.duration()) - 0.5) : 0;
		
			if (needPlayAdForPlaylistItem(_player.playlist.currentIndex())) {
				// reset internal variables
				_options.apnTagParams = [];
				_adArray.forEach(function(val) {
					_options.apnTagParams.push({params: val.apnParams, timeOffset: val.timeOffset});
				});
				_adArray = [];
				_adPlaying = false;
				_savedMarkers = null;
				_markersReady = false;
				_timeMarkers = {};
				_currentAdIdx = undefined;
				_preparationDone = false;

				_logger.log(_prefix, "Start waiting metadata for next video in playlist");
				_player.one("loadedmetadata",prepareAdArray);
			}
			else {
				showCover(false);
				_player.playlist.autoadvance(0);
			}
		}

		function setPlaybackMethodData() {
			if (!_options) {
				return;
			}
			var initPlayback = "auto";
	    	if (_player.currentTime() === 0) {
	    		initPlayback = _player.autoplay() ? 'auto' : 'click';
	    	}
			var initAudio = _player.muted() ? 'off' : 'on';
			_options.initialPlayback = initPlayback;
			_options.initialAudio = initAudio;
		}
		
		function traceMessage(event) {
			_logger.log(_prefix, 'trace event message: ' + event.data.message);
			if (_options.pageNotificationCallback) {
				_options.pageNotificationCallback('message', event.data.message);
			}
		}
		
		function traceEvent(event) {
			_logger.log(_prefix, 'trace event: ' + event.data.event);
			if (_options.pageNotificationCallback) {
				_options.pageNotificationCallback('event', event.data.event);
			}
		}
		
	    function addListeners() {
	    	_player.one('vast.adStart', function() {
	      	  	_adIndicator.style.display = 'block';
	    		_adPlaying = true;
	    		if (_userSyncUrl) {
	    			_UserSync.sharedInstance().run({userSyncTargetElement: _player.el_, usersync_url: _userSyncUrl});
	    		}
				showCover(false);
			});
	    	
	    	_player.on('vast.adError', resetContent);    	
	    	_player.on('vast.adsCancel', resetContent);    	
	    	_player.on('vast.adSkip', resetContent);    	
	    	_player.on('vast.reset', resetContent);    	
	    	_player.on('vast.contentEnd', resetContent);
	    	_player.on('adFinished', resetContent);

	    	_player.on('trace.message', traceMessage);
	    	_player.on('trace.event', traceEvent);
	    }
	    
	    function removeListeners() {
	    	_player.off('vast.adError', resetContent);    	
	    	_player.off('vast.adsCancel', resetContent);    	
	    	_player.off('vast.adSkip', resetContent);    	
	    	_player.off('vast.reset', resetContent);    	
	    	_player.off('vast.contentEnd', resetContent);
	    	_player.off('adFinished', resetContent);

	    	_player.off('trace.message', traceMessage);
	    	_player.off('trace.event', traceEvent);
	    }

		function playAd(xml) {
			if (_adPlaying) {
				// not interrupt playing ad
				return;
			}
			removeListeners();
			setPlaybackMethodData();
			var needPauseAndPlay = !_isMobile || !_player.paused();
			if (needPauseAndPlay) {
				_player.pause();
			}
			_adPlaying = true;
			if (_markersHandler) {
				_savedMarkers = JSON.stringify(_player.markers.getMarkers());
				_player.markers.removeAll();
			}
			var clientParams = {
				verbosity: 5,	// for debugging only
				// VAST xml
				adTagXML: function(callback) { 
					setTimeout(function() {
						callback(null, xml);
					}, 0);
				},
				playAdAlways: false,
				//Note: As requested we set the ad timeout at the same place than the adsCancelTimeout
				adCancelTimeout: (_options && _options.timeouts && _options.timeouts.adStartTimeout) ? _options.timeouts.adStartTimeout : _defaultAdCancelTimeout,
				adsEnabled: true,
				initialPlayback: _options.initialPlayback,
				initialAudio: _options.initialAudio
			};
			if (_options && _options.skippable && _options.skippable.skipText) {
				clientParams.skipText = _options.skippable.skipText;
			}
			if (_options && _options.skippable && _options.skippable.skipButtonText) {
				clientParams.skipButtonText = _options.skippable.skipButtonText;
			}
			if (_options && _options.viewability) {
				_options.viewability.contextId = 'anoutstream';
				//_options.viewability.contextId = 'anbrighcoveplugin';
				clientParams.viewability = _options.viewability;
			}
			if (_options && _options.clickThruEnabled === false) {
				clientParams.disableClickThru = true;
			}
			if (_options && _options.skippable && _options.skippable.hasOwnProperty('enabled')) {
				clientParams.skippable = {};
				clientParams.skippable.enabled = _options.skippable.enabled;
				clientParams.skippable.videoThreshold = _options.skippable.videoThreshold * 1000;
				clientParams.skippable.videoOffset = _options.skippable.videoOffset * 1000;
			}
			if (_options && _options.wrapperLimit &&  _options.wrapperLimit > 0) {
				clientParams.wrapperLimit = _options.wrapperLimit;
			}
				
			addListeners();
			_player.vastClient(clientParams);
			if (_options.initialPlayback !== 'click' || _mobilePrerollNeedClick) {
				if (!_prerollNeedClickToPlay) {
					setTimeout(function() {
						_player.play();
					}, 0);
				}
			}
			_Utils.showNextOverlay(false);
		}

		function getXmlByTime(time) {
			for (var i = 0; i < _adArray.length; i++) {
				if (!_lastAd && i === (_adArray.length - 1)) {
					_lastAd = true;
				}
				if (_adArray[i].time === time) {
					if (!_adArray[i].played) {
						//traceMessage({data: {message: '_lastAd = ' + _lastAd}});
						_adArray[i].played = true;
						return _adArray[i].xml;
					}
					return null;
				}
			}
			return null;
		}

		function startAd(time) {
			_logger.log(_prefix, 'Try to play ad at time = ' + time);
			var xml = getXmlByTime(time);
			if (xml) {
				_logger.log(_prefix, 'VAST xml selected for time: ' + time);
				showCover(true);
				_mobilePrerollNeedClick = _isMobile && time === 0;
				if (_mobilePrerollNeedClick && _player.playlist && typeof _player.playlist === 'function') {
					if (_player.playlist.currentIndex() > 0) {
						_mobilePrerollNeedClick = false;
					}
				}
				if (_mobilePrerollNeedClick) {
					showCover(false);
					_player.bigPlayButton.el_.style.opacity = 1;
					if (_isIos) {
						// iOS
						if (_isIPhone) {
							// iPhone
							_player.one('play', function() {
								playAd(xml);
							});
						}
						else {
							// iPad
							_player.pause();
							_player.bigPlayButton.el_.style.display = 'block';
							_player.bigPlayButton.el_.style.opacity = 1;
							_player.one('play', function() {
								playAd(xml);
							});	
						}
					}
					else {
						// android
						_player.one('play', function() {
							playAd(xml);
						});
					}
				}
				else {
					_prerollNeedClickToPlay = false;
					if (time === 0 && _player.paused()) {
						_prerollNeedClickToPlay = true;
						_player.bigPlayButton.el_.style.display = 'block';
						_player.bigPlayButton.el_.style.opacity = 1;
					}
					playAd(xml);
				}
			}
			else {
				_logger.log(_prefix, 'VAST xml selected for time: ' + time + ' is invalid: ' + xml);
				showCover(false);
				if (time === 0 && _player.paused()) {
					_player.bigPlayButton.el_.style.display = 'block';
					_player.bigPlayButton.el_.style.opacity = 1;
					_player.one('play', function() {
						_player.bigPlayButton.el_.style.display = 'none';
					});	
				}
			}
		}

		function prepareXmlsForNextPlaylistItem() {
			_options.apnTagParams = _adArray[_curXmlIdx].apnParams;
			_impbusCommunicator.getXML(_options, _player, function(xml, errorCode, errorMessage) {
				if (errorCode) {
					_logger.error(_prefix, 'Error to get VAST xml for next playlist item. Erorr code: ' + errorCode + ". Error message: " + errorMessage);
					_xmls.push({xml: null, timeOffset: _adArray[_curXmlIdx].timeOffset});
				}
				else {
					_xmls.push({xml: xml, timeOffset: _adArray[_curXmlIdx].timeOffset});
				}
				_curXmlIdx++;
				if (_curXmlIdx < _adArray.length) {
					prepareXmlsForNextPlaylistItem();
				}
			});
		}

		function prepareNextAvailableXml() {
			var hasValidXml = false;
			if (_xmls.length > 0) {
				for (var i = 0; i < _adArray.length; i++) {
					var xmlEl = null;
					for (var j = 0; j < _xmls.length; j++) {
						if (_xmls[j].timeOffset === _adArray[i].timeOffset) {
							xmlEl = _xmls[j];
							break;
						}
					}
					if (xmlEl) {
						_adArray[i].xml = xmlEl.xml;
						if (!hasValidXml && _adArray[i].xml) {
							hasValidXml = true;
						}	
					}
				}
				_xmls = [];
				_preparationDone = true;
				if (_options.playerSettings.autostart) {
					_player.play();
				}
				if (hasValidXml && _markersHandler && !_markersReady) {
					_markersReady = true;
					_markersHandler.markers(_timeMarkers);
				}
				setTimeout(function() {
					_player.on('playlistitem', nextListItemHandler);
					if (_playlist.length > 1) {
						_player.playlist.autoadvance(hasValidXml ? null : 0);
					}
					if (_playlist.length > 1 && _player.playlist.currentIndex() < _playlist.length - 1) {
						_curXmlIdx = 0;
						prepareXmlsForNextPlaylistItem();
					}
				}, 1000);
			}
			else {
				_options.apnTagParams = _adArray[_currentAdIdx].apnParams;
				_impbusCommunicator.getXML(_options, _player, function(xml, errorCode, errorMessage) {
					if (_currentAdIdx >= _adArray.length) {
						return;
					}
					if (errorCode) {
						_logger.error(_prefix, 'Error to get VAST xml. Erorr code: ' + errorCode + ". Error message: " + errorMessage);
						_adArray[_currentAdIdx].xml = null;
					}
					else {
						hasValidXml = true;
						_adArray[_currentAdIdx].xml = xml;
						if (!_isMobile) {
							_preparationDone = true;
							if (_markersHandler && !_markersReady) {
								_markersReady = true;
								_markersHandler.markers(_timeMarkers);
							}
						}
					}
					_currentAdIdx++;
					if (_currentAdIdx < _adArray.length) {
						prepareNextAvailableXml();
					}
					else {
						_preparationDone = true;
						if (!_adPlaying) {
							showCover(false);
						}
						if (_options.playerSettings.autostart) {
							if (_isMobile) {
								if (_markersHandler && !_markersReady) {
									_markersReady = true;
									_markersHandler.markers(_timeMarkers);
								}
								_player.bigPlayButton.el_.style.display = 'block';
								_player.bigPlayButton.el_.style.opacity = 1;
								_player.one('play', function() {
									_player.bigPlayButton.el_.style.display = 'none';
								});	
							}
							_player.play();
						}
						setTimeout(function() {
							_player.on('playlistitem', nextListItemHandler);
							if (_playlist.length > 1) {
								_player.playlist.autoadvance(hasValidXml ? null : 0);
							}
							if (_playlist.length > 1 && _player.playlist.currentIndex() < _playlist.length - 1) {
								_curXmlIdx = 0;
								prepareXmlsForNextPlaylistItem();
							}
						}, 1000);
					}
				});
			}
		}
		
		function prepareAdArray() {
			_logger.log(_prefix, "Start preparing ad array (may called on loadmetadata event)");
			_lastAd = false;
			_preparationDone = false;
			_playlist = (_player.playlist && typeof _player.playlist === 'function') ? _player.playlist() : [];
			showCover(true);
			_timeMarkers = {
				markerStyle: {
					'width': '5px',
					'border-radius': '10%',
					'background-color': 'white'
				},
				markerTip: {
					display: false
				},
				onMarkerReached: function(marker) {
					startAd(marker.time);
				},
				markers: [],
				metadataLoaded: true
			};
			_player.off("loadedmetadata",prepareAdArray);
			var i;
			// get cue points data
			var cpTime = [];
			var textTracks = _player.textTracks()[0];
			if (textTracks.cues_ && textTracks.cues_.length > 0){
				for (i = 0; i < textTracks.cues_.length; i++) {
					var time = textTracks.cues_[i].startTime;
					cpTime.push(time);
				}
			}
			//_contentDuration = parseInt(_player.duration()) - 0.5;
			var hasPreroll = false;
			_contentDuration = _player.duration();
			for (i = 0; i < _options.apnTagParams.length; i++) {
				var seconds = _Utils.convertStringToSeconds(_options.apnTagParams[i].timeOffset, _contentDuration);
				if (seconds !== null && seconds <= _contentDuration) {
					var adObj = {time: seconds, played: false, apnParams: _options.apnTagParams[i].params,
						timeOffset: _options.apnTagParams[i].timeOffset};
					if (seconds < 0) {
						// cue point
						// get time from cue points data
						var idx = (-seconds) - 1;
						if (idx < cpTime.length) {
							seconds = cpTime[idx];
						}
					}
					if (seconds >= 0 && seconds <= _contentDuration) {
						if (seconds === _contentDuration) {
							seconds = parseInt(_contentDuration + 0.5);
						}
						_timeMarkers.markers.push({time: seconds});
						adObj.time = seconds;
						_adArray.push(adObj);
						if (seconds < 1) {
							hasPreroll = true;
						}
					}
				}
			}
			_adArray.sort(function(first, second) {
				return first.time - second.time;
			});

			if (_timeMarkers.markers.length > 0) {
				// initialize markers for all ads
				if (!_markersHandler) {
					_markersHandler = new _MarkersHandler(videojs);
				}
				_markersHandler.init(_player);
				//_markersHandler.markers(_timeMarkers);

				if (!hasPreroll) {
					showCover(false);
				}

				_currentAdIdx = 0;
				_options.apnTagParams = _adArray[_currentAdIdx].apnParams;
				prepareNextAvailableXml();
			}
			else {
				showCover(false);
			}
		}
	    
		this.play = function (vjsPlayer, options) {
	    	_player = vjsPlayer;
			_options = options;

	    	// get player autostart and audio settings
	    	_options.playerSettings = {};
	    	_options.playerSettings.autostart = _player.currentTime() === 0 ? _player.autoplay() : !_player.paused();
	    	_options.playerSettings.muted = _player.muted();
	    	
			// initialize graphics 
			_cover = document.createElement('div');
			_cover.id = 'apn-break-cover';
			_cover.style.width = '100%';
			_cover.style.height = '100%';
			_cover.style.backgroundColor = 'black';
			_cover.style.position = 'absolute';
			_cover.style.zIndex = 101;
			_player.el().appendChild(_cover);
			_cover.style.display = 'none';

			_adIndicator = document.createElement('p');
			_adIndicator.className = 'vjs-overlay';
			_adIndicator.innerHTML = _options.adText ? _options.adText : "Ad";
			_adIndicator.style.display = 'none';
			_adIndicator.style.left = '10px';
			_player.el().appendChild(_adIndicator);
			
		    _contentDuration = _player.duration() > 0 ? (parseInt(_player.duration()) - 0.5) : 0;
			
			_player.bigPlayButton.el_.style.opacity = 1;
	    	if (!_ua.device.type && !_ua.device.model && _options.playerSettings.autostart) {
				// hide big play button for desktop
				_player.bigPlayButton.el_.style.display = 'none';
			}
			if (_contentDuration) {
	    		// main content passible playing
	    		_player.pause();
				prepareAdArray();
			}
			else {
				showCover(true);
	    		if (_ua.device.type || _ua.device.model) {
					// mobile
					_options.playerSettings.autostart = true;
					_options.playerSettings.muted = _player.muted();
					if (_player.autoplay() === true) {
						_player.autoplay('any');
					}

					if (!_preparationDone) {
						_player.pause();
					}
					_player.one("loadedmetadata",prepareAdArray);
				}
				else {
					// desktop
					setTimeout(function() {
						if (!_isIE && _player.paused() && _player.bigPlayButton.el_.style.display !== 'block' && !_adPlaying) {
							showCover(false);
							_player.bigPlayButton.el_.style.display = 'block';
							_player.bigPlayButton.one('click', function() {
								_player.bigPlayButton.el_.style.display = 'none';
							});
						}	
					}, 1000);
					_player.one('playing', function() {
						if (_player.paused()) {
							showCover(false);
							_player.bigPlayButton.el_.style.display = 'block';
							_player.bigPlayButton.one('click', function() {
								_player.bigPlayButton.el_.style.display = 'none';
								prepareAdArray();
							});
						}
						else {
							_player.bigPlayButton.el_.style.display = 'none';
							prepareAdArray();
						}
						if (!_preparationDone) {
							_player.pause();
						}
					});
				}
			}
		};

	    this.stop = function() {
	    	if (_adPlaying) {
	    		_player.trigger('vast.adsCancel');
	    	}
			if (_markersHandler) {
	  	  		_player.markers.destroy();
			}
	    };

	};

	module.exports = vastArrayManager;


/***/ })
/******/ ]);
